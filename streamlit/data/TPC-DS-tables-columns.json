[
  {
    "index": 0,
    "query": "-- start query 1 in stream 0 using template query1.tpl \nWITH customer_total_return \n     AS (SELECT sr_customer_sk     AS ctr_customer_sk, \n                sr_store_sk        AS ctr_store_sk, \n                Sum(sr_return_amt) AS ctr_total_return \n         FROM   store_returns, \n                date_dim \n         WHERE  sr_returned_date_sk = d_date_sk \n                AND d_year = 2001 \n         GROUP  BY sr_customer_sk, \n                   sr_store_sk) \nSELECT c_customer_id \nFROM   customer_total_return ctr1, \n       store, \n       customer \nWHERE  ctr1.ctr_total_return > (SELECT Avg(ctr_total_return) * 1.2 \n                                FROM   customer_total_return ctr2 \n                                WHERE  ctr1.ctr_store_sk = ctr2.ctr_store_sk) \n       AND s_store_sk = ctr1.ctr_store_sk \n       AND s_state = 'TN' \n       AND ctr1.ctr_customer_sk = c_customer_sk \nORDER  BY c_customer_id\nLIMIT 100;\n",
    "tables": [
      "CUSTOMER",
      "DATE_DIM",
      "STORE",
      "STORE_RETURNS"
    ],
    "columns": [
      "C_CUSTOMER_ID",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_YEAR",
      "SR_CUSTOMER_SK",
      "SR_RETURNED_DATE_SK",
      "SR_RETURN_AMT",
      "SR_STORE_SK",
      "S_STATE",
      "S_STORE_SK"
    ],
    "question": "What is the customer ID for customers in Tennessee (TN) whose total return amount in 2001 is greater than 20% above the average total return amount for customers in the same store?"
  },
  {
    "index": 1,
    "query": "-- start query 10 in stream 0 using template query10.tpl \nSELECT cd_gender, \n               cd_marital_status, \n               cd_education_status, \n               Count(*) cnt1, \n               cd_purchase_estimate, \n               Count(*) cnt2, \n               cd_credit_rating, \n               Count(*) cnt3, \n               cd_dep_count, \n               Count(*) cnt4, \n               cd_dep_employed_count, \n               Count(*) cnt5, \n               cd_dep_college_count, \n               Count(*) cnt6 \nFROM   customer c, \n       customer_address ca, \n       customer_demographics \nWHERE  c.c_current_addr_sk = ca.ca_address_sk \n       AND ca_county IN ( 'Lycoming County', 'Sheridan County', \n                          'Kandiyohi County', \n                          'Pike County', \n                                           'Greene County' ) \n       AND cd_demo_sk = c.c_current_cdemo_sk \n       AND EXISTS (SELECT * \n                   FROM   store_sales, \n                          date_dim \n                   WHERE  c.c_customer_sk = ss_customer_sk \n                          AND ss_sold_date_sk = d_date_sk \n                          AND d_year = 2002 \n                          AND d_moy BETWEEN 4 AND 4 + 3) \n       AND ( EXISTS (SELECT * \n                     FROM   web_sales, \n                            date_dim \n                     WHERE  c.c_customer_sk = ws_bill_customer_sk \n                            AND ws_sold_date_sk = d_date_sk \n                            AND d_year = 2002 \n                            AND d_moy BETWEEN 4 AND 4 + 3) \n              OR EXISTS (SELECT * \n                         FROM   catalog_sales, \n                                date_dim \n                         WHERE  c.c_customer_sk = cs_ship_customer_sk \n                                AND cs_sold_date_sk = d_date_sk \n                                AND d_year = 2002 \n                                AND d_moy BETWEEN 4 AND 4 + 3) ) \nGROUP  BY cd_gender, \n          cd_marital_status, \n          cd_education_status, \n          cd_purchase_estimate, \n          cd_credit_rating, \n          cd_dep_count, \n          cd_dep_employed_count, \n          cd_dep_college_count \nORDER  BY cd_gender, \n          cd_marital_status, \n          cd_education_status, \n          cd_purchase_estimate, \n          cd_credit_rating, \n          cd_dep_count, \n          cd_dep_employed_count, \n          cd_dep_college_count\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_COUNTY",
      "CD_CREDIT_RATING",
      "CD_DEMO_SK",
      "CD_DEP_COLLEGE_COUNT",
      "CD_DEP_COUNT",
      "CD_DEP_EMPLOYED_COUNT",
      "CD_EDUCATION_STATUS",
      "CD_GENDER",
      "CD_MARITAL_STATUS",
      "CD_PURCHASE_ESTIMATE",
      "CS_SHIP_CUSTOMER_SK",
      "CS_SOLD_DATE_SK",
      "C_CURRENT_ADDR_SK",
      "C_CURRENT_CDEMO_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "SS_CUSTOMER_SK",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the count of customers by their demographic information (gender, marital status, education status, purchase estimate, credit rating, number of dependents, number of employed dependents, and number of college graduates) in the counties of Lycoming County, Sheridan County, Kandiyohi County, Pike County, and Greene County? The count should only include customers who made a purchase in the year 2002 between the months of April and June."
  },
  {
    "index": 2,
    "query": "-- start query 11 in stream 0 using template query11.tpl \nWITH year_total \n     AS (SELECT c_customer_id                                customer_id, \n                c_first_name                                 customer_first_name \n                , \n                c_last_name \n                customer_last_name, \n                c_preferred_cust_flag \n                   customer_preferred_cust_flag \n                    , \n                c_birth_country \n                    customer_birth_country, \n                c_login                                      customer_login, \n                c_email_address \n                customer_email_address, \n                d_year                                       dyear, \n                Sum(ss_ext_list_price - ss_ext_discount_amt) year_total, \n                's'                                          sale_type \n         FROM   customer, \n                store_sales, \n                date_dim \n         WHERE  c_customer_sk = ss_customer_sk \n                AND ss_sold_date_sk = d_date_sk \n         GROUP  BY c_customer_id, \n                   c_first_name, \n                   c_last_name, \n                   c_preferred_cust_flag, \n                   c_birth_country, \n                   c_login, \n                   c_email_address, \n                   d_year \n         UNION ALL \n         SELECT c_customer_id                                customer_id, \n                c_first_name                                 customer_first_name \n                , \n                c_last_name \n                customer_last_name, \n                c_preferred_cust_flag \n                customer_preferred_cust_flag \n                , \n                c_birth_country \n                customer_birth_country, \n                c_login                                      customer_login, \n                c_email_address \n                customer_email_address, \n                d_year                                       dyear, \n                Sum(ws_ext_list_price - ws_ext_discount_amt) year_total, \n                'w'                                          sale_type \n         FROM   customer, \n                web_sales, \n                date_dim \n         WHERE  c_customer_sk = ws_bill_customer_sk \n                AND ws_sold_date_sk = d_date_sk \n         GROUP  BY c_customer_id, \n                   c_first_name, \n                   c_last_name, \n                   c_preferred_cust_flag, \n                   c_birth_country, \n                   c_login, \n                   c_email_address, \n                   d_year) \nSELECT t_s_secyear.customer_id, \n               t_s_secyear.customer_first_name, \n               t_s_secyear.customer_last_name, \n               t_s_secyear.customer_birth_country \nFROM   year_total t_s_firstyear, \n       year_total t_s_secyear, \n       year_total t_w_firstyear, \n       year_total t_w_secyear \nWHERE  t_s_secyear.customer_id = t_s_firstyear.customer_id \n       AND t_s_firstyear.customer_id = t_w_secyear.customer_id \n       AND t_s_firstyear.customer_id = t_w_firstyear.customer_id \n       AND t_s_firstyear.sale_type = 's' \n       AND t_w_firstyear.sale_type = 'w' \n       AND t_s_secyear.sale_type = 's' \n       AND t_w_secyear.sale_type = 'w' \n       AND t_s_firstyear.dyear = 2001 \n       AND t_s_secyear.dyear = 2001 + 1 \n       AND t_w_firstyear.dyear = 2001 \n       AND t_w_secyear.dyear = 2001 + 1 \n       AND t_s_firstyear.year_total > 0 \n       AND t_w_firstyear.year_total > 0 \n       AND CASE \n             WHEN t_w_firstyear.year_total > 0 THEN t_w_secyear.year_total \/ \n                                                    t_w_firstyear.year_total \n             ELSE 0.0 \n           END > CASE \n                   WHEN t_s_firstyear.year_total > 0 THEN \n                   t_s_secyear.year_total \/ \n                   t_s_firstyear.year_total \n                   ELSE 0.0 \n                 END \nORDER  BY t_s_secyear.customer_id, \n          t_s_secyear.customer_first_name, \n          t_s_secyear.customer_last_name, \n          t_s_secyear.customer_birth_country\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "C_BIRTH_COUNTRY",
      "C_CUSTOMER_ID",
      "C_CUSTOMER_SK",
      "C_EMAIL_ADDRESS",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "C_LOGIN",
      "C_PREFERRED_CUST_FLAG",
      "D_DATE_SK",
      "D_YEAR",
      "SS_CUSTOMER_SK",
      "SS_EXT_DISCOUNT_AMT",
      "SS_EXT_LIST_PRICE",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_EXT_DISCOUNT_AMT",
      "WS_EXT_LIST_PRICE",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the customer ID, first name, last name, and birth country of the top 100 customers who had sales in the second year (2001 + 1) that increased compared to the first year (2001), for both store and web sales, with positive sales totals in both years?"
  },
  {
    "index": 3,
    "query": "-- start query 12 in stream 0 using template query12.tpl \nSELECT\n         i_item_id , \n         i_item_desc , \n         i_category , \n         i_class , \n         i_current_price , \n         Sum(ws_ext_sales_price)                                                              AS itemrevenue ,\n         Sum(ws_ext_sales_price)*100\/Sum(Sum(ws_ext_sales_price)) OVER (partition BY i_class) AS revenueratio\nFROM     web_sales , \n         item , \n         date_dim \nWHERE    ws_item_sk = i_item_sk \nAND      i_category IN ('Home', \n                        'Men', \n                        'Women') \nAND      ws_sold_date_sk = d_date_sk \nAND      d_date BETWEEN Cast('2000-05-11' AS DATE) AND      ( \n                  Cast('2000-05-11' AS DATE) + INTERVAL '30' day) \nGROUP BY i_item_id , \n         i_item_desc , \n         i_category , \n         i_class , \n         i_current_price \nORDER BY i_category , \n         i_class , \n         i_item_id , \n         i_item_desc , \n         revenueratio \nLIMIT 100; \n\n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "WEB_SALES"
    ],
    "columns": [
      "D_DATE",
      "D_DATE_SK",
      "I_CATEGORY",
      "I_CLASS",
      "I_CURRENT_PRICE",
      "I_ITEM_DESC",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the revenue generated from the web sales of items belonging to the categories \"Home\", \"Men\", and \"Women\" within a specific date range? Additionally, what is the revenue ratio for each item class based on the total revenue generated within that class?"
  },
  {
    "index": 4,
    "query": "-- start query 13 in stream 0 using template query13.tpl \nSELECT Avg(ss_quantity), \n       Avg(ss_ext_sales_price), \n       Avg(ss_ext_wholesale_cost), \n       Sum(ss_ext_wholesale_cost) \nFROM   store_sales, \n       store, \n       customer_demographics, \n       household_demographics, \n       customer_address, \n       date_dim \nWHERE  s_store_sk = ss_store_sk \n       AND ss_sold_date_sk = d_date_sk \n       AND d_year = 2001 \n       AND ( ( ss_hdemo_sk = hd_demo_sk \n               AND cd_demo_sk = ss_cdemo_sk \n               AND cd_marital_status = 'U' \n               AND cd_education_status = 'Advanced Degree' \n               AND ss_sales_price BETWEEN 100.00 AND 150.00 \n               AND hd_dep_count = 3 ) \n              OR ( ss_hdemo_sk = hd_demo_sk \n                   AND cd_demo_sk = ss_cdemo_sk \n                   AND cd_marital_status = 'M' \n                   AND cd_education_status = 'Primary' \n                   AND ss_sales_price BETWEEN 50.00 AND 100.00 \n                   AND hd_dep_count = 1 ) \n              OR ( ss_hdemo_sk = hd_demo_sk \n                   AND cd_demo_sk = ss_cdemo_sk \n                   AND cd_marital_status = 'D' \n                   AND cd_education_status = 'Secondary' \n                   AND ss_sales_price BETWEEN 150.00 AND 200.00 \n                   AND hd_dep_count = 1 ) ) \n       AND ( ( ss_addr_sk = ca_address_sk \n               AND ca_country = 'United States' \n               AND ca_state IN ( 'AZ', 'NE', 'IA' ) \n               AND ss_net_profit BETWEEN 100 AND 200 ) \n              OR ( ss_addr_sk = ca_address_sk \n                   AND ca_country = 'United States' \n                   AND ca_state IN ( 'MS', 'CA', 'NV' ) \n                   AND ss_net_profit BETWEEN 150 AND 300 ) \n              OR ( ss_addr_sk = ca_address_sk \n                   AND ca_country = 'United States' \n                   AND ca_state IN ( 'GA', 'TX', 'NJ' ) \n                   AND ss_net_profit BETWEEN 50 AND 250 ) ); \n",
    "tables": [
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_COUNTRY",
      "CA_STATE",
      "CD_DEMO_SK",
      "CD_EDUCATION_STATUS",
      "CD_MARITAL_STATUS",
      "D_DATE_SK",
      "D_YEAR",
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "SS_ADDR_SK",
      "SS_CDEMO_SK",
      "SS_EXT_SALES_PRICE",
      "SS_EXT_WHOLESALE_COST",
      "SS_HDEMO_SK",
      "SS_NET_PROFIT",
      "SS_QUANTITY",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_SK"
    ],
    "question": "What is the average quantity, average extended sales price, average extended wholesale cost, and the sum of the extended wholesale cost of store sales in the year 2001, where the customer demographic is \"Unmarried\" and has an \"Advanced Degree\" education status and the sales price is between $100.00 and $150.00, and the household demographic has 3 dependents, OR the customer demographic is \"Married\" and has a \"Primary\" education status and the sales price is between $50.00 and $100.00, and the household demographic has 1 dependent, OR the customer demographic is \"Divorced\" and has a \"Secondary\" education status and the sales price is between $150.00 and $200.00, AND the address is in the United States, and the state is in either \"AZ\", \"NE\", or \"IA\", and the net profit is between $100 and $200, OR the address is in the United States, and the state is in either \"MS\", \"CA\", or \"NV\", and the net profit is between $150 and $300, OR the address is in the United States, and the state is in either \"GA\", \"TX\", or \"NJ\", and the net profit is between $50 and $250."
  },
  {
    "index": 5,
    "query": "-- start query 14 in stream 0 using template query14.tpl \nWITH cross_items \n     AS (SELECT i_item_sk ss_item_sk \n         FROM   item, \n                (SELECT iss.i_brand_id    brand_id, \n                        iss.i_class_id    class_id, \n                        iss.i_category_id category_id \n                 FROM   store_sales, \n                        item iss, \n                        date_dim d1 \n                 WHERE  ss_item_sk = iss.i_item_sk \n                        AND ss_sold_date_sk = d1.d_date_sk \n                        AND d1.d_year BETWEEN 1999 AND 1999 + 2 \n                 INTERSECT \n                 SELECT ics.i_brand_id, \n                        ics.i_class_id, \n                        ics.i_category_id \n                 FROM   catalog_sales, \n                        item ics, \n                        date_dim d2 \n                 WHERE  cs_item_sk = ics.i_item_sk \n                        AND cs_sold_date_sk = d2.d_date_sk \n                        AND d2.d_year BETWEEN 1999 AND 1999 + 2 \n                 INTERSECT \n                 SELECT iws.i_brand_id, \n                        iws.i_class_id, \n                        iws.i_category_id \n                 FROM   web_sales, \n                        item iws, \n                        date_dim d3 \n                 WHERE  ws_item_sk = iws.i_item_sk \n                        AND ws_sold_date_sk = d3.d_date_sk \n                        AND d3.d_year BETWEEN 1999 AND 1999 + 2) \n         WHERE  i_brand_id = brand_id \n                AND i_class_id = class_id \n                AND i_category_id = category_id), \n     avg_sales \n     AS (SELECT Avg(quantity * list_price) average_sales \n         FROM   (SELECT ss_quantity   quantity, \n                        ss_list_price list_price \n                 FROM   store_sales, \n                        date_dim \n                 WHERE  ss_sold_date_sk = d_date_sk \n                        AND d_year BETWEEN 1999 AND 1999 + 2 \n                 UNION ALL \n                 SELECT cs_quantity   quantity, \n                        cs_list_price list_price \n                 FROM   catalog_sales, \n                        date_dim \n                 WHERE  cs_sold_date_sk = d_date_sk \n                        AND d_year BETWEEN 1999 AND 1999 + 2 \n                 UNION ALL \n                 SELECT ws_quantity   quantity, \n                        ws_list_price list_price \n                 FROM   web_sales, \n                        date_dim \n                 WHERE  ws_sold_date_sk = d_date_sk \n                        AND d_year BETWEEN 1999 AND 1999 + 2) x) \nSELECT channel, \n               i_brand_id, \n               i_class_id, \n               i_category_id, \n               Sum(sales), \n               Sum(number_sales) \nFROM  (SELECT 'store'                          channel, \n              i_brand_id, \n              i_class_id, \n              i_category_id, \n              Sum(ss_quantity * ss_list_price) sales, \n              Count(*)                         number_sales \n       FROM   store_sales, \n              item, \n              date_dim \n       WHERE  ss_item_sk IN (SELECT ss_item_sk \n                             FROM   cross_items) \n              AND ss_item_sk = i_item_sk \n              AND ss_sold_date_sk = d_date_sk \n              AND d_year = 1999 + 2 \n              AND d_moy = 11 \n       GROUP  BY i_brand_id, \n                 i_class_id, \n                 i_category_id \n       HAVING Sum(ss_quantity * ss_list_price) > (SELECT average_sales \n                                                  FROM   avg_sales) \n       UNION ALL \n       SELECT 'catalog'                        channel, \n              i_brand_id, \n              i_class_id, \n              i_category_id, \n              Sum(cs_quantity * cs_list_price) sales, \n              Count(*)                         number_sales \n       FROM   catalog_sales, \n              item, \n              date_dim \n       WHERE  cs_item_sk IN (SELECT ss_item_sk \n                             FROM   cross_items) \n              AND cs_item_sk = i_item_sk \n              AND cs_sold_date_sk = d_date_sk \n              AND d_year = 1999 + 2 \n              AND d_moy = 11 \n       GROUP  BY i_brand_id, \n                 i_class_id, \n                 i_category_id \n       HAVING Sum(cs_quantity * cs_list_price) > (SELECT average_sales \n                                                  FROM   avg_sales) \n       UNION ALL \n       SELECT 'web'                            channel, \n              i_brand_id, \n              i_class_id, \n              i_category_id, \n              Sum(ws_quantity * ws_list_price) sales, \n              Count(*)                         number_sales \n       FROM   web_sales, \n              item, \n              date_dim \n       WHERE  ws_item_sk IN (SELECT ss_item_sk \n                             FROM   cross_items) \n              AND ws_item_sk = i_item_sk \n              AND ws_sold_date_sk = d_date_sk \n              AND d_year = 1999 + 2 \n              AND d_moy = 11 \n       GROUP  BY i_brand_id, \n                 i_class_id, \n                 i_category_id \n       HAVING Sum(ws_quantity * ws_list_price) > (SELECT average_sales \n                                                  FROM   avg_sales)) y \nGROUP  BY rollup ( channel, i_brand_id, i_class_id, i_category_id ) \nORDER  BY channel, \n          i_brand_id, \n          i_class_id, \n          i_category_id\nLIMIT 100; \n\nWITH cross_items \n     AS (SELECT i_item_sk ss_item_sk \n         FROM   item, \n                (SELECT iss.i_brand_id    brand_id, \n                        iss.i_class_id    class_id, \n                        iss.i_category_id category_id \n                 FROM   store_sales, \n                        item iss, \n                        date_dim d1 \n                 WHERE  ss_item_sk = iss.i_item_sk \n                        AND ss_sold_date_sk = d1.d_date_sk \n                        AND d1.d_year BETWEEN 1999 AND 1999 + 2 \n                 INTERSECT \n                 SELECT ics.i_brand_id, \n                        ics.i_class_id, \n                        ics.i_category_id \n                 FROM   catalog_sales, \n                        item ics, \n                        date_dim d2 \n                 WHERE  cs_item_sk = ics.i_item_sk \n                        AND cs_sold_date_sk = d2.d_date_sk \n                        AND d2.d_year BETWEEN 1999 AND 1999 + 2 \n                 INTERSECT \n                 SELECT iws.i_brand_id, \n                        iws.i_class_id, \n                        iws.i_category_id \n                 FROM   web_sales, \n                        item iws, \n                        date_dim d3 \n                 WHERE  ws_item_sk = iws.i_item_sk \n                        AND ws_sold_date_sk = d3.d_date_sk \n                        AND d3.d_year BETWEEN 1999 AND 1999 + 2) x \n         WHERE  i_brand_id = brand_id \n                AND i_class_id = class_id \n                AND i_category_id = category_id), \n     avg_sales \n     AS (SELECT Avg(quantity * list_price) average_sales \n         FROM   (SELECT ss_quantity   quantity, \n                        ss_list_price list_price \n                 FROM   store_sales, \n                        date_dim \n                 WHERE  ss_sold_date_sk = d_date_sk \n                        AND d_year BETWEEN 1999 AND 1999 + 2 \n                 UNION ALL \n                 SELECT cs_quantity   quantity, \n                        cs_list_price list_price \n                 FROM   catalog_sales, \n                        date_dim \n                 WHERE  cs_sold_date_sk = d_date_sk \n                        AND d_year BETWEEN 1999 AND 1999 + 2 \n                 UNION ALL \n                 SELECT ws_quantity   quantity, \n                        ws_list_price list_price \n                 FROM   web_sales, \n                        date_dim \n                 WHERE  ws_sold_date_sk = d_date_sk \n                        AND d_year BETWEEN 1999 AND 1999 + 2) x) \nSELECT  * \nFROM   (SELECT 'store'                          channel, \n               i_brand_id, \n               i_class_id, \n               i_category_id, \n               Sum(ss_quantity * ss_list_price) sales, \n               Count(*)                         number_sales \n        FROM   store_sales, \n               item, \n               date_dim \n        WHERE  ss_item_sk IN (SELECT ss_item_sk \n                              FROM   cross_items) \n               AND ss_item_sk = i_item_sk \n               AND ss_sold_date_sk = d_date_sk \n               AND d_week_seq = (SELECT d_week_seq \n                                 FROM   date_dim \n                                 WHERE  d_year = 1999 + 1 \n                                        AND d_moy = 12 \n                                        AND d_dom = 25) \n        GROUP  BY i_brand_id, \n                  i_class_id, \n                  i_category_id \n        HAVING Sum(ss_quantity * ss_list_price) > (SELECT average_sales \n                                                   FROM   avg_sales)) this_year, \n       (SELECT 'store'                          channel, \n               i_brand_id, \n               i_class_id, \n               i_category_id, \n               Sum(ss_quantity * ss_list_price) sales, \n               Count(*)                         number_sales \n        FROM   store_sales, \n               item, \n               date_dim \n        WHERE  ss_item_sk IN (SELECT ss_item_sk \n                              FROM   cross_items) \n               AND ss_item_sk = i_item_sk \n               AND ss_sold_date_sk = d_date_sk \n               AND d_week_seq = (SELECT d_week_seq \n                                 FROM   date_dim \n                                 WHERE  d_year = 1999 \n                                        AND d_moy = 12 \n                                        AND d_dom = 25) \n        GROUP  BY i_brand_id, \n                  i_class_id, \n                  i_category_id \n        HAVING Sum(ss_quantity * ss_list_price) > (SELECT average_sales \n                                                   FROM   avg_sales)) last_year \nWHERE  this_year.i_brand_id = last_year.i_brand_id \n       AND this_year.i_class_id = last_year.i_class_id \n       AND this_year.i_category_id = last_year.i_category_id \nORDER  BY this_year.channel, \n          this_year.i_brand_id, \n          this_year.i_class_id, \n          this_year.i_category_id\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CS_ITEM_SK",
      "CS_LIST_PRICE",
      "CS_QUANTITY",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_DOM",
      "D_MOY",
      "D_WEEK_SEQ",
      "D_YEAR",
      "I_BRAND_ID",
      "I_CATEGORY_ID",
      "I_CLASS_ID",
      "I_ITEM_SK",
      "SS_ITEM_SK",
      "SS_LIST_PRICE",
      "SS_QUANTITY",
      "SS_SOLD_DATE_SK",
      "WS_ITEM_SK",
      "WS_LIST_PRICE",
      "WS_QUANTITY",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the sales and number of sales for each channel, brand, class, and category where the sales are greater than the average sales for a given year and week, comparing this year's sales to last year's sales?"
  },
  {
    "index": 6,
    "query": "-- start query 15 in stream 0 using template query15.tpl \nSELECT ca_zip, \n               Sum(cs_sales_price) \nFROM   catalog_sales, \n       customer, \n       customer_address, \n       date_dim \nWHERE  cs_bill_customer_sk = c_customer_sk \n       AND c_current_addr_sk = ca_address_sk \n       AND ( Substr(ca_zip, 1, 5) IN ( '85669', '86197', '88274', '83405', \n                                       '86475', '85392', '85460', '80348', \n                                       '81792' ) \n              OR ca_state IN ( 'CA', 'WA', 'GA' ) \n              OR cs_sales_price > 500 ) \n       AND cs_sold_date_sk = d_date_sk \n       AND d_qoy = 1 \n       AND d_year = 1998 \nGROUP  BY ca_zip \nORDER  BY ca_zip\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "CA_ZIP",
      "CS_BILL_CUSTOMER_SK",
      "CS_SALES_PRICE",
      "CS_SOLD_DATE_SK",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_QOY",
      "D_YEAR"
    ],
    "question": "What is the sum of the sales price for each zip code in California, Washington, and Georgia in the first quarter of 1998, or if the sale price is greater than $500, for the zip codes 85669, 86197, 88274, 83405, 86475, 85392, 85460, 80348, and 81792?"
  },
  {
    "index": 7,
    "query": "-- start query 16 in stream 0 using template query16.tpl\nSELECT\n         Count(DISTINCT cs_order_number) AS `order count` ,\n         Sum(cs_ext_ship_cost)           AS `total shipping cost` ,\n         Sum(cs_net_profit)              AS `total net profit`\nFROM     catalog_sales cs1 ,\n         date_dim ,\n         customer_address ,\n         call_center\nWHERE    d_date BETWEEN '2002-3-01' AND      (\n                  Cast('2002-3-01' AS DATE) + INTERVAL '60' day)\nAND      cs1.cs_ship_date_sk = d_date_sk\nAND      cs1.cs_ship_addr_sk = ca_address_sk\nAND      ca_state = 'IA'\nAND      cs1.cs_call_center_sk = cc_call_center_sk\nAND      cc_county IN ('Williamson County',\n                       'Williamson County',\n                       'Williamson County',\n                       'Williamson County',\n                       'Williamson County' )\nAND      EXISTS\n         (\n                SELECT *\n                FROM   catalog_sales cs2\n                WHERE  cs1.cs_order_number = cs2.cs_order_number\n                AND    cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)\nAND      NOT EXISTS\n         (\n                SELECT *\n                FROM   catalog_returns cr1\n                WHERE  cs1.cs_order_number = cr1.cr_order_number)\nORDER BY count(DISTINCT cs_order_number)\nLIMIT 100;\n\n",
    "tables": [
      "CALL_CENTER",
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "CUSTOMER_ADDRESS",
      "DATE_DIM"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "CC_CALL_CENTER_SK",
      "CC_COUNTY",
      "CR_ORDER_NUMBER",
      "CS_CALL_CENTER_SK",
      "CS_EXT_SHIP_COST",
      "CS_NET_PROFIT",
      "CS_ORDER_NUMBER",
      "CS_SHIP_ADDR_SK",
      "CS_SHIP_DATE_SK",
      "CS_WAREHOUSE_SK",
      "D_DATE",
      "D_DATE_SK"
    ],
    "question": "What is the order count, total shipping cost, and total net profit for catalog sales in Williamson County, Iowa between March 1, 2002, and 60 days later, excluding catalog returns and including only orders where the warehouse location varies within the same order?"
  },
  {
    "index": 8,
    "query": "-- start query 17 in stream 0 using template query17.tpl \nSELECT i_item_id, \n               i_item_desc, \n               s_state, \n               Count(ss_quantity)                                        AS \n               store_sales_quantitycount, \n               Avg(ss_quantity)                                          AS \n               store_sales_quantityave, \n               Stddev_samp(ss_quantity)                                  AS \n               store_sales_quantitystdev, \n               Stddev_samp(ss_quantity) \/ Avg(ss_quantity)               AS \n               store_sales_quantitycov, \n               Count(sr_return_quantity)                                 AS \n               store_returns_quantitycount, \n               Avg(sr_return_quantity)                                   AS \n               store_returns_quantityave, \n               Stddev_samp(sr_return_quantity)                           AS \n               store_returns_quantitystdev, \n               Stddev_samp(sr_return_quantity) \/ Avg(sr_return_quantity) AS \n               store_returns_quantitycov, \n               Count(cs_quantity)                                        AS \n               catalog_sales_quantitycount, \n               Avg(cs_quantity)                                          AS \n               catalog_sales_quantityave, \n               Stddev_samp(cs_quantity) \/ Avg(cs_quantity)               AS \n               catalog_sales_quantitystdev, \n               Stddev_samp(cs_quantity) \/ Avg(cs_quantity)               AS \n               catalog_sales_quantitycov \nFROM   store_sales, \n       store_returns, \n       catalog_sales, \n       date_dim d1, \n       date_dim d2, \n       date_dim d3, \n       store, \n       item \nWHERE  d1.d_quarter_name = '1999Q1' \n       AND d1.d_date_sk = ss_sold_date_sk \n       AND i_item_sk = ss_item_sk \n       AND s_store_sk = ss_store_sk \n       AND ss_customer_sk = sr_customer_sk \n       AND ss_item_sk = sr_item_sk \n       AND ss_ticket_number = sr_ticket_number \n       AND sr_returned_date_sk = d2.d_date_sk \n       AND d2.d_quarter_name IN ( '1999Q1', '1999Q2', '1999Q3' ) \n       AND sr_customer_sk = cs_bill_customer_sk \n       AND sr_item_sk = cs_item_sk \n       AND cs_sold_date_sk = d3.d_date_sk \n       AND d3.d_quarter_name IN ( '1999Q1', '1999Q2', '1999Q3' ) \nGROUP  BY i_item_id, \n          i_item_desc, \n          s_state \nORDER  BY i_item_id, \n          i_item_desc, \n          s_state\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES"
    ],
    "columns": [
      "CS_BILL_CUSTOMER_SK",
      "CS_ITEM_SK",
      "CS_QUANTITY",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_QUARTER_NAME",
      "I_ITEM_DESC",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SR_CUSTOMER_SK",
      "SR_ITEM_SK",
      "SR_RETURNED_DATE_SK",
      "SR_RETURN_QUANTITY",
      "SR_TICKET_NUMBER",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_QUANTITY",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_STATE",
      "S_STORE_SK"
    ],
    "question": "What is the item ID, item description, state, store sales quantity count, store sales quantity average, store sales quantity standard deviation, store sales quantity coefficient of variation, store returns quantity count, store returns quantity average, store returns quantity standard deviation, store returns quantity coefficient of variation, catalog sales quantity count, catalog sales quantity average, catalog sales quantity standard deviation, and catalog sales quantity coefficient of variation for items sold in the first quarter of 1999 in the states of '1999Q1', '1999Q2', and '1999Q3'?"
  },
  {
    "index": 9,
    "query": "-- start query 18 in stream 0 using template query18.tpl \nSELECT i_item_id, \n               ca_country, \n               ca_state, \n               ca_county, \n               Avg(Cast(cs_quantity AS NUMERIC(12, 2)))      agg1, \n               Avg(Cast(cs_list_price AS NUMERIC(12, 2)))    agg2, \n               Avg(Cast(cs_coupon_amt AS NUMERIC(12, 2)))    agg3, \n               Avg(Cast(cs_sales_price AS NUMERIC(12, 2)))   agg4, \n               Avg(Cast(cs_net_profit AS NUMERIC(12, 2)))    agg5, \n               Avg(Cast(c_birth_year AS NUMERIC(12, 2)))     agg6, \n               Avg(Cast(cd1.cd_dep_count AS NUMERIC(12, 2))) agg7 \nFROM   catalog_sales, \n       customer_demographics cd1, \n       customer_demographics cd2, \n       customer, \n       customer_address, \n       date_dim, \n       item \nWHERE  cs_sold_date_sk = d_date_sk \n       AND cs_item_sk = i_item_sk \n       AND cs_bill_cdemo_sk = cd1.cd_demo_sk \n       AND cs_bill_customer_sk = c_customer_sk \n       AND cd1.cd_gender = 'F' \n       AND cd1.cd_education_status = 'Secondary' \n       AND c_current_cdemo_sk = cd2.cd_demo_sk \n       AND c_current_addr_sk = ca_address_sk \n       AND c_birth_month IN ( 8, 4, 2, 5, \n                              11, 9 ) \n       AND d_year = 2001 \n       AND ca_state IN ( 'KS', 'IA', 'AL', 'UT', \n                         'VA', 'NC', 'TX' ) \nGROUP  BY rollup ( i_item_id, ca_country, ca_state, ca_county ) \nORDER  BY ca_country, \n          ca_state, \n          ca_county, \n          i_item_id\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "ITEM"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_COUNTRY",
      "CA_COUNTY",
      "CA_STATE",
      "CD_DEMO_SK",
      "CD_DEP_COUNT",
      "CD_EDUCATION_STATUS",
      "CD_GENDER",
      "CS_BILL_CDEMO_SK",
      "CS_BILL_CUSTOMER_SK",
      "CS_COUPON_AMT",
      "CS_ITEM_SK",
      "CS_LIST_PRICE",
      "CS_NET_PROFIT",
      "CS_QUANTITY",
      "CS_SALES_PRICE",
      "CS_SOLD_DATE_SK",
      "C_BIRTH_MONTH",
      "C_BIRTH_YEAR",
      "C_CURRENT_ADDR_SK",
      "C_CURRENT_CDEMO_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_YEAR",
      "I_ITEM_ID",
      "I_ITEM_SK"
    ],
    "question": "What is the average quantity, list price, coupon amount, sales price, net profit, customer birth year, and department count for each item sold in the year 2001 by female customers with secondary education status, and whose current address is in the states of Kansas, Iowa, Alabama, Utah, Virginia, North Carolina, or Texas? The results should be grouped by item, country, state, and county, and sorted by country, state, county, and item."
  },
  {
    "index": 10,
    "query": "-- start query 19 in stream 0 using template query19.tpl \nSELECT i_brand_id              brand_id, \n               i_brand                 brand, \n               i_manufact_id, \n               i_manufact, \n               Sum(ss_ext_sales_price) ext_price \nFROM   date_dim, \n       store_sales, \n       item, \n       customer, \n       customer_address, \n       store \nWHERE  d_date_sk = ss_sold_date_sk \n       AND ss_item_sk = i_item_sk \n       AND i_manager_id = 38 \n       AND d_moy = 12 \n       AND d_year = 1998 \n       AND ss_customer_sk = c_customer_sk \n       AND c_current_addr_sk = ca_address_sk \n       AND Substr(ca_zip, 1, 5) <> Substr(s_zip, 1, 5) \n       AND ss_store_sk = s_store_sk \nGROUP  BY i_brand, \n          i_brand_id, \n          i_manufact_id, \n          i_manufact \nORDER  BY ext_price DESC, \n          i_brand, \n          i_brand_id, \n          i_manufact_id, \n          i_manufact\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_ZIP",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_BRAND",
      "I_BRAND_ID",
      "I_ITEM_SK",
      "I_MANAGER_ID",
      "I_MANUFACT",
      "I_MANUFACT_ID",
      "SS_CUSTOMER_SK",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_SK",
      "S_ZIP"
    ],
    "question": "What is the total sales revenue for each brand of products sold by the store managed by manager ID 38 in December 1998, excluding sales from customers with the same zip code as the store's zip code?"
  },
  {
    "index": 11,
    "query": "-- start query 2 in stream 0 using template query2.tpl  \nWITH wscs \n     AS (SELECT sold_date_sk, \n                sales_price \n         FROM   (SELECT ws_sold_date_sk    sold_date_sk, \n                        ws_ext_sales_price sales_price \n                 FROM   web_sales) \n         UNION ALL \n         (SELECT cs_sold_date_sk    sold_date_sk, \n                 cs_ext_sales_price sales_price \n          FROM   catalog_sales)), \n     wswscs \n     AS (SELECT d_week_seq, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Sunday' ) THEN sales_price \n                      ELSE NULL \n                    END) sun_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Monday' ) THEN sales_price \n                      ELSE NULL \n                    END) mon_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Tuesday' ) THEN sales_price \n                      ELSE NULL \n                    END) tue_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Wednesday' ) THEN sales_price \n                      ELSE NULL \n                    END) wed_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Thursday' ) THEN sales_price \n                      ELSE NULL \n                    END) thu_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Friday' ) THEN sales_price \n                      ELSE NULL \n                    END) fri_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Saturday' ) THEN sales_price \n                      ELSE NULL \n                    END) sat_sales \n         FROM   wscs, \n                date_dim \n         WHERE  d_date_sk = sold_date_sk \n         GROUP  BY d_week_seq) \nSELECT d_week_seq1, \n       Round(sun_sales1 \/ sun_sales2, 2), \n       Round(mon_sales1 \/ mon_sales2, 2), \n       Round(tue_sales1 \/ tue_sales2, 2), \n       Round(wed_sales1 \/ wed_sales2, 2), \n       Round(thu_sales1 \/ thu_sales2, 2), \n       Round(fri_sales1 \/ fri_sales2, 2), \n       Round(sat_sales1 \/ sat_sales2, 2) \nFROM   (SELECT wswscs.d_week_seq d_week_seq1, \n               sun_sales         sun_sales1, \n               mon_sales         mon_sales1, \n               tue_sales         tue_sales1, \n               wed_sales         wed_sales1, \n               thu_sales         thu_sales1, \n               fri_sales         fri_sales1, \n               sat_sales         sat_sales1 \n        FROM   wswscs, \n               date_dim \n        WHERE  date_dim.d_week_seq = wswscs.d_week_seq \n               AND d_year = 1998) y, \n       (SELECT wswscs.d_week_seq d_week_seq2, \n               sun_sales         sun_sales2, \n               mon_sales         mon_sales2, \n               tue_sales         tue_sales2, \n               wed_sales         wed_sales2, \n               thu_sales         thu_sales2, \n               fri_sales         fri_sales2, \n               sat_sales         sat_sales2 \n        FROM   wswscs, \n               date_dim \n        WHERE  date_dim.d_week_seq = wswscs.d_week_seq \n               AND d_year = 1998 + 1) z \nWHERE  d_week_seq1 = d_week_seq2 - 53 \nORDER  BY d_week_seq1;\n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "WEB_SALES"
    ],
    "columns": [
      "CS_EXT_SALES_PRICE",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_DAY_NAME",
      "D_WEEK_SEQ",
      "D_YEAR",
      "WS_EXT_SALES_PRICE",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the sales ratios for each day of the week in the year 1998 compared to the previous year (1997), calculated using the web_sales and catalog_sales tables?"
  },
  {
    "index": 12,
    "query": "-- start query 20 in stream 0 using template query20.tpl \nSELECT \n         i_item_id , \n         i_item_desc , \n         i_category , \n         i_class , \n         i_current_price , \n         Sum(cs_ext_sales_price)                                                              AS itemrevenue ,\n         Sum(cs_ext_sales_price)*100\/Sum(Sum(cs_ext_sales_price)) OVER (partition BY i_class) AS revenueratio\nFROM     catalog_sales , \n         item , \n         date_dim \nWHERE    cs_item_sk = i_item_sk \nAND      i_category IN ('Children', \n                        'Women', \n                        'Electronics') \nAND      cs_sold_date_sk = d_date_sk \nAND      d_date BETWEEN Cast('2001-02-03' AS DATE) AND      ( \n                  Cast('2001-02-03' AS DATE) + INTERVAL '30' day) \nGROUP BY i_item_id , \n         i_item_desc , \n         i_category , \n         i_class , \n         i_current_price \nORDER BY i_category , \n         i_class , \n         i_item_id , \n         i_item_desc , \n         revenueratio \nLIMIT 100; \n\n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM"
    ],
    "columns": [
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE",
      "D_DATE_SK",
      "I_CATEGORY",
      "I_CLASS",
      "I_CURRENT_PRICE",
      "I_ITEM_DESC",
      "I_ITEM_ID",
      "I_ITEM_SK"
    ],
    "question": "What is the revenue and revenue ratio for each item in the catalog sales dataset within the categories of Children, Women, and Electronics, for the period between February 3, 2001, and 30 days later (February 3, 2001 + 30 days)? Please provide the item ID, item description, category, class, current price, item revenue, and revenue ratio."
  },
  {
    "index": 13,
    "query": "-- start query 21 in stream 0 using template query21.tpl \nSELECT\n         * \nFROM    ( \n                  SELECT   w_warehouse_name , \n                           i_item_id , \n                           Sum( \n                           CASE \n                                    WHEN ( \n                                                      Cast(d_date AS DATE) < Cast ('2000-05-13' AS DATE)) THEN inv_quantity_on_hand \n                                    ELSE 0 \n                           END) AS inv_before , \n                           Sum( \n                           CASE \n                                    WHEN ( \n                                                      Cast(d_date AS DATE) >= Cast ('2000-05-13' AS DATE)) THEN inv_quantity_on_hand \n                                    ELSE 0 \n                           END) AS inv_after \n                  FROM     inventory , \n                           warehouse , \n                           item , \n                           date_dim \n                  WHERE    i_current_price BETWEEN 0.99 AND      1.49 \n                  AND      i_item_sk = inv_item_sk \n                  AND      inv_warehouse_sk = w_warehouse_sk \n                  AND      inv_date_sk = d_date_sk \n                  AND      d_date BETWEEN (Cast ('2000-05-13' AS DATE) - INTERVAL '30' day) AND      ( \n                                    cast ('2000-05-13' AS        date) + INTERVAL '30' day) \n                  GROUP BY w_warehouse_name, \n                           i_item_id) x \nWHERE    ( \n                  CASE \n                           WHEN inv_before > 0 THEN inv_after \/ inv_before \n                           ELSE NULL \n                  END) BETWEEN 2.0\/3.0 AND      3.0\/2.0 \nORDER BY w_warehouse_name , \n         i_item_id \nLIMIT 100; \n\n",
    "tables": [
      "DATE_DIM",
      "INVENTORY",
      "ITEM",
      "WAREHOUSE"
    ],
    "columns": [
      "D_DATE",
      "D_DATE_SK",
      "INV_DATE_SK",
      "INV_ITEM_SK",
      "INV_QUANTITY_ON_HAND",
      "INV_WAREHOUSE_SK",
      "I_CURRENT_PRICE",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "W_WAREHOUSE_NAME",
      "W_WAREHOUSE_SK"
    ],
    "question": "What are the warehouse names, item IDs, inventory quantities before and after a specified date, that meet the following conditions: inventory quantity before is greater than 0, and the ratio of inventory quantity after to inventory quantity before is between 2\/3 and 3\/2? The result should be sorted by warehouse name and item ID, and limited to 100 rows."
  },
  {
    "index": 14,
    "query": "-- start query 22 in stream 0 using template query22.tpl \nSELECT i_product_name, \n               i_brand, \n               i_class, \n               i_category, \n               Avg(inv_quantity_on_hand) qoh \nFROM   inventory, \n       date_dim, \n       item, \n       warehouse \nWHERE  inv_date_sk = d_date_sk \n       AND inv_item_sk = i_item_sk \n       AND inv_warehouse_sk = w_warehouse_sk \n       AND d_month_seq BETWEEN 1205 AND 1205 + 11 \nGROUP  BY rollup( i_product_name, i_brand, i_class, i_category ) \nORDER  BY qoh, \n          i_product_name, \n          i_brand, \n          i_class, \n          i_category\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "INVENTORY",
      "ITEM",
      "WAREHOUSE"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "INV_DATE_SK",
      "INV_ITEM_SK",
      "INV_QUANTITY_ON_HAND",
      "INV_WAREHOUSE_SK",
      "I_BRAND",
      "I_CATEGORY",
      "I_CLASS",
      "I_ITEM_SK",
      "I_PRODUCT_NAME",
      "W_WAREHOUSE_SK"
    ],
    "question": "What is the average quantity on hand (qoh) for each product name, brand, class, and category in the inventory, for the months of May 2012 through April 2013?"
  },
  {
    "index": 15,
    "query": "-- start query 23 in stream 0 using template query23.tpl \nWITH frequent_ss_items \n     AS (SELECT Substr(i_item_desc, 1, 30) itemdesc, \n                i_item_sk                  item_sk, \n                d_date                     solddate, \n                Count(*)                   cnt \n         FROM   store_sales, \n                date_dim, \n                item \n         WHERE  ss_sold_date_sk = d_date_sk \n                AND ss_item_sk = i_item_sk \n                AND d_year IN ( 1998, 1998 + 1, 1998 + 2, 1998 + 3 ) \n         GROUP  BY Substr(i_item_desc, 1, 30), \n                   i_item_sk, \n                   d_date \n         HAVING Count(*) > 4), \n     max_store_sales \n     AS (SELECT Max(csales) tpcds_cmax \n         FROM   (SELECT c_customer_sk, \n                        Sum(ss_quantity * ss_sales_price) csales \n                 FROM   store_sales, \n                        customer, \n                        date_dim \n                 WHERE  ss_customer_sk = c_customer_sk \n                        AND ss_sold_date_sk = d_date_sk \n                        AND d_year IN ( 1998, 1998 + 1, 1998 + 2, 1998 + 3 ) \n                 GROUP  BY c_customer_sk)), \n     best_ss_customer \n     AS (SELECT c_customer_sk, \n                Sum(ss_quantity * ss_sales_price) ssales \n         FROM   store_sales, \n                customer \n         WHERE  ss_customer_sk = c_customer_sk \n         GROUP  BY c_customer_sk \n         HAVING Sum(ss_quantity * ss_sales_price) > \n                ( 95 \/ 100.0 ) * (SELECT * \n                                  FROM   max_store_sales)) \nSELECT Sum(sales) \nFROM   (SELECT cs_quantity * cs_list_price sales \n        FROM   catalog_sales, \n               date_dim \n        WHERE  d_year = 1998 \n               AND d_moy = 6 \n               AND cs_sold_date_sk = d_date_sk \n               AND cs_item_sk IN (SELECT item_sk \n                                  FROM   frequent_ss_items) \n               AND cs_bill_customer_sk IN (SELECT c_customer_sk \n                                           FROM   best_ss_customer) \n        UNION ALL \n        SELECT ws_quantity * ws_list_price sales \n        FROM   web_sales, \n               date_dim \n        WHERE  d_year = 1998 \n               AND d_moy = 6 \n               AND ws_sold_date_sk = d_date_sk \n               AND ws_item_sk IN (SELECT item_sk \n                                  FROM   frequent_ss_items) \n               AND ws_bill_customer_sk IN (SELECT c_customer_sk \n                                           FROM   best_ss_customer)) LIMIT 100; \n\nWITH frequent_ss_items \n     AS (SELECT Substr(i_item_desc, 1, 30) itemdesc, \n                i_item_sk                  item_sk, \n                d_date                     solddate, \n                Count(*)                   cnt \n         FROM   store_sales, \n                date_dim, \n                item \n         WHERE  ss_sold_date_sk = d_date_sk \n                AND ss_item_sk = i_item_sk \n                AND d_year IN ( 1998, 1998 + 1, 1998 + 2, 1998 + 3 ) \n         GROUP  BY Substr(i_item_desc, 1, 30), \n                   i_item_sk, \n                   d_date \n         HAVING Count(*) > 4), \n     max_store_sales \n     AS (SELECT Max(csales) tpcds_cmax \n         FROM   (SELECT c_customer_sk, \n                        Sum(ss_quantity * ss_sales_price) csales \n                 FROM   store_sales, \n                        customer, \n                        date_dim \n                 WHERE  ss_customer_sk = c_customer_sk \n                        AND ss_sold_date_sk = d_date_sk \n                        AND d_year IN ( 1998, 1998 + 1, 1998 + 2, 1998 + 3 ) \n                 GROUP  BY c_customer_sk)), \n     best_ss_customer \n     AS (SELECT c_customer_sk, \n                Sum(ss_quantity * ss_sales_price) ssales \n         FROM   store_sales, \n                customer \n         WHERE  ss_customer_sk = c_customer_sk \n         GROUP  BY c_customer_sk \n         HAVING Sum(ss_quantity * ss_sales_price) > \n                ( 95 \/ 100.0 ) * (SELECT * \n                                  FROM   max_store_sales)) \nSELECT c_last_name, \n               c_first_name, \n               sales \nFROM   (SELECT c_last_name, \n               c_first_name, \n               Sum(cs_quantity * cs_list_price) sales \n        FROM   catalog_sales, \n               customer, \n               date_dim \n        WHERE  d_year = 1998 \n               AND d_moy = 6 \n               AND cs_sold_date_sk = d_date_sk \n               AND cs_item_sk IN (SELECT item_sk \n                                  FROM   frequent_ss_items) \n               AND cs_bill_customer_sk IN (SELECT c_customer_sk \n                                           FROM   best_ss_customer) \n               AND cs_bill_customer_sk = c_customer_sk \n        GROUP  BY c_last_name, \n                  c_first_name \n        UNION ALL \n        SELECT c_last_name, \n               c_first_name, \n               Sum(ws_quantity * ws_list_price) sales \n        FROM   web_sales, \n               customer, \n               date_dim \n        WHERE  d_year = 1998 \n               AND d_moy = 6 \n               AND ws_sold_date_sk = d_date_sk \n               AND ws_item_sk IN (SELECT item_sk \n                                  FROM   frequent_ss_items) \n               AND ws_bill_customer_sk IN (SELECT c_customer_sk \n                                           FROM   best_ss_customer) \n               AND ws_bill_customer_sk = c_customer_sk \n        GROUP  BY c_last_name, \n                  c_first_name) \nORDER  BY c_last_name, \n          c_first_name, \n          sales\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CS_BILL_CUSTOMER_SK",
      "CS_ITEM_SK",
      "CS_LIST_PRICE",
      "CS_QUANTITY",
      "CS_SOLD_DATE_SK",
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "D_DATE",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_ITEM_DESC",
      "I_ITEM_SK",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_QUANTITY",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_ITEM_SK",
      "WS_LIST_PRICE",
      "WS_QUANTITY",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the total sum of sales made in June 1998 by the top 100 customers (ordered by last name, first name, and sales amount) who purchased items that were frequently sold in the store and had sales greater than 95% of the maximum sales made by any customer in the store?"
  },
  {
    "index": 16,
    "query": "-- start query 24 in stream 0 using template query24.tpl \nWITH ssales \n     AS (SELECT c_last_name, \n                c_first_name, \n                s_store_name, \n                ca_state, \n                s_state, \n                i_color, \n                i_current_price, \n                i_manager_id, \n                i_units, \n                i_size, \n                Sum(ss_net_profit) netpaid \n         FROM   store_sales, \n                store_returns, \n                store, \n                item, \n                customer, \n                customer_address \n         WHERE  ss_ticket_number = sr_ticket_number \n                AND ss_item_sk = sr_item_sk \n                AND ss_customer_sk = c_customer_sk \n                AND ss_item_sk = i_item_sk \n                AND ss_store_sk = s_store_sk \n                AND c_birth_country = Upper(ca_country) \n                AND s_zip = ca_zip \n                AND s_market_id = 6 \n         GROUP  BY c_last_name, \n                   c_first_name, \n                   s_store_name, \n                   ca_state, \n                   s_state, \n                   i_color, \n                   i_current_price, \n                   i_manager_id, \n                   i_units, \n                   i_size) \nSELECT c_last_name, \n       c_first_name, \n       s_store_name, \n       Sum(netpaid) paid \nFROM   ssales \nWHERE  i_color = 'papaya' \nGROUP  BY c_last_name, \n          c_first_name, \n          s_store_name \nHAVING Sum(netpaid) > (SELECT 0.05 * Avg(netpaid) \n                       FROM   ssales); \n\nWITH ssales \n     AS (SELECT c_last_name, \n                c_first_name, \n                s_store_name, \n                ca_state, \n                s_state, \n                i_color, \n                i_current_price, \n                i_manager_id, \n                i_units, \n                i_size, \n                Sum(ss_net_profit) netpaid \n         FROM   store_sales, \n                store_returns, \n                store, \n                item, \n                customer, \n                customer_address \n         WHERE  ss_ticket_number = sr_ticket_number \n                AND ss_item_sk = sr_item_sk \n                AND ss_customer_sk = c_customer_sk \n                AND ss_item_sk = i_item_sk \n                AND ss_store_sk = s_store_sk \n                AND c_birth_country = Upper(ca_country) \n                AND s_zip = ca_zip \n                AND s_market_id = 6 \n         GROUP  BY c_last_name, \n                   c_first_name, \n                   s_store_name, \n                   ca_state, \n                   s_state, \n                   i_color, \n                   i_current_price, \n                   i_manager_id, \n                   i_units, \n                   i_size) \nSELECT c_last_name, \n       c_first_name, \n       s_store_name, \n       Sum(netpaid) paid \nFROM   ssales \nWHERE  i_color = 'chartreuse' \nGROUP  BY c_last_name, \n          c_first_name, \n          s_store_name \nHAVING Sum(netpaid) > (SELECT 0.05 * Avg(netpaid) \n                       FROM   ssales); \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "ITEM",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES"
    ],
    "columns": [
      "CA_COUNTRY",
      "CA_STATE",
      "CA_ZIP",
      "C_BIRTH_COUNTRY",
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "I_COLOR",
      "I_CURRENT_PRICE",
      "I_ITEM_SK",
      "I_MANAGER_ID",
      "I_SIZE",
      "I_UNITS",
      "SR_ITEM_SK",
      "SR_TICKET_NUMBER",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_NET_PROFIT",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_MARKET_ID",
      "S_STATE",
      "S_STORE_NAME",
      "S_STORE_SK",
      "S_ZIP"
    ],
    "question": "What is the total amount paid by customers with the last name, first name, and store name grouped by i_color, with the condition that the total amount paid is greater than 5% of the average amount paid in the dataset, where the color of the item is either 'papaya' or 'chartreuse'?"
  },
  {
    "index": 17,
    "query": "-- start query 25 in stream 0 using template query25.tpl \nSELECT i_item_id, \n               i_item_desc, \n               s_store_id, \n               s_store_name, \n               Max(ss_net_profit) AS store_sales_profit, \n               Max(sr_net_loss)   AS store_returns_loss, \n               Max(cs_net_profit) AS catalog_sales_profit \nFROM   store_sales, \n       store_returns, \n       catalog_sales, \n       date_dim d1, \n       date_dim d2, \n       date_dim d3, \n       store, \n       item \nWHERE  d1.d_moy = 4 \n       AND d1.d_year = 2001 \n       AND d1.d_date_sk = ss_sold_date_sk \n       AND i_item_sk = ss_item_sk \n       AND s_store_sk = ss_store_sk \n       AND ss_customer_sk = sr_customer_sk \n       AND ss_item_sk = sr_item_sk \n       AND ss_ticket_number = sr_ticket_number \n       AND sr_returned_date_sk = d2.d_date_sk \n       AND d2.d_moy BETWEEN 4 AND 10 \n       AND d2.d_year = 2001 \n       AND sr_customer_sk = cs_bill_customer_sk \n       AND sr_item_sk = cs_item_sk \n       AND cs_sold_date_sk = d3.d_date_sk \n       AND d3.d_moy BETWEEN 4 AND 10 \n       AND d3.d_year = 2001 \nGROUP  BY i_item_id, \n          i_item_desc, \n          s_store_id, \n          s_store_name \nORDER  BY i_item_id, \n          i_item_desc, \n          s_store_id, \n          s_store_name\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES"
    ],
    "columns": [
      "CS_BILL_CUSTOMER_SK",
      "CS_ITEM_SK",
      "CS_NET_PROFIT",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_ITEM_DESC",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SR_CUSTOMER_SK",
      "SR_ITEM_SK",
      "SR_NET_LOSS",
      "SR_RETURNED_DATE_SK",
      "SR_TICKET_NUMBER",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_NET_PROFIT",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_STORE_ID",
      "S_STORE_NAME",
      "S_STORE_SK"
    ],
    "question": "What were the maximum store sales profits, store returns losses, and catalog sales profits for each item, store, and month between April and October 2001?"
  },
  {
    "index": 18,
    "query": "-- start query 26 in stream 0 using template query26.tpl \nSELECT i_item_id, \n               Avg(cs_quantity)    agg1, \n               Avg(cs_list_price)  agg2, \n               Avg(cs_coupon_amt)  agg3, \n               Avg(cs_sales_price) agg4 \nFROM   catalog_sales, \n       customer_demographics, \n       date_dim, \n       item, \n       promotion \nWHERE  cs_sold_date_sk = d_date_sk \n       AND cs_item_sk = i_item_sk \n       AND cs_bill_cdemo_sk = cd_demo_sk \n       AND cs_promo_sk = p_promo_sk \n       AND cd_gender = 'F' \n       AND cd_marital_status = 'W' \n       AND cd_education_status = 'Secondary' \n       AND ( p_channel_email = 'N' \n              OR p_channel_event = 'N' ) \n       AND d_year = 2000 \nGROUP  BY i_item_id \nORDER  BY i_item_id\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "ITEM",
      "PROMOTION"
    ],
    "columns": [
      "CD_DEMO_SK",
      "CD_EDUCATION_STATUS",
      "CD_GENDER",
      "CD_MARITAL_STATUS",
      "CS_BILL_CDEMO_SK",
      "CS_COUPON_AMT",
      "CS_ITEM_SK",
      "CS_LIST_PRICE",
      "CS_PROMO_SK",
      "CS_QUANTITY",
      "CS_SALES_PRICE",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_YEAR",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "P_CHANNEL_EMAIL",
      "P_CHANNEL_EVENT",
      "P_PROMO_SK"
    ],
    "question": "What is the average quantity, list price, coupon amount, and sales price of catalog sales for items sold to female customers who are married, have a secondary education status, and made their purchase through channels other than email or event in the year 2000?"
  },
  {
    "index": 19,
    "query": "-- start query 27 in stream 0 using template query27.tpl \nSELECT i_item_id, \n               s_state, \n               Grouping(s_state)   g_state, \n               Avg(ss_quantity)    agg1, \n               Avg(ss_list_price)  agg2, \n               Avg(ss_coupon_amt)  agg3, \n               Avg(ss_sales_price) agg4 \nFROM   store_sales, \n       customer_demographics, \n       date_dim, \n       store, \n       item \nWHERE  ss_sold_date_sk = d_date_sk \n       AND ss_item_sk = i_item_sk \n       AND ss_store_sk = s_store_sk \n       AND ss_cdemo_sk = cd_demo_sk \n       AND cd_gender = 'M' \n       AND cd_marital_status = 'D' \n       AND cd_education_status = 'College' \n       AND d_year = 2000 \n       AND s_state IN ( 'TN', 'TN', 'TN', 'TN', \n                        'TN', 'TN' ) \nGROUP  BY rollup ( i_item_id, s_state ) \nORDER  BY i_item_id, \n          s_state\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "CD_DEMO_SK",
      "CD_EDUCATION_STATUS",
      "CD_GENDER",
      "CD_MARITAL_STATUS",
      "D_DATE_SK",
      "D_YEAR",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SS_CDEMO_SK",
      "SS_COUPON_AMT",
      "SS_ITEM_SK",
      "SS_LIST_PRICE",
      "SS_QUANTITY",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STATE",
      "S_STORE_SK"
    ],
    "question": "What is the average quantity, list price, coupon amount, and sales price of store sales for male customers who are married and have a college education, for each item and state combination, in the year 2000, for the states 'TN', 'TN', 'TN', 'TN', 'TN', 'TN'?"
  },
  {
    "index": 20,
    "query": "-- start query 28 in stream 0 using template query28.tpl \nSELECT * \nFROM   (SELECT Avg(ss_list_price)            B1_LP, \n               Count(ss_list_price)          B1_CNT, \n               Count(DISTINCT ss_list_price) B1_CNTD \n        FROM   store_sales \n        WHERE  ss_quantity BETWEEN 0 AND 5 \n               AND ( ss_list_price BETWEEN 18 AND 18 + 10 \n                      OR ss_coupon_amt BETWEEN 1939 AND 1939 + 1000 \n                      OR ss_wholesale_cost BETWEEN 34 AND 34 + 20 )) B1, \n       (SELECT Avg(ss_list_price)            B2_LP, \n               Count(ss_list_price)          B2_CNT, \n               Count(DISTINCT ss_list_price) B2_CNTD \n        FROM   store_sales \n        WHERE  ss_quantity BETWEEN 6 AND 10 \n               AND ( ss_list_price BETWEEN 1 AND 1 + 10 \n                      OR ss_coupon_amt BETWEEN 35 AND 35 + 1000 \n                      OR ss_wholesale_cost BETWEEN 50 AND 50 + 20 )) B2, \n       (SELECT Avg(ss_list_price)            B3_LP, \n               Count(ss_list_price)          B3_CNT, \n               Count(DISTINCT ss_list_price) B3_CNTD \n        FROM   store_sales \n        WHERE  ss_quantity BETWEEN 11 AND 15 \n               AND ( ss_list_price BETWEEN 91 AND 91 + 10 \n                      OR ss_coupon_amt BETWEEN 1412 AND 1412 + 1000 \n                      OR ss_wholesale_cost BETWEEN 17 AND 17 + 20 )) B3, \n       (SELECT Avg(ss_list_price)            B4_LP, \n               Count(ss_list_price)          B4_CNT, \n               Count(DISTINCT ss_list_price) B4_CNTD \n        FROM   store_sales \n        WHERE  ss_quantity BETWEEN 16 AND 20 \n               AND ( ss_list_price BETWEEN 9 AND 9 + 10 \n                      OR ss_coupon_amt BETWEEN 5270 AND 5270 + 1000 \n                      OR ss_wholesale_cost BETWEEN 29 AND 29 + 20 )) B4, \n       (SELECT Avg(ss_list_price)            B5_LP, \n               Count(ss_list_price)          B5_CNT, \n               Count(DISTINCT ss_list_price) B5_CNTD \n        FROM   store_sales \n        WHERE  ss_quantity BETWEEN 21 AND 25 \n               AND ( ss_list_price BETWEEN 45 AND 45 + 10 \n                      OR ss_coupon_amt BETWEEN 826 AND 826 + 1000 \n                      OR ss_wholesale_cost BETWEEN 5 AND 5 + 20 )) B5, \n       (SELECT Avg(ss_list_price)            B6_LP, \n               Count(ss_list_price)          B6_CNT, \n               Count(DISTINCT ss_list_price) B6_CNTD \n        FROM   store_sales \n        WHERE  ss_quantity BETWEEN 26 AND 30 \n               AND ( ss_list_price BETWEEN 174 AND 174 + 10 \n                      OR ss_coupon_amt BETWEEN 5548 AND 5548 + 1000 \n                      OR ss_wholesale_cost BETWEEN 42 AND 42 + 20 )) B6\nLIMIT 100; \n",
    "tables": [
      "STORE_SALES"
    ],
    "columns": [
      "SS_COUPON_AMT",
      "SS_LIST_PRICE",
      "SS_QUANTITY",
      "SS_WHOLESALE_COST"
    ],
    "question": "What are the average list prices (B1_LP, B2_LP, B3_LP, B4_LP, B5_LP, B6_LP), the count of list prices (B1_CNT, B2_CNT, B3_CNT, B4_CNT, B5_CNT, B6_CNT), and the count of distinct list prices (B1_CNTD, B2_CNTD, B3_CNTD, B4_CNTD, B5_CNTD, B6_CNTD) for products with different quantities (B1 for quantity between 0 and 5, B2 for quantity between 6 and 10, B3 for quantity between 11 and 15, B4 for quantity between 16 and 20, B5 for quantity between 21 and 25, and B6 for quantity between 26 and 30) that meet certain conditions on list price, coupon amount, and wholesale cost from the store_sales table?"
  },
  {
    "index": 21,
    "query": "-- start query 29 in stream 0 using template query29.tpl \nSELECT i_item_id, \n               i_item_desc, \n               s_store_id, \n               s_store_name, \n               Avg(ss_quantity)        AS store_sales_quantity, \n               Avg(sr_return_quantity) AS store_returns_quantity, \n               Avg(cs_quantity)        AS catalog_sales_quantity \nFROM   store_sales, \n       store_returns, \n       catalog_sales, \n       date_dim d1, \n       date_dim d2, \n       date_dim d3, \n       store, \n       item \nWHERE  d1.d_moy = 4 \n       AND d1.d_year = 1998 \n       AND d1.d_date_sk = ss_sold_date_sk \n       AND i_item_sk = ss_item_sk \n       AND s_store_sk = ss_store_sk \n       AND ss_customer_sk = sr_customer_sk \n       AND ss_item_sk = sr_item_sk \n       AND ss_ticket_number = sr_ticket_number \n       AND sr_returned_date_sk = d2.d_date_sk \n       AND d2.d_moy BETWEEN 4 AND 4 + 3 \n       AND d2.d_year = 1998 \n       AND sr_customer_sk = cs_bill_customer_sk \n       AND sr_item_sk = cs_item_sk \n       AND cs_sold_date_sk = d3.d_date_sk \n       AND d3.d_year IN ( 1998, 1998 + 1, 1998 + 2 ) \nGROUP  BY i_item_id, \n          i_item_desc, \n          s_store_id, \n          s_store_name \nORDER  BY i_item_id, \n          i_item_desc, \n          s_store_id, \n          s_store_name\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES"
    ],
    "columns": [
      "CS_BILL_CUSTOMER_SK",
      "CS_ITEM_SK",
      "CS_QUANTITY",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_ITEM_DESC",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SR_CUSTOMER_SK",
      "SR_ITEM_SK",
      "SR_RETURNED_DATE_SK",
      "SR_RETURN_QUANTITY",
      "SR_TICKET_NUMBER",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_QUANTITY",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_STORE_ID",
      "S_STORE_NAME",
      "S_STORE_SK"
    ],
    "question": "What is the average quantity of store sales, store returns, and catalog sales for each item at each store in April 1998, and for the following three months (May, June, July) in 1998, grouped by item and store ID?"
  },
  {
    "index": 22,
    "query": "-- start query 3 in stream 0 using template query3.tpl \nSELECT dt.d_year, \n               item.i_brand_id          brand_id, \n               item.i_brand             brand, \n               Sum(ss_ext_discount_amt) sum_agg \nFROM   date_dim dt, \n       store_sales, \n       item \nWHERE  dt.d_date_sk = store_sales.ss_sold_date_sk \n       AND store_sales.ss_item_sk = item.i_item_sk \n       AND item.i_manufact_id = 427 \n       AND dt.d_moy = 11 \nGROUP  BY dt.d_year, \n          item.i_brand, \n          item.i_brand_id \nORDER  BY dt.d_year, \n          sum_agg DESC, \n          brand_id\nLIMIT 100;\n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_BRAND",
      "I_BRAND_ID",
      "I_ITEM_SK",
      "I_MANUFACT_ID",
      "SS_EXT_DISCOUNT_AMT",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK"
    ],
    "question": "What is the total sum of the discount amounts for items manufactured by brand 427, grouped by year and brand, for the month of November (month number 11), and sorted by year, descending sum of discount amounts, and brand_id?"
  },
  {
    "index": 23,
    "query": "-- start query 30 in stream 0 using template query30.tpl \nWITH customer_total_return \n     AS (SELECT wr_returning_customer_sk AS ctr_customer_sk, \n                ca_state                 AS ctr_state, \n                Sum(wr_return_amt)       AS ctr_total_return \n         FROM   web_returns, \n                date_dim, \n                customer_address \n         WHERE  wr_returned_date_sk = d_date_sk \n                AND d_year = 2000 \n                AND wr_returning_addr_sk = ca_address_sk \n         GROUP  BY wr_returning_customer_sk, \n                   ca_state) \nSELECT c_customer_id, \n               c_salutation, \n               c_first_name, \n               c_last_name, \n               c_preferred_cust_flag, \n               c_birth_day, \n               c_birth_month, \n               c_birth_year, \n               c_birth_country, \n               c_login, \n               c_email_address, \n               c_last_review_date, \n               ctr_total_return \nFROM   customer_total_return ctr1, \n       customer_address, \n       customer \nWHERE  ctr1.ctr_total_return > (SELECT Avg(ctr_total_return) * 1.2 \n                                FROM   customer_total_return ctr2 \n                                WHERE  ctr1.ctr_state = ctr2.ctr_state) \n       AND ca_address_sk = c_current_addr_sk \n       AND ca_state = 'IN' \n       AND ctr1.ctr_customer_sk = c_customer_sk \nORDER  BY c_customer_id, \n          c_salutation, \n          c_first_name, \n          c_last_name, \n          c_preferred_cust_flag, \n          c_birth_day, \n          c_birth_month, \n          c_birth_year, \n          c_birth_country, \n          c_login, \n          c_email_address, \n          c_last_review_date, \n          ctr_total_return\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "WEB_RETURNS"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "C_BIRTH_COUNTRY",
      "C_BIRTH_DAY",
      "C_BIRTH_MONTH",
      "C_BIRTH_YEAR",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_ID",
      "C_CUSTOMER_SK",
      "C_EMAIL_ADDRESS",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "C_LAST_REVIEW_DATE",
      "C_LOGIN",
      "C_PREFERRED_CUST_FLAG",
      "C_SALUTATION",
      "D_DATE_SK",
      "D_YEAR",
      "WR_RETURNED_DATE_SK",
      "WR_RETURNING_ADDR_SK",
      "WR_RETURNING_CUSTOMER_SK",
      "WR_RETURN_AMT"
    ],
    "question": "What are the customer details (customer ID, salutation, first name, last name, preferred customer flag, birth day, birth month, birth year, birth country, login, email address, last review date) and their total return amount for customers from India (state = IN) in the year 2000, whose total return amount is greater than 120% of the average total return amount for customers from their respective states?"
  },
  {
    "index": 24,
    "query": "-- start query 31 in stream 0 using template query31.tpl \nWITH ss \n     AS (SELECT ca_county, \n                d_qoy, \n                d_year, \n                Sum(ss_ext_sales_price) AS store_sales \n         FROM   store_sales, \n                date_dim, \n                customer_address \n         WHERE  ss_sold_date_sk = d_date_sk \n                AND ss_addr_sk = ca_address_sk \n         GROUP  BY ca_county, \n                   d_qoy, \n                   d_year), \n     ws \n     AS (SELECT ca_county, \n                d_qoy, \n                d_year, \n                Sum(ws_ext_sales_price) AS web_sales \n         FROM   web_sales, \n                date_dim, \n                customer_address \n         WHERE  ws_sold_date_sk = d_date_sk \n                AND ws_bill_addr_sk = ca_address_sk \n         GROUP  BY ca_county, \n                   d_qoy, \n                   d_year) \nSELECT ss1.ca_county, \n       ss1.d_year, \n       ws2.web_sales \/ ws1.web_sales     web_q1_q2_increase, \n       ss2.store_sales \/ ss1.store_sales store_q1_q2_increase, \n       ws3.web_sales \/ ws2.web_sales     web_q2_q3_increase, \n       ss3.store_sales \/ ss2.store_sales store_q2_q3_increase \nFROM   ss ss1, \n       ss ss2, \n       ss ss3, \n       ws ws1, \n       ws ws2, \n       ws ws3 \nWHERE  ss1.d_qoy = 1 \n       AND ss1.d_year = 2001 \n       AND ss1.ca_county = ss2.ca_county \n       AND ss2.d_qoy = 2 \n       AND ss2.d_year = 2001 \n       AND ss2.ca_county = ss3.ca_county \n       AND ss3.d_qoy = 3 \n       AND ss3.d_year = 2001 \n       AND ss1.ca_county = ws1.ca_county \n       AND ws1.d_qoy = 1 \n       AND ws1.d_year = 2001 \n       AND ws1.ca_county = ws2.ca_county \n       AND ws2.d_qoy = 2 \n       AND ws2.d_year = 2001 \n       AND ws1.ca_county = ws3.ca_county \n       AND ws3.d_qoy = 3 \n       AND ws3.d_year = 2001 \n       AND CASE \n             WHEN ws1.web_sales > 0 THEN ws2.web_sales \/ ws1.web_sales \n             ELSE NULL \n           END > CASE \n                   WHEN ss1.store_sales > 0 THEN \n                   ss2.store_sales \/ ss1.store_sales \n                   ELSE NULL \n                 END \n       AND CASE \n             WHEN ws2.web_sales > 0 THEN ws3.web_sales \/ ws2.web_sales \n             ELSE NULL \n           END > CASE \n                   WHEN ss2.store_sales > 0 THEN \n                   ss3.store_sales \/ ss2.store_sales \n                   ELSE NULL \n                 END \nORDER  BY ss1.d_year; \n",
    "tables": [
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_COUNTY",
      "D_DATE_SK",
      "D_QOY",
      "D_YEAR",
      "SS_ADDR_SK",
      "SS_EXT_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "WS_BILL_ADDR_SK",
      "WS_EXT_SALES_PRICE",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the web sales and store sales increase between quarters 1 and 2, and between quarters 2 and 3, for each county in 2001?"
  },
  {
    "index": 25,
    "query": "-- start query 32 in stream 0 using template query32.tpl \nSELECT \n       Sum(cs_ext_discount_amt) AS `excess discount amount`\nFROM   catalog_sales , \n       item , \n       date_dim \nWHERE  i_manufact_id = 610 \nAND    i_item_sk = cs_item_sk \nAND    d_date BETWEEN '2001-03-04' AND    ( \n              Cast('2001-03-04' AS DATE) + INTERVAL '90' day) \nAND    d_date_sk = cs_sold_date_sk \nAND    cs_ext_discount_amt > \n       ( \n              SELECT 1.3 * avg(cs_ext_discount_amt) \n              FROM   catalog_sales , \n                     date_dim \n              WHERE  cs_item_sk = i_item_sk \n              AND    d_date BETWEEN '2001-03-04' AND    ( \n                            cast('2001-03-04' AS date) + INTERVAL '90' day) \n              AND    d_date_sk = cs_sold_date_sk ) \nLIMIT 100; \n\n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM"
    ],
    "columns": [
      "CS_EXT_DISCOUNT_AMT",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE",
      "D_DATE_SK",
      "I_ITEM_SK",
      "I_MANUFACT_ID"
    ],
    "question": "What is the excess discount amount for items manufactured by the company with ID 610, sold between March 4, 2001, and 90 days after that date? The excess discount amount is calculated as the sum of the catalog sales' extended discount amount (cs_ext_discount_amt) where the discount amount is greater than 1.3 times the average discount amount for the same item sold during the same time period."
  },
  {
    "index": 26,
    "query": "-- start query 33 in stream 0 using template query33.tpl \nWITH ss \n     AS (SELECT i_manufact_id, \n                Sum(ss_ext_sales_price) total_sales \n         FROM   store_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_manufact_id IN (SELECT i_manufact_id \n                                  FROM   item \n                                  WHERE  i_category IN ( 'Books' )) \n                AND ss_item_sk = i_item_sk \n                AND ss_sold_date_sk = d_date_sk \n                AND d_year = 1999 \n                AND d_moy = 3 \n                AND ss_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -5 \n         GROUP  BY i_manufact_id), \n     cs \n     AS (SELECT i_manufact_id, \n                Sum(cs_ext_sales_price) total_sales \n         FROM   catalog_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_manufact_id IN (SELECT i_manufact_id \n                                  FROM   item \n                                  WHERE  i_category IN ( 'Books' )) \n                AND cs_item_sk = i_item_sk \n                AND cs_sold_date_sk = d_date_sk \n                AND d_year = 1999 \n                AND d_moy = 3 \n                AND cs_bill_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -5 \n         GROUP  BY i_manufact_id), \n     ws \n     AS (SELECT i_manufact_id, \n                Sum(ws_ext_sales_price) total_sales \n         FROM   web_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_manufact_id IN (SELECT i_manufact_id \n                                  FROM   item \n                                  WHERE  i_category IN ( 'Books' )) \n                AND ws_item_sk = i_item_sk \n                AND ws_sold_date_sk = d_date_sk \n                AND d_year = 1999 \n                AND d_moy = 3 \n                AND ws_bill_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -5 \n         GROUP  BY i_manufact_id) \nSELECT i_manufact_id, \n               Sum(total_sales) total_sales \nFROM   (SELECT * \n        FROM   ss \n        UNION ALL \n        SELECT * \n        FROM   cs \n        UNION ALL \n        SELECT * \n        FROM   ws) tmp1 \nGROUP  BY i_manufact_id \nORDER  BY total_sales\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_GMT_OFFSET",
      "CS_BILL_ADDR_SK",
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_CATEGORY",
      "I_ITEM_SK",
      "I_MANUFACT_ID",
      "SS_ADDR_SK",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK",
      "WS_BILL_ADDR_SK",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the total sales for each manufacturer in the \"Books\" category in March 1999?"
  },
  {
    "index": 27,
    "query": "-- start query 34 in stream 0 using template query34.tpl \nSELECT c_last_name, \n       c_first_name, \n       c_salutation, \n       c_preferred_cust_flag, \n       ss_ticket_number, \n       cnt \nFROM   (SELECT ss_ticket_number, \n               ss_customer_sk, \n               Count(*) cnt \n        FROM   store_sales, \n               date_dim, \n               store, \n               household_demographics \n        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk \n               AND store_sales.ss_store_sk = store.s_store_sk \n               AND store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk \n               AND ( date_dim.d_dom BETWEEN 1 AND 3 \n                      OR date_dim.d_dom BETWEEN 25 AND 28 ) \n               AND ( household_demographics.hd_buy_potential = '>10000' \n                      OR household_demographics.hd_buy_potential = 'unknown' ) \n               AND household_demographics.hd_vehicle_count > 0 \n               AND ( CASE \n                       WHEN household_demographics.hd_vehicle_count > 0 THEN \n                       household_demographics.hd_dep_count \/ \n                       household_demographics.hd_vehicle_count \n                       ELSE NULL \n                     END ) > 1.2 \n               AND date_dim.d_year IN ( 1999, 1999 + 1, 1999 + 2 ) \n               AND store.s_county IN ( 'Williamson County', 'Williamson County', \n                                       'Williamson County', \n                                                             'Williamson County' \n                                       , \n                                       'Williamson County', 'Williamson County', \n                                           'Williamson County', \n                                                             'Williamson County' \n                                     ) \n        GROUP  BY ss_ticket_number, \n                  ss_customer_sk) dn, \n       customer \nWHERE  ss_customer_sk = c_customer_sk \n       AND cnt BETWEEN 15 AND 20 \nORDER  BY c_last_name, \n          c_first_name, \n          c_salutation, \n          c_preferred_cust_flag DESC; \n",
    "tables": [
      "CUSTOMER",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "C_PREFERRED_CUST_FLAG",
      "C_SALUTATION",
      "D_DATE_SK",
      "D_DOM",
      "D_YEAR",
      "HD_BUY_POTENTIAL",
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "HD_VEHICLE_COUNT",
      "SS_CUSTOMER_SK",
      "SS_HDEMO_SK",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_COUNTY",
      "S_STORE_SK"
    ],
    "question": "Which customers have made between 15 and 20 purchases in the months of January to February for the years 1999, 2000, and 2001, and are located in Williamson County?"
  },
  {
    "index": 28,
    "query": "-- start query 35 in stream 0 using template query35.tpl \nSELECT ca_state, \n               cd_gender, \n               cd_marital_status, \n               cd_dep_count, \n               Count(*) cnt1, \n               Stddev_samp(cd_dep_count), \n               Avg(cd_dep_count), \n               Max(cd_dep_count), \n               cd_dep_employed_count, \n               Count(*) cnt2, \n               Stddev_samp(cd_dep_employed_count), \n               Avg(cd_dep_employed_count), \n               Max(cd_dep_employed_count), \n               cd_dep_college_count, \n               Count(*) cnt3, \n               Stddev_samp(cd_dep_college_count), \n               Avg(cd_dep_college_count), \n               Max(cd_dep_college_count) \nFROM   customer c, \n       customer_address ca, \n       customer_demographics \nWHERE  c.c_current_addr_sk = ca.ca_address_sk \n       AND cd_demo_sk = c.c_current_cdemo_sk \n       AND EXISTS (SELECT * \n                   FROM   store_sales, \n                          date_dim \n                   WHERE  c.c_customer_sk = ss_customer_sk \n                          AND ss_sold_date_sk = d_date_sk \n                          AND d_year = 2001 \n                          AND d_qoy < 4) \n       AND ( EXISTS (SELECT * \n                     FROM   web_sales, \n                            date_dim \n                     WHERE  c.c_customer_sk = ws_bill_customer_sk \n                            AND ws_sold_date_sk = d_date_sk \n                            AND d_year = 2001 \n                            AND d_qoy < 4) \n              OR EXISTS (SELECT * \n                         FROM   catalog_sales, \n                                date_dim \n                         WHERE  c.c_customer_sk = cs_ship_customer_sk \n                                AND cs_sold_date_sk = d_date_sk \n                                AND d_year = 2001 \n                                AND d_qoy < 4) ) \nGROUP  BY ca_state, \n          cd_gender, \n          cd_marital_status, \n          cd_dep_count, \n          cd_dep_employed_count, \n          cd_dep_college_count \nORDER  BY ca_state, \n          cd_gender, \n          cd_marital_status, \n          cd_dep_count, \n          cd_dep_employed_count, \n          cd_dep_college_count\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "CD_DEMO_SK",
      "CD_DEP_COLLEGE_COUNT",
      "CD_DEP_COUNT",
      "CD_DEP_EMPLOYED_COUNT",
      "CD_GENDER",
      "CD_MARITAL_STATUS",
      "CS_SHIP_CUSTOMER_SK",
      "CS_SOLD_DATE_SK",
      "C_CURRENT_ADDR_SK",
      "C_CURRENT_CDEMO_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_QOY",
      "D_YEAR",
      "SS_CUSTOMER_SK",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the count, standard deviation, average, and maximum value of the dependent count, employed dependent count, and college dependent count for customers in each state, broken down by gender and marital status, who made store, web, or catalog purchases in 2001 before the 4th quarter?"
  },
  {
    "index": 29,
    "query": "-- start query 36 in stream 0 using template query36.tpl \nSELECT Sum(ss_net_profit) \/ Sum(ss_ext_sales_price)                 AS \n               gross_margin, \n               i_category, \n               i_class, \n               Grouping(i_category) + Grouping(i_class)                     AS \n               lochierarchy, \n               Rank() \n                 OVER ( \n                   partition BY Grouping(i_category)+Grouping(i_class), CASE \n                 WHEN Grouping( \n                 i_class) = 0 THEN i_category END \n                   ORDER BY Sum(ss_net_profit)\/Sum(ss_ext_sales_price) ASC) AS \n               rank_within_parent \nFROM   store_sales, \n       date_dim d1, \n       item, \n       store \nWHERE  d1.d_year = 2000 \n       AND d1.d_date_sk = ss_sold_date_sk \n       AND i_item_sk = ss_item_sk \n       AND s_store_sk = ss_store_sk \n       AND s_state IN ( 'TN', 'TN', 'TN', 'TN', \n                        'TN', 'TN', 'TN', 'TN' ) \nGROUP  BY rollup( i_category, i_class ) \nORDER  BY lochierarchy DESC, \n          CASE \n            WHEN lochierarchy = 0 THEN i_category \n          END, \n          rank_within_parent\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_YEAR",
      "I_CATEGORY",
      "I_CLASS",
      "I_ITEM_SK",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_NET_PROFIT",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STATE",
      "S_STORE_SK"
    ],
    "question": "What is the gross margin, i_category, i_class, lochierarchy, and rank_within_parent for the top 100 combinations of i_category and i_class in 2000 for the state of TN, TN, TN, TN, TN, TN, TN, TN?"
  },
  {
    "index": 30,
    "query": "-- start query 37 in stream 0 using template query37.tpl \nSELECT \n         i_item_id , \n         i_item_desc , \n         i_current_price \nFROM     item, \n         inventory, \n         date_dim, \n         catalog_sales \nWHERE    i_current_price BETWEEN 20 AND      20 + 30 \nAND      inv_item_sk = i_item_sk \nAND      d_date_sk=inv_date_sk \nAND      d_date BETWEEN Cast('1999-03-06' AS DATE) AND      ( \n                  Cast('1999-03-06' AS DATE) + INTERVAL '60' day) \nAND      i_manufact_id IN (843,815,850,840) \nAND      inv_quantity_on_hand BETWEEN 100 AND      500 \nAND      cs_item_sk = i_item_sk \nGROUP BY i_item_id, \n         i_item_desc, \n         i_current_price \nORDER BY i_item_id \nLIMIT 100; \n\n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "INVENTORY",
      "ITEM"
    ],
    "columns": [
      "CS_ITEM_SK",
      "D_DATE",
      "INV_ITEM_SK",
      "INV_QUANTITY_ON_HAND",
      "I_CURRENT_PRICE",
      "I_ITEM_DESC",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "I_MANUFACT_ID"
    ],
    "question": "What are the item IDs, descriptions, and current prices of the items that meet the following criteria: \n- The current price is between $20 and $50. \n- The items are in the inventory. \n- The inventory dates are between March 6, 1999, and 60 days later. \n- The items are manufactured by companies with the IDs 843, 815, 850, or 840. \n- The quantity on hand is between 100 and 500. \n- The items are part of catalog sales. \n- The results should be grouped by item ID, item description, and current price. \n- The results should be ordered by item ID. \n- Only the first 100 results should be returned."
  },
  {
    "index": 31,
    "query": "-- start query 38 in stream 0 using template query38.tpl \nSELECT Count(*) \nFROM   (SELECT DISTINCT c_last_name, \n                        c_first_name, \n                        d_date \n        FROM   store_sales, \n               date_dim, \n               customer \n        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk \n               AND store_sales.ss_customer_sk = customer.c_customer_sk \n               AND d_month_seq BETWEEN 1188 AND 1188 + 11 \n        INTERSECT \n        SELECT DISTINCT c_last_name, \n                        c_first_name, \n                        d_date \n        FROM   catalog_sales, \n               date_dim, \n               customer \n        WHERE  catalog_sales.cs_sold_date_sk = date_dim.d_date_sk \n               AND catalog_sales.cs_bill_customer_sk = customer.c_customer_sk \n               AND d_month_seq BETWEEN 1188 AND 1188 + 11 \n        INTERSECT \n        SELECT DISTINCT c_last_name, \n                        c_first_name, \n                        d_date \n        FROM   web_sales, \n               date_dim, \n               customer \n        WHERE  web_sales.ws_sold_date_sk = date_dim.d_date_sk \n               AND web_sales.ws_bill_customer_sk = customer.c_customer_sk \n               AND d_month_seq BETWEEN 1188 AND 1188 + 11) hot_cust\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CS_BILL_CUSTOMER_SK",
      "CS_SOLD_DATE_SK",
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "D_DATE",
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "SS_CUSTOMER_SK",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "How many customers made purchases in both the store, catalog, and web sales channels during a specific 12-month period?"
  },
  {
    "index": 32,
    "query": "-- start query 39 in stream 0 using template query39.tpl \nWITH inv \n     AS (SELECT w_warehouse_name, \n                w_warehouse_sk, \n                i_item_sk, \n                d_moy, \n                stdev, \n                mean, \n                CASE mean \n                  WHEN 0 THEN NULL \n                  ELSE stdev \/ mean \n                END cov \n         FROM  (SELECT w_warehouse_name, \n                       w_warehouse_sk, \n                       i_item_sk, \n                       d_moy, \n                       Stddev_samp(inv_quantity_on_hand) stdev, \n                       Avg(inv_quantity_on_hand)         mean \n                FROM   inventory, \n                       item, \n                       warehouse, \n                       date_dim \n                WHERE  inv_item_sk = i_item_sk \n                       AND inv_warehouse_sk = w_warehouse_sk \n                       AND inv_date_sk = d_date_sk \n                       AND d_year = 2002 \n                GROUP  BY w_warehouse_name, \n                          w_warehouse_sk, \n                          i_item_sk, \n                          d_moy) foo \n         WHERE  CASE mean \n                  WHEN 0 THEN 0 \n                  ELSE stdev \/ mean \n                END > 1) \nSELECT inv1.w_warehouse_sk, \n       inv1.i_item_sk, \n       inv1.d_moy, \n       inv1.mean, \n       inv1.cov, \n       inv2.w_warehouse_sk, \n       inv2.i_item_sk, \n       inv2.d_moy, \n       inv2.mean, \n       inv2.cov \nFROM   inv inv1, \n       inv inv2 \nWHERE  inv1.i_item_sk = inv2.i_item_sk \n       AND inv1.w_warehouse_sk = inv2.w_warehouse_sk \n       AND inv1.d_moy = 1 \n       AND inv2.d_moy = 1 + 1 \nORDER  BY inv1.w_warehouse_sk, \n          inv1.i_item_sk, \n          inv1.d_moy, \n          inv1.mean, \n          inv1.cov, \n          inv2.d_moy, \n          inv2.mean, \n          inv2.cov; \n\nWITH inv \n     AS (SELECT w_warehouse_name, \n                w_warehouse_sk, \n                i_item_sk, \n                d_moy, \n                stdev, \n                mean, \n                CASE mean \n                  WHEN 0 THEN NULL \n                  ELSE stdev \/ mean \n                END cov \n         FROM  (SELECT w_warehouse_name, \n                       w_warehouse_sk, \n                       i_item_sk, \n                       d_moy, \n                       Stddev_samp(inv_quantity_on_hand) stdev, \n                       Avg(inv_quantity_on_hand)         mean \n                FROM   inventory, \n                       item, \n                       warehouse, \n                       date_dim \n                WHERE  inv_item_sk = i_item_sk \n                       AND inv_warehouse_sk = w_warehouse_sk \n                       AND inv_date_sk = d_date_sk \n                       AND d_year = 2002 \n                GROUP  BY w_warehouse_name, \n                          w_warehouse_sk, \n                          i_item_sk, \n                          d_moy) foo \n         WHERE  CASE mean \n                  WHEN 0 THEN 0 \n                  ELSE stdev \/ mean \n                END > 1) \nSELECT inv1.w_warehouse_sk, \n       inv1.i_item_sk, \n       inv1.d_moy, \n       inv1.mean, \n       inv1.cov, \n       inv2.w_warehouse_sk, \n       inv2.i_item_sk, \n       inv2.d_moy, \n       inv2.mean, \n       inv2.cov \nFROM   inv inv1, \n       inv inv2 \nWHERE  inv1.i_item_sk = inv2.i_item_sk \n       AND inv1.w_warehouse_sk = inv2.w_warehouse_sk \n       AND inv1.d_moy = 1 \n       AND inv2.d_moy = 1 + 1 \n       AND inv1.cov > 1.5 \nORDER  BY inv1.w_warehouse_sk, \n          inv1.i_item_sk, \n          inv1.d_moy, \n          inv1.mean, \n          inv1.cov, \n          inv2.d_moy, \n          inv2.mean, \n          inv2.cov; \n",
    "tables": [
      "DATE_DIM",
      "INVENTORY",
      "ITEM",
      "WAREHOUSE"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "INV_DATE_SK",
      "INV_ITEM_SK",
      "INV_QUANTITY_ON_HAND",
      "INV_WAREHOUSE_SK",
      "I_ITEM_SK",
      "W_WAREHOUSE_NAME",
      "W_WAREHOUSE_SK"
    ],
    "question": "What are the warehouse, item, month, mean, and coefficient of variation (cov) for inventory items where the coefficient of variation is greater than 1.5?"
  },
  {
    "index": 33,
    "query": "-- start query 4 in stream 0 using template query4.tpl \nWITH year_total \n     AS (SELECT c_customer_id                       customer_id, \n                c_first_name                        customer_first_name, \n                c_last_name                         customer_last_name, \n                c_preferred_cust_flag               customer_preferred_cust_flag \n                , \n                c_birth_country \n                customer_birth_country, \n                c_login                             customer_login, \n                c_email_address                     customer_email_address, \n                d_year                              dyear, \n                Sum(( ( ss_ext_list_price - ss_ext_wholesale_cost \n                        - ss_ext_discount_amt \n                      ) \n                      + \n                          ss_ext_sales_price ) \/ 2) year_total, \n                's'                                 sale_type \n         FROM   customer, \n                store_sales, \n                date_dim \n         WHERE  c_customer_sk = ss_customer_sk \n                AND ss_sold_date_sk = d_date_sk \n         GROUP  BY c_customer_id, \n                   c_first_name, \n                   c_last_name, \n                   c_preferred_cust_flag, \n                   c_birth_country, \n                   c_login, \n                   c_email_address, \n                   d_year \n         UNION ALL \n         SELECT c_customer_id                             customer_id, \n                c_first_name                              customer_first_name, \n                c_last_name                               customer_last_name, \n                c_preferred_cust_flag \n                customer_preferred_cust_flag, \n                c_birth_country                           customer_birth_country \n                , \n                c_login \n                customer_login, \n                c_email_address                           customer_email_address \n                , \n                d_year                                    dyear \n                , \n                Sum(( ( ( cs_ext_list_price \n                          - cs_ext_wholesale_cost \n                          - cs_ext_discount_amt \n                        ) + \n                              cs_ext_sales_price ) \/ 2 )) year_total, \n                'c'                                       sale_type \n         FROM   customer, \n                catalog_sales, \n                date_dim \n         WHERE  c_customer_sk = cs_bill_customer_sk \n                AND cs_sold_date_sk = d_date_sk \n         GROUP  BY c_customer_id, \n                   c_first_name, \n                   c_last_name, \n                   c_preferred_cust_flag, \n                   c_birth_country, \n                   c_login, \n                   c_email_address, \n                   d_year \n         UNION ALL \n         SELECT c_customer_id                             customer_id, \n                c_first_name                              customer_first_name, \n                c_last_name                               customer_last_name, \n                c_preferred_cust_flag \n                customer_preferred_cust_flag, \n                c_birth_country                           customer_birth_country \n                , \n                c_login \n                customer_login, \n                c_email_address                           customer_email_address \n                , \n                d_year                                    dyear \n                , \n                Sum(( ( ( ws_ext_list_price \n                          - ws_ext_wholesale_cost \n                          - ws_ext_discount_amt \n                        ) + \n                              ws_ext_sales_price ) \/ 2 )) year_total, \n                'w'                                       sale_type \n         FROM   customer, \n                web_sales, \n                date_dim \n         WHERE  c_customer_sk = ws_bill_customer_sk \n                AND ws_sold_date_sk = d_date_sk \n         GROUP  BY c_customer_id, \n                   c_first_name, \n                   c_last_name, \n                   c_preferred_cust_flag, \n                   c_birth_country, \n                   c_login, \n                   c_email_address, \n                   d_year) \nSELECT t_s_secyear.customer_id, \n               t_s_secyear.customer_first_name, \n               t_s_secyear.customer_last_name, \n               t_s_secyear.customer_preferred_cust_flag \nFROM   year_total t_s_firstyear, \n       year_total t_s_secyear, \n       year_total t_c_firstyear, \n       year_total t_c_secyear, \n       year_total t_w_firstyear, \n       year_total t_w_secyear \nWHERE  t_s_secyear.customer_id = t_s_firstyear.customer_id \n       AND t_s_firstyear.customer_id = t_c_secyear.customer_id \n       AND t_s_firstyear.customer_id = t_c_firstyear.customer_id \n       AND t_s_firstyear.customer_id = t_w_firstyear.customer_id \n       AND t_s_firstyear.customer_id = t_w_secyear.customer_id \n       AND t_s_firstyear.sale_type = 's' \n       AND t_c_firstyear.sale_type = 'c' \n       AND t_w_firstyear.sale_type = 'w' \n       AND t_s_secyear.sale_type = 's' \n       AND t_c_secyear.sale_type = 'c' \n       AND t_w_secyear.sale_type = 'w' \n       AND t_s_firstyear.dyear = 2001 \n       AND t_s_secyear.dyear = 2001 + 1 \n       AND t_c_firstyear.dyear = 2001 \n       AND t_c_secyear.dyear = 2001 + 1 \n       AND t_w_firstyear.dyear = 2001 \n       AND t_w_secyear.dyear = 2001 + 1 \n       AND t_s_firstyear.year_total > 0 \n       AND t_c_firstyear.year_total > 0 \n       AND t_w_firstyear.year_total > 0 \n       AND CASE \n             WHEN t_c_firstyear.year_total > 0 THEN t_c_secyear.year_total \/ \n                                                    t_c_firstyear.year_total \n             ELSE NULL \n           END > CASE \n                   WHEN t_s_firstyear.year_total > 0 THEN \n                   t_s_secyear.year_total \/ \n                   t_s_firstyear.year_total \n                   ELSE NULL \n                 END \n       AND CASE \n             WHEN t_c_firstyear.year_total > 0 THEN t_c_secyear.year_total \/ \n                                                    t_c_firstyear.year_total \n             ELSE NULL \n           END > CASE \n                   WHEN t_w_firstyear.year_total > 0 THEN \n                   t_w_secyear.year_total \/ \n                   t_w_firstyear.year_total \n                   ELSE NULL \n                 END \nORDER  BY t_s_secyear.customer_id, \n          t_s_secyear.customer_first_name, \n          t_s_secyear.customer_last_name, \n          t_s_secyear.customer_preferred_cust_flag\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CS_BILL_CUSTOMER_SK",
      "CS_EXT_DISCOUNT_AMT",
      "CS_EXT_LIST_PRICE",
      "CS_EXT_SALES_PRICE",
      "CS_EXT_WHOLESALE_COST",
      "CS_SOLD_DATE_SK",
      "C_BIRTH_COUNTRY",
      "C_CUSTOMER_ID",
      "C_CUSTOMER_SK",
      "C_EMAIL_ADDRESS",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "C_LOGIN",
      "C_PREFERRED_CUST_FLAG",
      "D_DATE_SK",
      "D_YEAR",
      "SS_CUSTOMER_SK",
      "SS_EXT_DISCOUNT_AMT",
      "SS_EXT_LIST_PRICE",
      "SS_EXT_SALES_PRICE",
      "SS_EXT_WHOLESALE_COST",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_EXT_DISCOUNT_AMT",
      "WS_EXT_LIST_PRICE",
      "WS_EXT_SALES_PRICE",
      "WS_EXT_WHOLESALE_COST",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the customer details (customer ID, first name, last name, preferred customer flag) of the top 100 customers who had a sale in the second year (2001 + 1) and their sales in the second year were greater than the previous year for all 3 sale types (store sales, catalog sales, web sales)?"
  },
  {
    "index": 34,
    "query": "-- start query 40 in stream 0 using template query40.tpl \nSELECT\n                w_state , \n                i_item_id , \n                Sum( \n                CASE \n                                WHEN ( \n                                                                Cast(d_date AS DATE) < Cast ('2002-06-01' AS DATE)) THEN cs_sales_price - COALESCE(cr_refunded_cash,0) \n                                ELSE 0 \n                END) AS sales_before , \n                Sum( \n                CASE \n                                WHEN ( \n                                                                Cast(d_date AS DATE) >= Cast ('2002-06-01' AS DATE)) THEN cs_sales_price - COALESCE(cr_refunded_cash,0) \n                                ELSE 0 \n                END) AS sales_after \nFROM            catalog_sales \nLEFT OUTER JOIN catalog_returns \nON              ( \n                                cs_order_number = cr_order_number \n                AND             cs_item_sk = cr_item_sk) , \n                warehouse , \n                item , \n                date_dim \nWHERE           i_current_price BETWEEN 0.99 AND             1.49 \nAND             i_item_sk = cs_item_sk \nAND             cs_warehouse_sk = w_warehouse_sk \nAND             cs_sold_date_sk = d_date_sk \nAND             d_date BETWEEN (Cast ('2002-06-01' AS DATE) - INTERVAL '30' day) AND             ( \n                                cast ('2002-06-01' AS date) + INTERVAL '30' day) \nGROUP BY        w_state, \n                i_item_id \nORDER BY        w_state, \n                i_item_id \nLIMIT 100; \n\n",
    "tables": [
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "WAREHOUSE"
    ],
    "columns": [
      "CR_ITEM_SK",
      "CR_ORDER_NUMBER",
      "CR_REFUNDED_CASH",
      "CS_ITEM_SK",
      "CS_ORDER_NUMBER",
      "CS_SALES_PRICE",
      "CS_SOLD_DATE_SK",
      "CS_WAREHOUSE_SK",
      "D_DATE",
      "D_DATE_SK",
      "I_CURRENT_PRICE",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "W_STATE",
      "W_WAREHOUSE_SK"
    ],
    "question": "What is the total sales before and after June 1, 2002, for items with a current price between $0.99 and $1.49, grouped by state and item ID, for the top 100 rows?"
  },
  {
    "index": 35,
    "query": "-- start query 41 in stream 0 using template query41.tpl \nSELECT Distinct(i_product_name) \nFROM   item i1 \nWHERE  i_manufact_id BETWEEN 765 AND 765 + 40 \n       AND (SELECT Count(*) AS item_cnt \n            FROM   item \n            WHERE  ( i_manufact = i1.i_manufact \n                     AND ( ( i_category = 'Women' \n                             AND ( i_color = 'dim' \n                                    OR i_color = 'green' ) \n                             AND ( i_units = 'Gross' \n                                    OR i_units = 'Dozen' ) \n                             AND ( i_size = 'economy' \n                                    OR i_size = 'petite' ) ) \n                            OR ( i_category = 'Women' \n                                 AND ( i_color = 'navajo' \n                                        OR i_color = 'aquamarine' ) \n                                 AND ( i_units = 'Case' \n                                        OR i_units = 'Unknown' ) \n                                 AND ( i_size = 'large' \n                                        OR i_size = 'N\/A' ) ) \n                            OR ( i_category = 'Men' \n                                 AND ( i_color = 'indian' \n                                        OR i_color = 'dark' ) \n                                 AND ( i_units = 'Oz' \n                                        OR i_units = 'Lb' ) \n                                 AND ( i_size = 'extra large' \n                                        OR i_size = 'small' ) ) \n                            OR ( i_category = 'Men' \n                                 AND ( i_color = 'peach' \n                                        OR i_color = 'purple' ) \n                                 AND ( i_units = 'Tbl' \n                                        OR i_units = 'Bunch' ) \n                                 AND ( i_size = 'economy' \n                                        OR i_size = 'petite' ) ) ) ) \n                    OR ( i_manufact = i1.i_manufact \n                         AND ( ( i_category = 'Women' \n                                 AND ( i_color = 'orchid' \n                                        OR i_color = 'peru' ) \n                                 AND ( i_units = 'Carton' \n                                        OR i_units = 'Cup' ) \n                                 AND ( i_size = 'economy' \n                                        OR i_size = 'petite' ) ) \n                                OR ( i_category = 'Women' \n                                     AND ( i_color = 'violet' \n                                            OR i_color = 'papaya' ) \n                                     AND ( i_units = 'Ounce' \n                                            OR i_units = 'Box' ) \n                                     AND ( i_size = 'large' \n                                            OR i_size = 'N\/A' ) ) \n                                OR ( i_category = 'Men' \n                                     AND ( i_color = 'drab' \n                                            OR i_color = 'grey' ) \n                                     AND ( i_units = 'Each' \n                                            OR i_units = 'N\/A' ) \n                                     AND ( i_size = 'extra large' \n                                            OR i_size = 'small' ) ) \n                                OR ( i_category = 'Men' \n                                     AND ( i_color = 'chocolate' \n                                            OR i_color = 'antique' ) \n                                     AND ( i_units = 'Dram' \n                                            OR i_units = 'Gram' ) \n                                     AND ( i_size = 'economy' \n                                            OR i_size = 'petite' ) ) ) )) > 0 \nORDER  BY i_product_name\nLIMIT 100; \n",
    "tables": [
      "ITEM"
    ],
    "columns": [
      "I_CATEGORY",
      "I_COLOR",
      "I_MANUFACT",
      "I_MANUFACT_ID",
      "I_PRODUCT_NAME",
      "I_SIZE",
      "I_UNITS"
    ],
    "question": "What are the distinct names of the products that meet the following criteria: \n- The manufacturing ID is between 765 and 805.\n- The item is either in the \"Women\" category with color \"dim\" or \"green\", units in \"Gross\" or \"Dozen\", and size \"economy\" or \"petite\"; or in the \"Women\" category with color \"navajo\" or \"aquamarine\", units in \"Case\" or \"Unknown\", and size \"large\" or \"N\/A\"; or in the \"Men\" category with color \"indian\" or \"dark\", units in \"Oz\" or \"Lb\", and size \"extra large\" or \"small\"; or in the \"Men\" category with color \"peach\" or \"purple\", units in \"Tbl\" or \"Bunch\", and size \"economy\" or \"petite\".\n- OR the item is in the same manufacturing ID as the previous criteria, and it is either in the \"Women\" category with color \"orchid\" or \"peru\", units in \"Carton\" or \"Cup\", and size \"economy\" or \"petite\"; or in the \"Women\" category with color \"violet\" or \"papaya\", units in \"Ounce\" or \"Box\", and size \"large\" or \"N\/A\"; or in the \"Men\" category with color \"drab\" or \"grey\", units in \"Each\" or \"N\/A\", and size \"extra large\" or \"small\"; or in the \"Men\" category with color \"chocolate\" or \"antique\", units in \"Dram\" or \"Gram\", and size \"economy\" or \"petite\"."
  },
  {
    "index": 36,
    "query": "-- start query 42 in stream 0 using template query42.tpl \nSELECT dt.d_year, \n               item.i_category_id, \n               item.i_category, \n               Sum(ss_ext_sales_price) \nFROM   date_dim dt, \n       store_sales, \n       item \nWHERE  dt.d_date_sk = store_sales.ss_sold_date_sk \n       AND store_sales.ss_item_sk = item.i_item_sk \n       AND item.i_manager_id = 1 \n       AND dt.d_moy = 12 \n       AND dt.d_year = 2000 \nGROUP  BY dt.d_year, \n          item.i_category_id, \n          item.i_category \nORDER  BY Sum(ss_ext_sales_price) DESC, \n          dt.d_year, \n          item.i_category_id, \n          item.i_category\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_CATEGORY",
      "I_CATEGORY_ID",
      "I_ITEM_SK",
      "I_MANAGER_ID",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK"
    ],
    "question": "What are the total sales for each category of items managed by the manager with ID 1 in December 2000?"
  },
  {
    "index": 37,
    "query": "-- start query 43 in stream 0 using template query43.tpl \nSELECT s_store_name, \n               s_store_id, \n               Sum(CASE \n                     WHEN ( d_day_name = 'Sunday' ) THEN ss_sales_price \n                     ELSE NULL \n                   END) sun_sales, \n               Sum(CASE \n                     WHEN ( d_day_name = 'Monday' ) THEN ss_sales_price \n                     ELSE NULL \n                   END) mon_sales, \n               Sum(CASE \n                     WHEN ( d_day_name = 'Tuesday' ) THEN ss_sales_price \n                     ELSE NULL \n                   END) tue_sales, \n               Sum(CASE \n                     WHEN ( d_day_name = 'Wednesday' ) THEN ss_sales_price \n                     ELSE NULL \n                   END) wed_sales, \n               Sum(CASE \n                     WHEN ( d_day_name = 'Thursday' ) THEN ss_sales_price \n                     ELSE NULL \n                   END) thu_sales, \n               Sum(CASE \n                     WHEN ( d_day_name = 'Friday' ) THEN ss_sales_price \n                     ELSE NULL \n                   END) fri_sales, \n               Sum(CASE \n                     WHEN ( d_day_name = 'Saturday' ) THEN ss_sales_price \n                     ELSE NULL \n                   END) sat_sales \nFROM   date_dim, \n       store_sales, \n       store \nWHERE  d_date_sk = ss_sold_date_sk \n       AND s_store_sk = ss_store_sk \n       AND s_gmt_offset = -5 \n       AND d_year = 2002 \nGROUP  BY s_store_name, \n          s_store_id \nORDER  BY s_store_name, \n          s_store_id, \n          sun_sales, \n          mon_sales, \n          tue_sales, \n          wed_sales, \n          thu_sales, \n          fri_sales, \n          sat_sales\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_DAY_NAME",
      "D_YEAR",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_GMT_OFFSET",
      "S_STORE_ID",
      "S_STORE_NAME",
      "S_STORE_SK"
    ],
    "question": "What is the total sales for each store on each day of the week in the year 2002?"
  },
  {
    "index": 38,
    "query": "-- start query 44 in stream 0 using template query44.tpl \nSELECT asceding.rnk, \n               i1.i_product_name best_performing, \n               i2.i_product_name worst_performing \nFROM  (SELECT * \n       FROM   (SELECT item_sk, \n                      Rank() \n                        OVER ( \n                          ORDER BY rank_col ASC) rnk \n               FROM   (SELECT ss_item_sk         item_sk, \n                              Avg(ss_net_profit) rank_col \n                       FROM   store_sales ss1 \n                       WHERE  ss_store_sk = 4 \n                       GROUP  BY ss_item_sk \n                       HAVING Avg(ss_net_profit) > 0.9 * \n                              (SELECT Avg(ss_net_profit) \n                                      rank_col \n                               FROM   store_sales \n                               WHERE  ss_store_sk = 4 \n                                      AND ss_cdemo_sk IS \n                                          NULL \n                               GROUP  BY ss_store_sk))V1) \n              V11 \n       WHERE  rnk < 11) asceding, \n      (SELECT * \n       FROM   (SELECT item_sk, \n                      Rank() \n                        OVER ( \n                          ORDER BY rank_col DESC) rnk \n               FROM   (SELECT ss_item_sk         item_sk, \n                              Avg(ss_net_profit) rank_col \n                       FROM   store_sales ss1 \n                       WHERE  ss_store_sk = 4 \n                       GROUP  BY ss_item_sk \n                       HAVING Avg(ss_net_profit) > 0.9 * \n                              (SELECT Avg(ss_net_profit) \n                                      rank_col \n                               FROM   store_sales \n                               WHERE  ss_store_sk = 4 \n                                      AND ss_cdemo_sk IS \n                                          NULL \n                               GROUP  BY ss_store_sk))V2) \n              V21 \n       WHERE  rnk < 11) descending, \n      item i1, \n      item i2 \nWHERE  asceding.rnk = descending.rnk \n       AND i1.i_item_sk = asceding.item_sk \n       AND i2.i_item_sk = descending.item_sk \nORDER  BY asceding.rnk\nLIMIT 100; \n",
    "tables": [
      "ITEM",
      "STORE_SALES"
    ],
    "columns": [
      "I_ITEM_SK",
      "I_PRODUCT_NAME",
      "SS_CDEMO_SK",
      "SS_ITEM_SK",
      "SS_NET_PROFIT",
      "SS_STORE_SK"
    ],
    "question": "What are the top 10 best performing and worst performing products in terms of average net profit at store number 4, based on the store sales data?"
  },
  {
    "index": 39,
    "query": "-- start query 45 in stream 0 using template query45.tpl \nSELECT ca_zip, \n               ca_state, \n               Sum(ws_sales_price) \nFROM   web_sales, \n       customer, \n       customer_address, \n       date_dim, \n       item \nWHERE  ws_bill_customer_sk = c_customer_sk \n       AND c_current_addr_sk = ca_address_sk \n       AND ws_item_sk = i_item_sk \n       AND ( Substr(ca_zip, 1, 5) IN ( '85669', '86197', '88274', '83405', \n                                       '86475', '85392', '85460', '80348', \n                                       '81792' ) \n              OR i_item_id IN (SELECT i_item_id \n                               FROM   item \n                               WHERE  i_item_sk IN ( 2, 3, 5, 7, \n                                                     11, 13, 17, 19, \n                                                     23, 29 )) ) \n       AND ws_sold_date_sk = d_date_sk \n       AND d_qoy = 1 \n       AND d_year = 2000 \nGROUP  BY ca_zip, \n          ca_state \nORDER  BY ca_zip, \n          ca_state\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "ITEM",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "CA_ZIP",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_QOY",
      "D_YEAR",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_ITEM_SK",
      "WS_SALES_PRICE",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the total sales price of items sold in the first quarter of 2000 to customers in addresses with zip codes starting with '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', or '81792'? Also, what are the zip codes and states of these customer addresses?"
  },
  {
    "index": 40,
    "query": "-- start query 46 in stream 0 using template query46.tpl \nSELECT c_last_name, \n               c_first_name, \n               ca_city, \n               bought_city, \n               ss_ticket_number, \n               amt, \n               profit \nFROM   (SELECT ss_ticket_number, \n               ss_customer_sk, \n               ca_city            bought_city, \n               Sum(ss_coupon_amt) amt, \n               Sum(ss_net_profit) profit \n        FROM   store_sales, \n               date_dim, \n               store, \n               household_demographics, \n               customer_address \n        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk \n               AND store_sales.ss_store_sk = store.s_store_sk \n               AND store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk \n               AND store_sales.ss_addr_sk = customer_address.ca_address_sk \n               AND ( household_demographics.hd_dep_count = 6 \n                      OR household_demographics.hd_vehicle_count = 0 ) \n               AND date_dim.d_dow IN ( 6, 0 ) \n               AND date_dim.d_year IN ( 2000, 2000 + 1, 2000 + 2 ) \n               AND store.s_city IN ( 'Midway', 'Fairview', 'Fairview', \n                                     'Fairview', \n                                     'Fairview' ) \n        GROUP  BY ss_ticket_number, \n                  ss_customer_sk, \n                  ss_addr_sk, \n                  ca_city) dn, \n       customer, \n       customer_address current_addr \nWHERE  ss_customer_sk = c_customer_sk \n       AND customer.c_current_addr_sk = current_addr.ca_address_sk \n       AND current_addr.ca_city <> bought_city \nORDER  BY c_last_name, \n          c_first_name, \n          ca_city, \n          bought_city, \n          ss_ticket_number\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_CITY",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "D_DATE_SK",
      "D_DOW",
      "D_YEAR",
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "HD_VEHICLE_COUNT",
      "SS_ADDR_SK",
      "SS_COUPON_AMT",
      "SS_CUSTOMER_SK",
      "SS_HDEMO_SK",
      "SS_NET_PROFIT",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_CITY",
      "S_STORE_SK"
    ],
    "question": "Which customers have bought tickets in cities that are different from their current location? Provide their last name, first name, current city, bought city, ticket number, amount and profit."
  },
  {
    "index": 41,
    "query": "-- start query 47 in stream 0 using template query47.tpl \nWITH v1 \n     AS (SELECT i_category, \n                i_brand, \n                s_store_name, \n                s_company_name, \n                d_year, \n                d_moy, \n                Sum(ss_sales_price)         sum_sales, \n                Avg(Sum(ss_sales_price)) \n                  OVER ( \n                    partition BY i_category, i_brand, s_store_name, \n                  s_company_name, \n                  d_year) \n                                            avg_monthly_sales, \n                Rank() \n                  OVER ( \n                    partition BY i_category, i_brand, s_store_name, \n                  s_company_name \n                    ORDER BY d_year, d_moy) rn \n         FROM   item, \n                store_sales, \n                date_dim, \n                store \n         WHERE  ss_item_sk = i_item_sk \n                AND ss_sold_date_sk = d_date_sk \n                AND ss_store_sk = s_store_sk \n                AND ( d_year = 1999 \n                       OR ( d_year = 1999 - 1 \n                            AND d_moy = 12 ) \n                       OR ( d_year = 1999 + 1 \n                            AND d_moy = 1 ) ) \n         GROUP  BY i_category, \n                   i_brand, \n                   s_store_name, \n                   s_company_name, \n                   d_year, \n                   d_moy), \n     v2 \n     AS (SELECT v1.i_category, \n                v1.d_year, \n                v1.d_moy, \n                v1.avg_monthly_sales, \n                v1.sum_sales, \n                v1_lag.sum_sales  psum, \n                v1_lead.sum_sales nsum \n         FROM   v1, \n                v1 v1_lag, \n                v1 v1_lead \n         WHERE  v1.i_category = v1_lag.i_category \n                AND v1.i_category = v1_lead.i_category \n                AND v1.i_brand = v1_lag.i_brand \n                AND v1.i_brand = v1_lead.i_brand \n                AND v1.s_store_name = v1_lag.s_store_name \n                AND v1.s_store_name = v1_lead.s_store_name \n                AND v1.s_company_name = v1_lag.s_company_name \n                AND v1.s_company_name = v1_lead.s_company_name \n                AND v1.rn = v1_lag.rn + 1 \n                AND v1.rn = v1_lead.rn - 1) \nSELECT * \nFROM   v2 \nWHERE  d_year = 1999 \n       AND avg_monthly_sales > 0 \n       AND CASE \n             WHEN avg_monthly_sales > 0 THEN Abs(sum_sales - avg_monthly_sales) \n                                             \/ \n                                             avg_monthly_sales \n             ELSE NULL \n           END > 0.1 \nORDER  BY sum_sales - avg_monthly_sales, \n          3\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_BRAND",
      "I_CATEGORY",
      "I_ITEM_SK",
      "SS_ITEM_SK",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_COMPANY_NAME",
      "S_STORE_NAME",
      "S_STORE_SK"
    ],
    "question": "What are the details of the categories, brands, stores, companies, years, and months that satisfy the following conditions in the TPC-DS database:\n\n- The years in the \"date_dim\" table are 1998 and 2000.\n- The average monthly sales are greater than 0.\n- The absolute difference between the sum of sales and average monthly sales, divided by average monthly sales, is greater than 0.1.\n- The result is sorted based on the difference between sum of sales and average monthly sales, and the month.\n\nLimit the result to 100 rows."
  },
  {
    "index": 42,
    "query": "-- start query 48 in stream 0 using template query48.tpl \nSELECT Sum (ss_quantity) \nFROM   store_sales, \n       store, \n       customer_demographics, \n       customer_address, \n       date_dim \nWHERE  s_store_sk = ss_store_sk \n       AND ss_sold_date_sk = d_date_sk \n       AND d_year = 1999 \n       AND ( ( cd_demo_sk = ss_cdemo_sk \n               AND cd_marital_status = 'W' \n               AND cd_education_status = 'Secondary' \n               AND ss_sales_price BETWEEN 100.00 AND 150.00 ) \n              OR ( cd_demo_sk = ss_cdemo_sk \n                   AND cd_marital_status = 'M' \n                   AND cd_education_status = 'Advanced Degree' \n                   AND ss_sales_price BETWEEN 50.00 AND 100.00 ) \n              OR ( cd_demo_sk = ss_cdemo_sk \n                   AND cd_marital_status = 'D' \n                   AND cd_education_status = '2 yr Degree' \n                   AND ss_sales_price BETWEEN 150.00 AND 200.00 ) ) \n       AND ( ( ss_addr_sk = ca_address_sk \n               AND ca_country = 'United States' \n               AND ca_state IN ( 'TX', 'NE', 'MO' ) \n               AND ss_net_profit BETWEEN 0 AND 2000 ) \n              OR ( ss_addr_sk = ca_address_sk \n                   AND ca_country = 'United States' \n                   AND ca_state IN ( 'CO', 'TN', 'ND' ) \n                   AND ss_net_profit BETWEEN 150 AND 3000 ) \n              OR ( ss_addr_sk = ca_address_sk \n                   AND ca_country = 'United States' \n                   AND ca_state IN ( 'OK', 'PA', 'CA' ) \n                   AND ss_net_profit BETWEEN 50 AND 25000 ) ); \n",
    "tables": [
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_COUNTRY",
      "CA_STATE",
      "CD_DEMO_SK",
      "CD_EDUCATION_STATUS",
      "CD_MARITAL_STATUS",
      "D_DATE_SK",
      "D_YEAR",
      "SS_ADDR_SK",
      "SS_CDEMO_SK",
      "SS_NET_PROFIT",
      "SS_QUANTITY",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_SK"
    ],
    "question": "What is the total quantity of items sold in 1999 with specific criteria for customer demographics, sales price, and customer address?"
  },
  {
    "index": 43,
    "query": "-- start query 49 in stream 0 using template query49.tpl \nSELECT 'web' AS channel, \n               web.item, \n               web.return_ratio, \n               web.return_rank, \n               web.currency_rank \nFROM   (SELECT item, \n               return_ratio, \n               currency_ratio, \n               Rank() \n                 OVER ( \n                   ORDER BY return_ratio)   AS return_rank, \n               Rank() \n                 OVER ( \n                   ORDER BY currency_ratio) AS currency_rank \n        FROM   (SELECT ws.ws_item_sk                                       AS \n                       item, \n                       ( Cast(Sum(COALESCE(wr.wr_return_quantity, 0)) AS DEC(15, \n                              4)) \/ \n                         Cast( \n                         Sum(COALESCE(ws.ws_quantity, 0)) AS DEC(15, 4)) ) AS \n                       return_ratio, \n                       ( Cast(Sum(COALESCE(wr.wr_return_amt, 0)) AS DEC(15, 4)) \n                         \/ Cast( \n                         Sum( \n                         COALESCE(ws.ws_net_paid, 0)) AS DEC(15, \n                         4)) )                                             AS \n                       currency_ratio \n                FROM   web_sales ws \n                       LEFT OUTER JOIN web_returns wr \n                                    ON ( ws.ws_order_number = wr.wr_order_number \n                                         AND ws.ws_item_sk = wr.wr_item_sk ), \n                       date_dim \n                WHERE  wr.wr_return_amt > 10000 \n                       AND ws.ws_net_profit > 1 \n                       AND ws.ws_net_paid > 0 \n                       AND ws.ws_quantity > 0 \n                       AND ws_sold_date_sk = d_date_sk \n                       AND d_year = 1999 \n                       AND d_moy = 12 \n                GROUP  BY ws.ws_item_sk) in_web) web \nWHERE  ( web.return_rank <= 10 \n          OR web.currency_rank <= 10 ) \nUNION \nSELECT 'catalog' AS channel, \n       catalog.item, \n       catalog.return_ratio, \n       catalog.return_rank, \n       catalog.currency_rank \nFROM   (SELECT item, \n               return_ratio, \n               currency_ratio, \n               Rank() \n                 OVER ( \n                   ORDER BY return_ratio)   AS return_rank, \n               Rank() \n                 OVER ( \n                   ORDER BY currency_ratio) AS currency_rank \n        FROM   (SELECT cs.cs_item_sk                                       AS \n                       item, \n                       ( Cast(Sum(COALESCE(cr.cr_return_quantity, 0)) AS DEC(15, \n                              4)) \/ \n                         Cast( \n                         Sum(COALESCE(cs.cs_quantity, 0)) AS DEC(15, 4)) ) AS \n                       return_ratio, \n                       ( Cast(Sum(COALESCE(cr.cr_return_amount, 0)) AS DEC(15, 4 \n                              )) \/ \n                         Cast(Sum( \n                         COALESCE(cs.cs_net_paid, 0)) AS DEC( \n                         15, 4)) )                                         AS \n                       currency_ratio \n                FROM   catalog_sales cs \n                       LEFT OUTER JOIN catalog_returns cr \n                                    ON ( cs.cs_order_number = cr.cr_order_number \n                                         AND cs.cs_item_sk = cr.cr_item_sk ), \n                       date_dim \n                WHERE  cr.cr_return_amount > 10000 \n                       AND cs.cs_net_profit > 1 \n                       AND cs.cs_net_paid > 0 \n                       AND cs.cs_quantity > 0 \n                       AND cs_sold_date_sk = d_date_sk \n                       AND d_year = 1999 \n                       AND d_moy = 12 \n                GROUP  BY cs.cs_item_sk) in_cat) catalog \nWHERE  ( catalog.return_rank <= 10 \n          OR catalog.currency_rank <= 10 ) \nUNION \nSELECT 'store' AS channel, \n       store.item, \n       store.return_ratio, \n       store.return_rank, \n       store.currency_rank \nFROM   (SELECT item, \n               return_ratio, \n               currency_ratio, \n               Rank() \n                 OVER ( \n                   ORDER BY return_ratio)   AS return_rank, \n               Rank() \n                 OVER ( \n                   ORDER BY currency_ratio) AS currency_rank \n        FROM   (SELECT sts.ss_item_sk                                       AS \n                       item, \n                       ( Cast(Sum(COALESCE(sr.sr_return_quantity, 0)) AS DEC(15, \n                              4)) \/ \n                         Cast( \n                         Sum(COALESCE(sts.ss_quantity, 0)) AS DEC(15, 4)) ) AS \n                       return_ratio, \n                       ( Cast(Sum(COALESCE(sr.sr_return_amt, 0)) AS DEC(15, 4)) \n                         \/ Cast( \n                         Sum( \n                         COALESCE(sts.ss_net_paid, 0)) AS DEC(15, 4)) )     AS \n                       currency_ratio \n                FROM   store_sales sts \n                       LEFT OUTER JOIN store_returns sr \n                                    ON ( sts.ss_ticket_number = \n                                         sr.sr_ticket_number \n                                         AND sts.ss_item_sk = sr.sr_item_sk ), \n                       date_dim \n                WHERE  sr.sr_return_amt > 10000 \n                       AND sts.ss_net_profit > 1 \n                       AND sts.ss_net_paid > 0 \n                       AND sts.ss_quantity > 0 \n                       AND ss_sold_date_sk = d_date_sk \n                       AND d_year = 1999 \n                       AND d_moy = 12 \n                GROUP  BY sts.ss_item_sk) in_store) store \nWHERE  ( store.return_rank <= 10 \n          OR store.currency_rank <= 10 ) \nORDER  BY 1, \n          4, \n          5\nLIMIT 100; \n",
    "tables": [
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES",
      "WEB_RETURNS",
      "WEB_SALES"
    ],
    "columns": [
      "CR_ITEM_SK",
      "CR_ORDER_NUMBER",
      "CR_RETURN_AMOUNT",
      "CR_RETURN_QUANTITY",
      "CS_ITEM_SK",
      "CS_NET_PAID",
      "CS_NET_PROFIT",
      "CS_ORDER_NUMBER",
      "CS_QUANTITY",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "SR_ITEM_SK",
      "SR_RETURN_AMT",
      "SR_RETURN_QUANTITY",
      "SR_TICKET_NUMBER",
      "SS_ITEM_SK",
      "SS_NET_PAID",
      "SS_NET_PROFIT",
      "SS_QUANTITY",
      "SS_SOLD_DATE_SK",
      "SS_TICKET_NUMBER",
      "WR_ITEM_SK",
      "WR_ORDER_NUMBER",
      "WR_RETURN_AMT",
      "WR_RETURN_QUANTITY",
      "WS_ITEM_SK",
      "WS_NET_PAID",
      "WS_NET_PROFIT",
      "WS_ORDER_NUMBER",
      "WS_QUANTITY",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the top 100 items sold online, through catalogs, and in-store in December 1999 in terms of return ratio and currency ratio, where the return amount is greater than $10,000 and the net profit is greater than $1?"
  },
  {
    "index": 44,
    "query": "-- start query 5 in stream 0 using template query5.tpl \nWITH ssr AS \n( \n         SELECT   s_store_id, \n                  Sum(sales_price) AS sales, \n                  Sum(profit)      AS profit, \n                  Sum(return_amt)  AS returns1, \n                  Sum(net_loss)    AS profit_loss \n         FROM     ( \n                         SELECT ss_store_sk             AS store_sk, \n                                ss_sold_date_sk         AS date_sk, \n                                ss_ext_sales_price      AS sales_price, \n                                ss_net_profit           AS profit, \n                                Cast(0 AS DECIMAL(7,2)) AS return_amt, \n                                Cast(0 AS DECIMAL(7,2)) AS net_loss \n                         FROM   store_sales \n                         UNION ALL \n                         SELECT sr_store_sk             AS store_sk, \n                                sr_returned_date_sk     AS date_sk, \n                                Cast(0 AS DECIMAL(7,2)) AS sales_price, \n                                Cast(0 AS DECIMAL(7,2)) AS profit, \n                                sr_return_amt           AS return_amt, \n                                sr_net_loss             AS net_loss \n                         FROM   store_returns ) salesreturns, \n                  date_dim, \n                  store \n         WHERE    date_sk = d_date_sk \n         AND      d_date BETWEEN Cast('2002-08-22' AS DATE) AND      ( \n                           Cast('2002-08-22' AS DATE) + INTERVAL '14' day) \n         AND      store_sk = s_store_sk \n         GROUP BY s_store_id) , csr AS \n( \n         SELECT   cp_catalog_page_id, \n                  sum(sales_price) AS sales, \n                  sum(profit)      AS profit, \n                  sum(return_amt)  AS returns1, \n                  sum(net_loss)    AS profit_loss \n         FROM     ( \n                         SELECT cs_catalog_page_sk      AS page_sk, \n                                cs_sold_date_sk         AS date_sk, \n                                cs_ext_sales_price      AS sales_price, \n                                cs_net_profit           AS profit, \n                                cast(0 AS decimal(7,2)) AS return_amt, \n                                cast(0 AS decimal(7,2)) AS net_loss \n                         FROM   catalog_sales \n                         UNION ALL \n                         SELECT cr_catalog_page_sk      AS page_sk, \n                                cr_returned_date_sk     AS date_sk, \n                                cast(0 AS decimal(7,2)) AS sales_price, \n                                cast(0 AS decimal(7,2)) AS profit, \n                                cr_return_amount        AS return_amt, \n                                cr_net_loss             AS net_loss \n                         FROM   catalog_returns ) salesreturns, \n                  date_dim, \n                  catalog_page \n         WHERE    date_sk = d_date_sk \n         AND      d_date BETWEEN cast('2002-08-22' AS date) AND      ( \n                           cast('2002-08-22' AS date) + INTERVAL '14' day) \n         AND      page_sk = cp_catalog_page_sk \n         GROUP BY cp_catalog_page_id) , wsr AS \n( \n         SELECT   web_site_id, \n                  sum(sales_price) AS sales, \n                  sum(profit)      AS profit, \n                  sum(return_amt)  AS returns1, \n                  sum(net_loss)    AS profit_loss \n         FROM     ( \n                         SELECT ws_web_site_sk          AS wsr_web_site_sk, \n                                ws_sold_date_sk         AS date_sk, \n                                ws_ext_sales_price      AS sales_price, \n                                ws_net_profit           AS profit, \n                                cast(0 AS decimal(7,2)) AS return_amt, \n                                cast(0 AS decimal(7,2)) AS net_loss \n                         FROM   web_sales \n                         UNION ALL \n                         SELECT          ws_web_site_sk          AS wsr_web_site_sk, \n                                         wr_returned_date_sk     AS date_sk, \n                                         cast(0 AS decimal(7,2)) AS sales_price, \n                                         cast(0 AS decimal(7,2)) AS profit, \n                                         wr_return_amt           AS return_amt, \n                                         wr_net_loss             AS net_loss \n                         FROM            web_returns \n                         LEFT OUTER JOIN web_sales \n                         ON              ( \n                                                         wr_item_sk = ws_item_sk \n                                         AND             wr_order_number = ws_order_number) ) salesreturns,\n                  date_dim, \n                  web_site \n         WHERE    date_sk = d_date_sk \n         AND      d_date BETWEEN cast('2002-08-22' AS date) AND      ( \n                           cast('2002-08-22' AS date) + INTERVAL '14' day) \n         AND      wsr_web_site_sk = web_site_sk \n         GROUP BY web_site_id) \nSELECT \n         channel , \n         id , \n         sum(sales)   AS sales , \n         sum(returns1) AS returns1 , \n         sum(profit)  AS profit \nFROM     ( \n                SELECT 'store channel' AS channel , \n                       'store' \n                              || s_store_id AS id , \n                       sales , \n                       returns1 , \n                       (profit - profit_loss) AS profit \n                FROM   ssr \n                UNION ALL \n                SELECT 'catalog channel' AS channel , \n                       'catalog_page' \n                              || cp_catalog_page_id AS id , \n                       sales , \n                       returns1 , \n                       (profit - profit_loss) AS profit \n                FROM   csr \n                UNION ALL \n                SELECT 'web channel' AS channel , \n                       'web_site' \n                              || web_site_id AS id , \n                       sales , \n                       returns1 , \n                       (profit - profit_loss) AS profit \n                FROM   wsr ) x \nGROUP BY rollup (channel, id) \nORDER BY channel , \n         id \nLIMIT 100; \n\n",
    "tables": [
      "CATALOG_PAGE",
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "DATE_DIM",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES",
      "WEB_RETURNS",
      "WEB_SALES",
      "WEB_SITE"
    ],
    "columns": [
      "CP_CATALOG_PAGE_ID",
      "CP_CATALOG_PAGE_SK",
      "CR_CATALOG_PAGE_SK",
      "CR_NET_LOSS",
      "CR_RETURNED_DATE_SK",
      "CR_RETURN_AMOUNT",
      "CS_CATALOG_PAGE_SK",
      "CS_EXT_SALES_PRICE",
      "CS_NET_PROFIT",
      "CS_SOLD_DATE_SK",
      "D_DATE",
      "D_DATE_SK",
      "SR_NET_LOSS",
      "SR_RETURNED_DATE_SK",
      "SR_RETURN_AMT",
      "SR_STORE_SK",
      "SS_EXT_SALES_PRICE",
      "SS_NET_PROFIT",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_ID",
      "S_STORE_SK",
      "WEB_SITE_ID",
      "WEB_SITE_SK",
      "WR_ITEM_SK",
      "WR_NET_LOSS",
      "WR_ORDER_NUMBER",
      "WR_RETURNED_DATE_SK",
      "WR_RETURN_AMT",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_NET_PROFIT",
      "WS_ORDER_NUMBER",
      "WS_SOLD_DATE_SK",
      "WS_WEB_SITE_SK"
    ],
    "question": "What is the total sales, returns, and profit for each channel (store, catalog, web) and each channel's respective ID (store ID, catalog page ID, web site ID) for the period of August 22, 2002, to September 5, 2002?"
  },
  {
    "index": 45,
    "query": "-- start query 50 in stream 0 using template query50.tpl \nSELECT s_store_name, \n               s_company_id, \n               s_street_number, \n               s_street_name, \n               s_street_type, \n               s_suite_number, \n               s_city, \n               s_county, \n               s_state, \n               s_zip, \n               Sum(CASE \n                     WHEN ( sr_returned_date_sk - ss_sold_date_sk <= 30 ) THEN 1 \n                     ELSE 0 \n                   END) AS `30 days`, \n               Sum(CASE \n                     WHEN ( sr_returned_date_sk - ss_sold_date_sk > 30 ) \n                          AND ( sr_returned_date_sk - ss_sold_date_sk <= 60 ) \n                   THEN 1 \n                     ELSE 0 \n                   END) AS `31-60 days`, \n               Sum(CASE \n                     WHEN ( sr_returned_date_sk - ss_sold_date_sk > 60 ) \n                          AND ( sr_returned_date_sk - ss_sold_date_sk <= 90 ) \n                   THEN 1 \n                     ELSE 0 \n                   END) AS `61-90 days`, \n               Sum(CASE \n                     WHEN ( sr_returned_date_sk - ss_sold_date_sk > 90 ) \n                          AND ( sr_returned_date_sk - ss_sold_date_sk <= 120 ) \n                   THEN 1 \n                     ELSE 0 \n                   END) AS `91-120 days`, \n               Sum(CASE \n                     WHEN ( sr_returned_date_sk - ss_sold_date_sk > 120 ) THEN 1 \n                     ELSE 0 \n                   END) AS `>120 days` \nFROM   store_sales, \n       store_returns, \n       store, \n       date_dim d1, \n       date_dim d2 \nWHERE  d2.d_year = 2002 \n       AND d2.d_moy = 9 \n       AND ss_ticket_number = sr_ticket_number \n       AND ss_item_sk = sr_item_sk \n       AND ss_sold_date_sk = d1.d_date_sk \n       AND sr_returned_date_sk = d2.d_date_sk \n       AND ss_customer_sk = sr_customer_sk \n       AND ss_store_sk = s_store_sk \nGROUP  BY s_store_name, \n          s_company_id, \n          s_street_number, \n          s_street_name, \n          s_street_type, \n          s_suite_number, \n          s_city, \n          s_county, \n          s_state, \n          s_zip \nORDER  BY s_store_name, \n          s_company_id, \n          s_street_number, \n          s_street_name, \n          s_street_type, \n          s_suite_number, \n          s_city, \n          s_county, \n          s_state, \n          s_zip\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "SR_CUSTOMER_SK",
      "SR_ITEM_SK",
      "SR_RETURNED_DATE_SK",
      "SR_TICKET_NUMBER",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_CITY",
      "S_COMPANY_ID",
      "S_COUNTY",
      "S_STATE",
      "S_STORE_NAME",
      "S_STORE_SK",
      "S_STREET_NAME",
      "S_STREET_NUMBER",
      "S_STREET_TYPE",
      "S_SUITE_NUMBER",
      "S_ZIP"
    ],
    "question": "What is the count of returned items for each store, broken down by the number of days between the sale and return, for the year 2002 and month September?"
  },
  {
    "index": 46,
    "query": "-- start query 51 in stream 0 using template query51.tpl \nWITH web_v1 AS \n( \n         SELECT   ws_item_sk item_sk, \n                  d_date, \n                  sum(Sum(ws_sales_price)) OVER (partition BY ws_item_sk ORDER BY d_date rows BETWEEN UNBOUNDED PRECEDING AND      CURRENT row) cume_sales\n         FROM     web_sales , \n                  date_dim \n         WHERE    ws_sold_date_sk=d_date_sk \n         AND      d_month_seq BETWEEN 1192 AND      1192+11 \n         AND      ws_item_sk IS NOT NULL \n         GROUP BY ws_item_sk, \n                  d_date), store_v1 AS \n( \n         SELECT   ss_item_sk item_sk, \n                  d_date, \n                  sum(sum(ss_sales_price)) OVER (partition BY ss_item_sk ORDER BY d_date rows BETWEEN UNBOUNDED PRECEDING AND      CURRENT row) cume_sales\n         FROM     store_sales , \n                  date_dim \n         WHERE    ss_sold_date_sk=d_date_sk \n         AND      d_month_seq BETWEEN 1192 AND      1192+11 \n         AND      ss_item_sk IS NOT NULL \n         GROUP BY ss_item_sk, \n                  d_date) \nSELECT \n         * \nFROM     ( \n                  SELECT   item_sk , \n                           d_date , \n                           web_sales , \n                           store_sales , \n                           max(web_sales) OVER (partition BY item_sk ORDER BY d_date rows BETWEEN UNBOUNDED PRECEDING AND      CURRENT row)   web_cumulative ,\n                           max(store_sales) OVER (partition BY item_sk ORDER BY d_date rows BETWEEN UNBOUNDED PRECEDING AND      CURRENT row) store_cumulative\n                  FROM     ( \n                                           SELECT \n                                                           CASE \n                                                                           WHEN web.item_sk IS NOT NULL THEN web.item_sk\n                                                                           ELSE store.item_sk \n                                                           END item_sk , \n                                                           CASE \n                                                                           WHEN web.d_date IS NOT NULL THEN web.d_date\n                                                                           ELSE store.d_date \n                                                           END              d_date , \n                                                           web.cume_sales   web_sales , \n                                                           store.cume_sales store_sales \n                                           FROM            web_v1 web \n                                           FULL OUTER JOIN store_v1 store \n                                           ON              ( \n                                                                           web.item_sk = store.item_sk\n                                                           AND             web.d_date = store.d_date) )x )y\nWHERE    web_cumulative > store_cumulative \nORDER BY item_sk , \n         d_date \nLIMIT 100; \n\n",
    "tables": [
      "DATE_DIM",
      "STORE",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "D_DATE",
      "D_MONTH_SEQ",
      "SS_ITEM_SK",
      "SS_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_SALES_PRICE"
    ],
    "question": "What are the item_sk, d_date, web_sales, store_sales, web_cumulative, and store_cumulative for the top 100 rows where the web_cumulative is greater than the store_cumulative when running this query?"
  },
  {
    "index": 47,
    "query": "-- start query 52 in stream 0 using template query52.tpl \nSELECT dt.d_year, \n               item.i_brand_id         brand_id, \n               item.i_brand            brand, \n               Sum(ss_ext_sales_price) ext_price \nFROM   date_dim dt, \n       store_sales, \n       item \nWHERE  dt.d_date_sk = store_sales.ss_sold_date_sk \n       AND store_sales.ss_item_sk = item.i_item_sk \n       AND item.i_manager_id = 1 \n       AND dt.d_moy = 11 \n       AND dt.d_year = 1999 \nGROUP  BY dt.d_year, \n          item.i_brand, \n          item.i_brand_id \nORDER  BY dt.d_year, \n          ext_price DESC, \n          brand_id\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_BRAND",
      "I_BRAND_ID",
      "I_ITEM_SK",
      "I_MANAGER_ID",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK"
    ],
    "question": "What is the total sales for each brand in November 1999, for the items managed by manager with ID 1?"
  },
  {
    "index": 48,
    "query": "-- start query 53 in stream 0 using template query53.tpl \nSELECT * \nFROM   (SELECT i_manufact_id, \n               Sum(ss_sales_price)             sum_sales, \n               Avg(Sum(ss_sales_price)) \n                 OVER ( \n                   partition BY i_manufact_id) avg_quarterly_sales \n        FROM   item, \n               store_sales, \n               date_dim, \n               store \n        WHERE  ss_item_sk = i_item_sk \n               AND ss_sold_date_sk = d_date_sk \n               AND ss_store_sk = s_store_sk \n               AND d_month_seq IN ( 1199, 1199 + 1, 1199 + 2, 1199 + 3, \n                                    1199 + 4, 1199 + 5, 1199 + 6, 1199 + 7, \n                                    1199 + 8, 1199 + 9, 1199 + 10, 1199 + 11 ) \n               AND ( ( i_category IN ( 'Books', 'Children', 'Electronics' ) \n                       AND i_class IN ( 'personal', 'portable', 'reference', \n                                        'self-help' ) \n                       AND i_brand IN ( 'scholaramalgamalg #14', \n                                        'scholaramalgamalg #7' \n                                        , \n                                        'exportiunivamalg #9', \n                                                       'scholaramalgamalg #9' ) \n                     ) \n                      OR ( i_category IN ( 'Women', 'Music', 'Men' ) \n                           AND i_class IN ( 'accessories', 'classical', \n                                            'fragrances', \n                                            'pants' ) \n                           AND i_brand IN ( 'amalgimporto #1', \n                                            'edu packscholar #1', \n                                            'exportiimporto #1', \n                                                'importoamalg #1' ) ) ) \n        GROUP  BY i_manufact_id, \n                  d_qoy) tmp1 \nWHERE  CASE \n         WHEN avg_quarterly_sales > 0 THEN Abs (sum_sales - avg_quarterly_sales) \n                                           \/ \n                                           avg_quarterly_sales \n         ELSE NULL \n       END > 0.1 \nORDER  BY avg_quarterly_sales, \n          sum_sales, \n          i_manufact_id\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "D_QOY",
      "I_BRAND",
      "I_CATEGORY",
      "I_CLASS",
      "I_ITEM_SK",
      "I_MANUFACT_ID",
      "SS_ITEM_SK",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_SK"
    ],
    "question": "What is the average quarterly sales and total sales for each manufacturer of items in the categories 'Books', 'Children', 'Electronics', and 'Women', 'Music', 'Men' with specific classes and brands? Also, could you provide the top 100 manufacturers whose quarterly sales deviate more than 10% from the average quarterly sales?"
  },
  {
    "index": 49,
    "query": "-- start query 54 in stream 0 using template query54.tpl \nWITH my_customers \n     AS (SELECT DISTINCT c_customer_sk, \n                         c_current_addr_sk \n         FROM   (SELECT cs_sold_date_sk     sold_date_sk, \n                        cs_bill_customer_sk customer_sk, \n                        cs_item_sk          item_sk \n                 FROM   catalog_sales \n                 UNION ALL \n                 SELECT ws_sold_date_sk     sold_date_sk, \n                        ws_bill_customer_sk customer_sk, \n                        ws_item_sk          item_sk \n                 FROM   web_sales) cs_or_ws_sales, \n                item, \n                date_dim, \n                customer \n         WHERE  sold_date_sk = d_date_sk \n                AND item_sk = i_item_sk \n                AND i_category = 'Sports' \n                AND i_class = 'fitness' \n                AND c_customer_sk = cs_or_ws_sales.customer_sk \n                AND d_moy = 5 \n                AND d_year = 2000), \n     my_revenue \n     AS (SELECT c_customer_sk, \n                Sum(ss_ext_sales_price) AS revenue \n         FROM   my_customers, \n                store_sales, \n                customer_address, \n                store, \n                date_dim \n         WHERE  c_current_addr_sk = ca_address_sk \n                AND ca_county = s_county \n                AND ca_state = s_state \n                AND ss_sold_date_sk = d_date_sk \n                AND c_customer_sk = ss_customer_sk \n                AND d_month_seq BETWEEN (SELECT DISTINCT d_month_seq + 1 \n                                         FROM   date_dim \n                                         WHERE  d_year = 2000 \n                                                AND d_moy = 5) AND \n                                        (SELECT DISTINCT \n                                        d_month_seq + 3 \n                                         FROM   date_dim \n                                         WHERE  d_year = 2000 \n                                                AND d_moy = 5) \n         GROUP  BY c_customer_sk), \n     segments \n     AS (SELECT Cast(( revenue \/ 50 ) AS INT) AS segment \n         FROM   my_revenue) \nSELECT segment, \n               Count(*)     AS num_customers, \n               segment * 50 AS segment_base \nFROM   segments \nGROUP  BY segment \nORDER  BY segment, \n          num_customers\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_COUNTY",
      "CA_STATE",
      "CS_BILL_CUSTOMER_SK",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "D_MOY",
      "D_YEAR",
      "I_CATEGORY",
      "I_CLASS",
      "I_ITEM_SK",
      "SS_CUSTOMER_SK",
      "SS_EXT_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "S_COUNTY",
      "S_STATE",
      "WS_BILL_CUSTOMER_SK",
      "WS_ITEM_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the number of customers in each revenue segment for the sports and fitness category in May 2000?"
  },
  {
    "index": 50,
    "query": "-- start query 55 in stream 0 using template query55.tpl \nSELECT i_brand_id              brand_id, \n               i_brand                 brand, \n               Sum(ss_ext_sales_price) ext_price \nFROM   date_dim, \n       store_sales, \n       item \nWHERE  d_date_sk = ss_sold_date_sk \n       AND ss_item_sk = i_item_sk \n       AND i_manager_id = 33 \n       AND d_moy = 12 \n       AND d_year = 1998 \nGROUP  BY i_brand, \n          i_brand_id \nORDER  BY ext_price DESC, \n          i_brand_id\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_BRAND",
      "I_BRAND_ID",
      "I_ITEM_SK",
      "I_MANAGER_ID",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK"
    ],
    "question": "What are the top 100 brands (sorted by total sales price) managed by the manager with ID 33 in December 1998?"
  },
  {
    "index": 51,
    "query": "-- start query 56 in stream 0 using template query56.tpl \nWITH ss \n     AS (SELECT i_item_id, \n                Sum(ss_ext_sales_price) total_sales \n         FROM   store_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_item_id IN (SELECT i_item_id \n                              FROM   item \n                              WHERE  i_color IN ( 'firebrick', 'rosy', 'white' ) \n                             ) \n                AND ss_item_sk = i_item_sk \n                AND ss_sold_date_sk = d_date_sk \n                AND d_year = 1998 \n                AND d_moy = 3 \n                AND ss_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -6 \n         GROUP  BY i_item_id), \n     cs \n     AS (SELECT i_item_id, \n                Sum(cs_ext_sales_price) total_sales \n         FROM   catalog_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_item_id IN (SELECT i_item_id \n                              FROM   item \n                              WHERE  i_color IN ( 'firebrick', 'rosy', 'white' ) \n                             ) \n                AND cs_item_sk = i_item_sk \n                AND cs_sold_date_sk = d_date_sk \n                AND d_year = 1998 \n                AND d_moy = 3 \n                AND cs_bill_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -6 \n         GROUP  BY i_item_id), \n     ws \n     AS (SELECT i_item_id, \n                Sum(ws_ext_sales_price) total_sales \n         FROM   web_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_item_id IN (SELECT i_item_id \n                              FROM   item \n                              WHERE  i_color IN ( 'firebrick', 'rosy', 'white' ) \n                             ) \n                AND ws_item_sk = i_item_sk \n                AND ws_sold_date_sk = d_date_sk \n                AND d_year = 1998 \n                AND d_moy = 3 \n                AND ws_bill_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -6 \n         GROUP  BY i_item_id) \nSELECT i_item_id, \n               Sum(total_sales) total_sales \nFROM   (SELECT * \n        FROM   ss \n        UNION ALL \n        SELECT * \n        FROM   cs \n        UNION ALL \n        SELECT * \n        FROM   ws) tmp1 \nGROUP  BY i_item_id \nORDER  BY total_sales\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_GMT_OFFSET",
      "CS_BILL_ADDR_SK",
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_COLOR",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SS_ADDR_SK",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK",
      "WS_BILL_ADDR_SK",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the top 100 items, ranked by total sales, that have been sold in the colors firebrick, rosy, and white in the month of March 1998 for customers in a time zone with a GMT offset of -6?"
  },
  {
    "index": 52,
    "query": "-- start query 57 in stream 0 using template query57.tpl \nWITH v1 \n     AS (SELECT i_category, \n                i_brand, \n                cc_name, \n                d_year, \n                d_moy, \n                Sum(cs_sales_price)                                    sum_sales \n                , \n                Avg(Sum(cs_sales_price)) \n                  OVER ( \n                    partition BY i_category, i_brand, cc_name, d_year) \n                avg_monthly_sales \n                   , \n                Rank() \n                  OVER ( \n                    partition BY i_category, i_brand, cc_name \n                    ORDER BY d_year, d_moy)                            rn \n         FROM   item, \n                catalog_sales, \n                date_dim, \n                call_center \n         WHERE  cs_item_sk = i_item_sk \n                AND cs_sold_date_sk = d_date_sk \n                AND cc_call_center_sk = cs_call_center_sk \n                AND ( d_year = 2000 \n                       OR ( d_year = 2000 - 1 \n                            AND d_moy = 12 ) \n                       OR ( d_year = 2000 + 1 \n                            AND d_moy = 1 ) ) \n         GROUP  BY i_category, \n                   i_brand, \n                   cc_name, \n                   d_year, \n                   d_moy), \n     v2 \n     AS (SELECT v1.i_brand, \n                v1.d_year, \n                v1.avg_monthly_sales, \n                v1.sum_sales, \n                v1_lag.sum_sales  psum, \n                v1_lead.sum_sales nsum \n         FROM   v1, \n                v1 v1_lag, \n                v1 v1_lead \n         WHERE  v1.i_category = v1_lag.i_category \n                AND v1.i_category = v1_lead.i_category \n                AND v1.i_brand = v1_lag.i_brand \n                AND v1.i_brand = v1_lead.i_brand \n                AND v1. cc_name = v1_lag. cc_name \n                AND v1. cc_name = v1_lead. cc_name \n                AND v1.rn = v1_lag.rn + 1 \n                AND v1.rn = v1_lead.rn - 1) \nSELECT * \nFROM   v2 \nWHERE  d_year = 2000 \n       AND avg_monthly_sales > 0 \n       AND CASE \n             WHEN avg_monthly_sales > 0 THEN Abs(sum_sales - avg_monthly_sales) \n                                             \/ \n                                             avg_monthly_sales \n             ELSE NULL \n           END > 0.1 \nORDER  BY sum_sales - avg_monthly_sales, \n          3\nLIMIT 100; \n",
    "tables": [
      "CALL_CENTER",
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM"
    ],
    "columns": [
      "CC_CALL_CENTER_SK",
      "CC_NAME",
      "CS_CALL_CENTER_SK",
      "CS_ITEM_SK",
      "CS_SALES_PRICE",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_BRAND",
      "I_CATEGORY",
      "I_ITEM_SK"
    ],
    "question": "What are the brands with the largest difference between actual sales and average monthly sales in the year 2000, considering a threshold of 10%?"
  },
  {
    "index": 53,
    "query": "-- start query 58 in stream 0 using template query58.tpl \nWITH ss_items \n     AS (SELECT i_item_id               item_id, \n                Sum(ss_ext_sales_price) ss_item_rev \n         FROM   store_sales, \n                item, \n                date_dim \n         WHERE  ss_item_sk = i_item_sk \n                AND d_date IN (SELECT d_date \n                               FROM   date_dim \n                               WHERE  d_week_seq = (SELECT d_week_seq \n                                                    FROM   date_dim \n                                                    WHERE  d_date = '2002-02-25' \n                                                   )) \n                AND ss_sold_date_sk = d_date_sk \n         GROUP  BY i_item_id), \n     cs_items \n     AS (SELECT i_item_id               item_id, \n                Sum(cs_ext_sales_price) cs_item_rev \n         FROM   catalog_sales, \n                item, \n                date_dim \n         WHERE  cs_item_sk = i_item_sk \n                AND d_date IN (SELECT d_date \n                               FROM   date_dim \n                               WHERE  d_week_seq = (SELECT d_week_seq \n                                                    FROM   date_dim \n                                                    WHERE  d_date = '2002-02-25' \n                                                   )) \n                AND cs_sold_date_sk = d_date_sk \n         GROUP  BY i_item_id), \n     ws_items \n     AS (SELECT i_item_id               item_id, \n                Sum(ws_ext_sales_price) ws_item_rev \n         FROM   web_sales, \n                item, \n                date_dim \n         WHERE  ws_item_sk = i_item_sk \n                AND d_date IN (SELECT d_date \n                               FROM   date_dim \n                               WHERE  d_week_seq = (SELECT d_week_seq \n                                                    FROM   date_dim \n                                                    WHERE  d_date = '2002-02-25' \n                                                   )) \n                AND ws_sold_date_sk = d_date_sk \n         GROUP  BY i_item_id) \nSELECT ss_items.item_id, \n               ss_item_rev, \n               ss_item_rev \/ ( ss_item_rev + cs_item_rev + ws_item_rev ) \/ 3 * \n               100 ss_dev, \n               cs_item_rev, \n               cs_item_rev \/ ( ss_item_rev + cs_item_rev + ws_item_rev ) \/ 3 * \n               100 cs_dev, \n               ws_item_rev, \n               ws_item_rev \/ ( ss_item_rev + cs_item_rev + ws_item_rev ) \/ 3 * \n               100 ws_dev, \n               ( ss_item_rev + cs_item_rev + ws_item_rev ) \/ 3 \n               average \nFROM   ss_items, \n       cs_items, \n       ws_items \nWHERE  ss_items.item_id = cs_items.item_id \n       AND ss_items.item_id = ws_items.item_id \n       AND ss_item_rev BETWEEN 0.9 * cs_item_rev AND 1.1 * cs_item_rev \n       AND ss_item_rev BETWEEN 0.9 * ws_item_rev AND 1.1 * ws_item_rev \n       AND cs_item_rev BETWEEN 0.9 * ss_item_rev AND 1.1 * ss_item_rev \n       AND cs_item_rev BETWEEN 0.9 * ws_item_rev AND 1.1 * ws_item_rev \n       AND ws_item_rev BETWEEN 0.9 * ss_item_rev AND 1.1 * ss_item_rev \n       AND ws_item_rev BETWEEN 0.9 * cs_item_rev AND 1.1 * cs_item_rev \nORDER  BY item_id, \n          ss_item_rev\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE",
      "D_DATE_SK",
      "D_WEEK_SEQ",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the item IDs, sales revenues, deviation percentages, and average sales revenues for the top 100 items in the store, catalog, and web sales on the week of February 25, 2002?"
  },
  {
    "index": 54,
    "query": "-- start query 59 in stream 0 using template query59.tpl \nWITH wss \n     AS (SELECT d_week_seq, \n                ss_store_sk, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Sunday' ) THEN ss_sales_price \n                      ELSE NULL \n                    END) sun_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Monday' ) THEN ss_sales_price \n                      ELSE NULL \n                    END) mon_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Tuesday' ) THEN ss_sales_price \n                      ELSE NULL \n                    END) tue_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Wednesday' ) THEN ss_sales_price \n                      ELSE NULL \n                    END) wed_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Thursday' ) THEN ss_sales_price \n                      ELSE NULL \n                    END) thu_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Friday' ) THEN ss_sales_price \n                      ELSE NULL \n                    END) fri_sales, \n                Sum(CASE \n                      WHEN ( d_day_name = 'Saturday' ) THEN ss_sales_price \n                      ELSE NULL \n                    END) sat_sales \n         FROM   store_sales, \n                date_dim \n         WHERE  d_date_sk = ss_sold_date_sk \n         GROUP  BY d_week_seq, \n                   ss_store_sk) \nSELECT s_store_name1, \n               s_store_id1, \n               d_week_seq1, \n               sun_sales1 \/ sun_sales2, \n               mon_sales1 \/ mon_sales2, \n               tue_sales1 \/ tue_sales2, \n               wed_sales1 \/ wed_sales2, \n               thu_sales1 \/ thu_sales2, \n               fri_sales1 \/ fri_sales2, \n               sat_sales1 \/ sat_sales2 \nFROM   (SELECT s_store_name   s_store_name1, \n               wss.d_week_seq d_week_seq1, \n               s_store_id     s_store_id1, \n               sun_sales      sun_sales1, \n               mon_sales      mon_sales1, \n               tue_sales      tue_sales1, \n               wed_sales      wed_sales1, \n               thu_sales      thu_sales1, \n               fri_sales      fri_sales1, \n               sat_sales      sat_sales1 \n        FROM   wss, \n               store, \n               date_dim d \n        WHERE  d.d_week_seq = wss.d_week_seq \n               AND ss_store_sk = s_store_sk \n               AND d_month_seq BETWEEN 1196 AND 1196 + 11) y, \n       (SELECT s_store_name   s_store_name2, \n               wss.d_week_seq d_week_seq2, \n               s_store_id     s_store_id2, \n               sun_sales      sun_sales2, \n               mon_sales      mon_sales2, \n               tue_sales      tue_sales2, \n               wed_sales      wed_sales2, \n               thu_sales      thu_sales2, \n               fri_sales      fri_sales2, \n               sat_sales      sat_sales2 \n        FROM   wss, \n               store, \n               date_dim d \n        WHERE  d.d_week_seq = wss.d_week_seq \n               AND ss_store_sk = s_store_sk \n               AND d_month_seq BETWEEN 1196 + 12 AND 1196 + 23) x \nWHERE  s_store_id1 = s_store_id2 \n       AND d_week_seq1 = d_week_seq2 - 52 \nORDER  BY s_store_name1, \n          s_store_id1, \n          d_week_seq1\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_DAY_NAME",
      "D_MONTH_SEQ",
      "D_WEEK_SEQ",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_ID",
      "S_STORE_NAME",
      "S_STORE_SK"
    ],
    "question": "What is the percentage change in sales for each day of the week for each store compared to the same week in the previous year?"
  },
  {
    "index": 55,
    "query": "-- start query 6 in stream 0 using template query6.tpl \nSELECT a.ca_state state, \n               Count(*)   cnt \nFROM   customer_address a, \n       customer c, \n       store_sales s, \n       date_dim d, \n       item i \nWHERE  a.ca_address_sk = c.c_current_addr_sk \n       AND c.c_customer_sk = s.ss_customer_sk \n       AND s.ss_sold_date_sk = d.d_date_sk \n       AND s.ss_item_sk = i.i_item_sk \n       AND d.d_month_seq = (SELECT DISTINCT ( d_month_seq ) \n                            FROM   date_dim \n                            WHERE  d_year = 1998 \n                                   AND d_moy = 7) \n       AND i.i_current_price > 1.2 * (SELECT Avg(j.i_current_price) \n                                      FROM   item j \n                                      WHERE  j.i_category = i.i_category) \nGROUP  BY a.ca_state \nHAVING Count(*) >= 10 \nORDER  BY cnt\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "D_MOY",
      "D_YEAR",
      "I_CATEGORY",
      "I_CURRENT_PRICE",
      "I_ITEM_SK",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK"
    ],
    "question": "What is the count of customers who purchased items with a current price greater than 1.2 times the average current price of items in the same category, grouped by the state of the customer's current address, for the month of July 1998, and where the count of customers is at least 10, sorted by the count in ascending order and limited to the top 100 results?"
  },
  {
    "index": 56,
    "query": "-- start query 60 in stream 0 using template query60.tpl \nWITH ss \n     AS (SELECT i_item_id, \n                Sum(ss_ext_sales_price) total_sales \n         FROM   store_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_item_id IN (SELECT i_item_id \n                              FROM   item \n                              WHERE  i_category IN ( 'Jewelry' )) \n                AND ss_item_sk = i_item_sk \n                AND ss_sold_date_sk = d_date_sk \n                AND d_year = 1999 \n                AND d_moy = 8 \n                AND ss_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -6 \n         GROUP  BY i_item_id), \n     cs \n     AS (SELECT i_item_id, \n                Sum(cs_ext_sales_price) total_sales \n         FROM   catalog_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_item_id IN (SELECT i_item_id \n                              FROM   item \n                              WHERE  i_category IN ( 'Jewelry' )) \n                AND cs_item_sk = i_item_sk \n                AND cs_sold_date_sk = d_date_sk \n                AND d_year = 1999 \n                AND d_moy = 8 \n                AND cs_bill_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -6 \n         GROUP  BY i_item_id), \n     ws \n     AS (SELECT i_item_id, \n                Sum(ws_ext_sales_price) total_sales \n         FROM   web_sales, \n                date_dim, \n                customer_address, \n                item \n         WHERE  i_item_id IN (SELECT i_item_id \n                              FROM   item \n                              WHERE  i_category IN ( 'Jewelry' )) \n                AND ws_item_sk = i_item_sk \n                AND ws_sold_date_sk = d_date_sk \n                AND d_year = 1999 \n                AND d_moy = 8 \n                AND ws_bill_addr_sk = ca_address_sk \n                AND ca_gmt_offset = -6 \n         GROUP  BY i_item_id) \nSELECT i_item_id, \n               Sum(total_sales) total_sales \nFROM   (SELECT * \n        FROM   ss \n        UNION ALL \n        SELECT * \n        FROM   cs \n        UNION ALL \n        SELECT * \n        FROM   ws) tmp1 \nGROUP  BY i_item_id \nORDER  BY i_item_id, \n          total_sales\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_GMT_OFFSET",
      "CS_BILL_ADDR_SK",
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_CATEGORY",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SS_ADDR_SK",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK",
      "WS_BILL_ADDR_SK",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the total sales for each jewelry item in the month of August 1999 for store sales, catalog sales, and web sales?"
  },
  {
    "index": 57,
    "query": "-- start query 61 in stream 0 using template query61.tpl \nSELECT promotions, \n               total, \n               Cast(promotions AS DECIMAL(15, 4)) \/ \n               Cast(total AS DECIMAL(15, 4)) * 100 \nFROM   (SELECT Sum(ss_ext_sales_price) promotions \n        FROM   store_sales, \n               store, \n               promotion, \n               date_dim, \n               customer, \n               customer_address, \n               item \n        WHERE  ss_sold_date_sk = d_date_sk \n               AND ss_store_sk = s_store_sk \n               AND ss_promo_sk = p_promo_sk \n               AND ss_customer_sk = c_customer_sk \n               AND ca_address_sk = c_current_addr_sk \n               AND ss_item_sk = i_item_sk \n               AND ca_gmt_offset = -7 \n               AND i_category = 'Books' \n               AND ( p_channel_dmail = 'Y' \n                      OR p_channel_email = 'Y' \n                      OR p_channel_tv = 'Y' ) \n               AND s_gmt_offset = -7 \n               AND d_year = 2001 \n               AND d_moy = 12) promotional_sales, \n       (SELECT Sum(ss_ext_sales_price) total \n        FROM   store_sales, \n               store, \n               date_dim, \n               customer, \n               customer_address, \n               item \n        WHERE  ss_sold_date_sk = d_date_sk \n               AND ss_store_sk = s_store_sk \n               AND ss_customer_sk = c_customer_sk \n               AND ca_address_sk = c_current_addr_sk \n               AND ss_item_sk = i_item_sk \n               AND ca_gmt_offset = -7 \n               AND i_category = 'Books' \n               AND s_gmt_offset = -7 \n               AND d_year = 2001 \n               AND d_moy = 12) all_sales \nORDER  BY promotions, \n          total\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "ITEM",
      "PROMOTION",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_GMT_OFFSET",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_CATEGORY",
      "I_ITEM_SK",
      "P_CHANNEL_DMAIL",
      "P_CHANNEL_EMAIL",
      "P_CHANNEL_TV",
      "P_PROMO_SK",
      "SS_CUSTOMER_SK",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_PROMO_SK",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_GMT_OFFSET",
      "S_STORE_SK"
    ],
    "question": "What is the percentage of promotional sales out of total sales for books in December 2001, for customers who can be reached through direct mail, email, or TV, in stores located in the pacific time zone, with a current address in the pacific time zone, with a GMT offset of -7, for the top 100 items ranked by total sales?"
  },
  {
    "index": 58,
    "query": "-- start query 62 in stream 0 using template query62.tpl \nSELECT Substr(w_warehouse_name, 1, 20), \n               sm_type, \n               web_name, \n               Sum(CASE \n                     WHEN ( ws_ship_date_sk - ws_sold_date_sk <= 30 ) THEN 1 \n                     ELSE 0 \n                   END) AS `30 days`, \n               Sum(CASE \n                     WHEN ( ws_ship_date_sk - ws_sold_date_sk > 30 ) \n                          AND ( ws_ship_date_sk - ws_sold_date_sk <= 60 ) THEN 1 \n                     ELSE 0 \n                   END) AS `31-60 days`, \n               Sum(CASE \n                     WHEN ( ws_ship_date_sk - ws_sold_date_sk > 60 ) \n                          AND ( ws_ship_date_sk - ws_sold_date_sk <= 90 ) THEN 1 \n                     ELSE 0 \n                   END) AS `61-90 days`, \n               Sum(CASE \n                     WHEN ( ws_ship_date_sk - ws_sold_date_sk > 90 ) \n                          AND ( ws_ship_date_sk - ws_sold_date_sk <= 120 ) THEN \n                     1 \n                     ELSE 0 \n                   END) AS `91-120 days`, \n               Sum(CASE \n                     WHEN ( ws_ship_date_sk - ws_sold_date_sk > 120 ) THEN 1 \n                     ELSE 0 \n                   END) AS `>120 days` \nFROM   web_sales, \n       warehouse, \n       ship_mode, \n       web_site, \n       date_dim \nWHERE  d_month_seq BETWEEN 1222 AND 1222 + 11 \n       AND ws_ship_date_sk = d_date_sk \n       AND ws_warehouse_sk = w_warehouse_sk \n       AND ws_ship_mode_sk = sm_ship_mode_sk \n       AND ws_web_site_sk = web_site_sk \nGROUP  BY Substr(w_warehouse_name, 1, 20), \n          sm_type, \n          web_name \nORDER  BY Substr(w_warehouse_name, 1, 20), \n          sm_type, \n          web_name\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "SHIP_MODE",
      "WAREHOUSE",
      "WEB_SALES",
      "WEB_SITE"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "SM_SHIP_MODE_SK",
      "SM_TYPE",
      "WEB_NAME",
      "WEB_SITE_SK",
      "WS_SHIP_DATE_SK",
      "WS_SHIP_MODE_SK",
      "WS_SOLD_DATE_SK",
      "WS_WAREHOUSE_SK",
      "WS_WEB_SITE_SK",
      "W_WAREHOUSE_NAME",
      "W_WAREHOUSE_SK"
    ],
    "question": "What is the count of web sales for each warehouse, ship mode, and web site for each time period in the query result?"
  },
  {
    "index": 59,
    "query": "-- start query 63 in stream 0 using template query63.tpl \nSELECT * \nFROM   (SELECT i_manager_id, \n               Sum(ss_sales_price)            sum_sales, \n               Avg(Sum(ss_sales_price)) \n                 OVER ( \n                   partition BY i_manager_id) avg_monthly_sales \n        FROM   item, \n               store_sales, \n               date_dim, \n               store \n        WHERE  ss_item_sk = i_item_sk \n               AND ss_sold_date_sk = d_date_sk \n               AND ss_store_sk = s_store_sk \n               AND d_month_seq IN ( 1200, 1200 + 1, 1200 + 2, 1200 + 3, \n                                    1200 + 4, 1200 + 5, 1200 + 6, 1200 + 7, \n                                    1200 + 8, 1200 + 9, 1200 + 10, 1200 + 11 ) \n               AND ( ( i_category IN ( 'Books', 'Children', 'Electronics' ) \n                       AND i_class IN ( 'personal', 'portable', 'reference', \n                                        'self-help' ) \n                       AND i_brand IN ( 'scholaramalgamalg #14', \n                                        'scholaramalgamalg #7' \n                                        , \n                                        'exportiunivamalg #9', \n                                                       'scholaramalgamalg #9' ) \n                     ) \n                      OR ( i_category IN ( 'Women', 'Music', 'Men' ) \n                           AND i_class IN ( 'accessories', 'classical', \n                                            'fragrances', \n                                            'pants' ) \n                           AND i_brand IN ( 'amalgimporto #1', \n                                            'edu packscholar #1', \n                                            'exportiimporto #1', \n                                                'importoamalg #1' ) ) ) \n        GROUP  BY i_manager_id, \n                  d_moy) tmp1 \nWHERE  CASE \n         WHEN avg_monthly_sales > 0 THEN Abs (sum_sales - avg_monthly_sales) \/ \n                                         avg_monthly_sales \n         ELSE NULL \n       END > 0.1 \nORDER  BY i_manager_id, \n          avg_monthly_sales, \n          sum_sales\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "D_MOY",
      "I_BRAND",
      "I_CATEGORY",
      "I_CLASS",
      "I_ITEM_SK",
      "I_MANAGER_ID",
      "SS_ITEM_SK",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_SK"
    ],
    "question": "What is the total sales, average monthly sales, and sales variance for each store manager for the specified product categories, classes, and brands, for a specific range of months?"
  },
  {
    "index": 60,
    "query": "-- start query 64 in stream 0 using template query64.tpl \nWITH cs_ui \n     AS (SELECT cs_item_sk, \n                Sum(cs_ext_list_price) AS sale, \n                Sum(cr_refunded_cash + cr_reversed_charge \n                    + cr_store_credit) AS refund \n         FROM   catalog_sales, \n                catalog_returns \n         WHERE  cs_item_sk = cr_item_sk \n                AND cs_order_number = cr_order_number \n         GROUP  BY cs_item_sk \n         HAVING Sum(cs_ext_list_price) > 2 * Sum( \n                cr_refunded_cash + cr_reversed_charge \n                + cr_store_credit)), \n     cross_sales \n     AS (SELECT i_product_name         product_name, \n                i_item_sk              item_sk, \n                s_store_name           store_name, \n                s_zip                  store_zip, \n                ad1.ca_street_number   b_street_number, \n                ad1.ca_street_name     b_streen_name, \n                ad1.ca_city            b_city, \n                ad1.ca_zip             b_zip, \n                ad2.ca_street_number   c_street_number, \n                ad2.ca_street_name     c_street_name, \n                ad2.ca_city            c_city, \n                ad2.ca_zip             c_zip, \n                d1.d_year              AS syear, \n                d2.d_year              AS fsyear, \n                d3.d_year              s2year, \n                Count(*)               cnt, \n                Sum(ss_wholesale_cost) s1, \n                Sum(ss_list_price)     s2, \n                Sum(ss_coupon_amt)     s3 \n         FROM   store_sales, \n                store_returns, \n                cs_ui, \n                date_dim d1, \n                date_dim d2, \n                date_dim d3, \n                store, \n                customer, \n                customer_demographics cd1, \n                customer_demographics cd2, \n                promotion, \n                household_demographics hd1, \n                household_demographics hd2, \n                customer_address ad1, \n                customer_address ad2, \n                income_band ib1, \n                income_band ib2, \n                item \n         WHERE  ss_store_sk = s_store_sk \n                AND ss_sold_date_sk = d1.d_date_sk \n                AND ss_customer_sk = c_customer_sk \n                AND ss_cdemo_sk = cd1.cd_demo_sk \n                AND ss_hdemo_sk = hd1.hd_demo_sk \n                AND ss_addr_sk = ad1.ca_address_sk \n                AND ss_item_sk = i_item_sk \n                AND ss_item_sk = sr_item_sk \n                AND ss_ticket_number = sr_ticket_number \n                AND ss_item_sk = cs_ui.cs_item_sk \n                AND c_current_cdemo_sk = cd2.cd_demo_sk \n                AND c_current_hdemo_sk = hd2.hd_demo_sk \n                AND c_current_addr_sk = ad2.ca_address_sk \n                AND c_first_sales_date_sk = d2.d_date_sk \n                AND c_first_shipto_date_sk = d3.d_date_sk \n                AND ss_promo_sk = p_promo_sk \n                AND hd1.hd_income_band_sk = ib1.ib_income_band_sk \n                AND hd2.hd_income_band_sk = ib2.ib_income_band_sk \n                AND cd1.cd_marital_status <> cd2.cd_marital_status \n                AND i_color IN ( 'cyan', 'peach', 'blush', 'frosted', \n                                 'powder', 'orange' ) \n                AND i_current_price BETWEEN 58 AND 58 + 10 \n                AND i_current_price BETWEEN 58 + 1 AND 58 + 15 \n         GROUP  BY i_product_name, \n                   i_item_sk, \n                   s_store_name, \n                   s_zip, \n                   ad1.ca_street_number, \n                   ad1.ca_street_name, \n                   ad1.ca_city, \n                   ad1.ca_zip, \n                   ad2.ca_street_number, \n                   ad2.ca_street_name, \n                   ad2.ca_city, \n                   ad2.ca_zip, \n                   d1.d_year, \n                   d2.d_year, \n                   d3.d_year) \nSELECT cs1.product_name, \n       cs1.store_name, \n       cs1.store_zip, \n       cs1.b_street_number, \n       cs1.b_streen_name, \n       cs1.b_city, \n       cs1.b_zip, \n       cs1.c_street_number, \n       cs1.c_street_name, \n       cs1.c_city, \n       cs1.c_zip, \n       cs1.syear, \n       cs1.cnt, \n       cs1.s1, \n       cs1.s2, \n       cs1.s3, \n       cs2.s1, \n       cs2.s2, \n       cs2.s3, \n       cs2.syear, \n       cs2.cnt \nFROM   cross_sales cs1, \n       cross_sales cs2 \nWHERE  cs1.item_sk = cs2.item_sk \n       AND cs1.syear = 2001 \n       AND cs2.syear = 2001 + 1 \n       AND cs2.cnt <= cs1.cnt \n       AND cs1.store_name = cs2.store_name \n       AND cs1.store_zip = cs2.store_zip \nORDER  BY cs1.product_name, \n          cs1.store_name, \n          cs2.cnt; \n",
    "tables": [
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS",
      "INCOME_BAND",
      "ITEM",
      "PROMOTION",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_CITY",
      "CA_STREET_NAME",
      "CA_STREET_NUMBER",
      "CA_ZIP",
      "CD_DEMO_SK",
      "CD_MARITAL_STATUS",
      "CR_ITEM_SK",
      "CR_ORDER_NUMBER",
      "CR_REFUNDED_CASH",
      "CR_REVERSED_CHARGE",
      "CR_STORE_CREDIT",
      "CS_EXT_LIST_PRICE",
      "CS_ITEM_SK",
      "CS_ORDER_NUMBER",
      "C_CURRENT_ADDR_SK",
      "C_CURRENT_CDEMO_SK",
      "C_CURRENT_HDEMO_SK",
      "C_CUSTOMER_SK",
      "C_FIRST_SALES_DATE_SK",
      "C_FIRST_SHIPTO_DATE_SK",
      "D_DATE_SK",
      "D_YEAR",
      "HD_DEMO_SK",
      "HD_INCOME_BAND_SK",
      "IB_INCOME_BAND_SK",
      "I_COLOR",
      "I_CURRENT_PRICE",
      "I_ITEM_SK",
      "I_PRODUCT_NAME",
      "P_PROMO_SK",
      "SR_ITEM_SK",
      "SR_TICKET_NUMBER",
      "SS_ADDR_SK",
      "SS_CDEMO_SK",
      "SS_COUPON_AMT",
      "SS_CUSTOMER_SK",
      "SS_HDEMO_SK",
      "SS_ITEM_SK",
      "SS_LIST_PRICE",
      "SS_PROMO_SK",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "SS_WHOLESALE_COST",
      "S_STORE_NAME",
      "S_STORE_SK",
      "S_ZIP"
    ],
    "question": "What is the product name, store name, store zip code, billing street number, billing street name, billing city, billing zip code, customer street number, customer street name, customer city, customer zip code, sales year, count, store sales wholesale cost, store sales list price, store sales coupon amount, previous year store sales wholesale cost, previous year store sales list price, previous year store sales coupon amount, previous year, previous year count for each product that has sales greater than 2 times the sum of refunds, and where the sales year is 2001, the previous year is 2002, and the count for the previous year is less than or equal to the count for the current year, and the store name and store zip code are the same for both the current and previous year sales records?"
  },
  {
    "index": 61,
    "query": "-- start query 65 in stream 0 using template query65.tpl \nSELECT s_store_name, \n               i_item_desc, \n               sc.revenue, \n               i_current_price, \n               i_wholesale_cost, \n               i_brand \nFROM   store, \n       item, \n       (SELECT ss_store_sk, \n               Avg(revenue) AS ave \n        FROM   (SELECT ss_store_sk, \n                       ss_item_sk, \n                       Sum(ss_sales_price) AS revenue \n                FROM   store_sales, \n                       date_dim \n                WHERE  ss_sold_date_sk = d_date_sk \n                       AND d_month_seq BETWEEN 1199 AND 1199 + 11 \n                GROUP  BY ss_store_sk, \n                          ss_item_sk) sa \n        GROUP  BY ss_store_sk) sb, \n       (SELECT ss_store_sk, \n               ss_item_sk, \n               Sum(ss_sales_price) AS revenue \n        FROM   store_sales, \n               date_dim \n        WHERE  ss_sold_date_sk = d_date_sk \n               AND d_month_seq BETWEEN 1199 AND 1199 + 11 \n        GROUP  BY ss_store_sk, \n                  ss_item_sk) sc \nWHERE  sb.ss_store_sk = sc.ss_store_sk \n       AND sc.revenue <= 0.1 * sb.ave \n       AND s_store_sk = sc.ss_store_sk \n       AND i_item_sk = sc.ss_item_sk \nORDER  BY s_store_name, \n          i_item_desc\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "I_BRAND",
      "I_CURRENT_PRICE",
      "I_ITEM_DESC",
      "I_ITEM_SK",
      "I_WHOLESALE_COST",
      "SS_ITEM_SK",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_NAME",
      "S_STORE_SK"
    ],
    "question": "What is the average revenue for each store and item combination, where the revenue is less than or equal to 10% (0.1) of the average revenue for that store, and the sales occurred between a specific month range? Additionally, what are the store name, item description, revenue, current price, wholesale cost, and brand for each of these combinations?"
  },
  {
    "index": 62,
    "query": "-- start query 66 in stream 0 using template query66.tpl \nSELECT w_warehouse_name, \n               w_warehouse_sq_ft, \n               w_city, \n               w_county, \n               w_state, \n               w_country, \n               ship_carriers, \n               year1,\n               Sum(jan_sales)                     AS jan_sales, \n               Sum(feb_sales)                     AS feb_sales, \n               Sum(mar_sales)                     AS mar_sales, \n               Sum(apr_sales)                     AS apr_sales, \n               Sum(may_sales)                     AS may_sales, \n               Sum(jun_sales)                     AS jun_sales, \n               Sum(jul_sales)                     AS jul_sales, \n               Sum(aug_sales)                     AS aug_sales, \n               Sum(sep_sales)                     AS sep_sales, \n               Sum(oct_sales)                     AS oct_sales, \n               Sum(nov_sales)                     AS nov_sales, \n               Sum(dec_sales)                     AS dec_sales, \n               Sum(jan_sales \/ w_warehouse_sq_ft) AS jan_sales_per_sq_foot, \n               Sum(feb_sales \/ w_warehouse_sq_ft) AS feb_sales_per_sq_foot, \n               Sum(mar_sales \/ w_warehouse_sq_ft) AS mar_sales_per_sq_foot, \n               Sum(apr_sales \/ w_warehouse_sq_ft) AS apr_sales_per_sq_foot, \n               Sum(may_sales \/ w_warehouse_sq_ft) AS may_sales_per_sq_foot, \n               Sum(jun_sales \/ w_warehouse_sq_ft) AS jun_sales_per_sq_foot, \n               Sum(jul_sales \/ w_warehouse_sq_ft) AS jul_sales_per_sq_foot, \n               Sum(aug_sales \/ w_warehouse_sq_ft) AS aug_sales_per_sq_foot, \n               Sum(sep_sales \/ w_warehouse_sq_ft) AS sep_sales_per_sq_foot, \n               Sum(oct_sales \/ w_warehouse_sq_ft) AS oct_sales_per_sq_foot, \n               Sum(nov_sales \/ w_warehouse_sq_ft) AS nov_sales_per_sq_foot, \n               Sum(dec_sales \/ w_warehouse_sq_ft) AS dec_sales_per_sq_foot, \n               Sum(jan_net)                       AS jan_net, \n               Sum(feb_net)                       AS feb_net, \n               Sum(mar_net)                       AS mar_net, \n               Sum(apr_net)                       AS apr_net, \n               Sum(may_net)                       AS may_net, \n               Sum(jun_net)                       AS jun_net, \n               Sum(jul_net)                       AS jul_net, \n               Sum(aug_net)                       AS aug_net, \n               Sum(sep_net)                       AS sep_net, \n               Sum(oct_net)                       AS oct_net, \n               Sum(nov_net)                       AS nov_net, \n               Sum(dec_net)                       AS dec_net \nFROM   (SELECT w_warehouse_name, \n               w_warehouse_sq_ft, \n               w_city, \n               w_county, \n               w_state, \n               w_country, \n               'ZOUROS' \n               || ',' \n               || 'ZHOU' AS ship_carriers, \n               d_year    AS year1, \n               Sum(CASE \n                     WHEN d_moy = 1 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS jan_sales, \n               Sum(CASE \n                     WHEN d_moy = 2 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS feb_sales, \n               Sum(CASE \n                     WHEN d_moy = 3 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS mar_sales, \n               Sum(CASE \n                     WHEN d_moy = 4 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS apr_sales, \n               Sum(CASE \n                     WHEN d_moy = 5 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS may_sales, \n               Sum(CASE \n                     WHEN d_moy = 6 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS jun_sales, \n               Sum(CASE \n                     WHEN d_moy = 7 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS jul_sales, \n               Sum(CASE \n                     WHEN d_moy = 8 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS aug_sales, \n               Sum(CASE \n                     WHEN d_moy = 9 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS sep_sales, \n               Sum(CASE \n                     WHEN d_moy = 10 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS oct_sales, \n               Sum(CASE \n                     WHEN d_moy = 11 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS nov_sales, \n               Sum(CASE \n                     WHEN d_moy = 12 THEN ws_ext_sales_price * ws_quantity \n                     ELSE 0 \n                   END)  AS dec_sales, \n               Sum(CASE \n                     WHEN d_moy = 1 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS jan_net, \n               Sum(CASE \n                     WHEN d_moy = 2 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS feb_net, \n               Sum(CASE \n                     WHEN d_moy = 3 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS mar_net, \n               Sum(CASE \n                     WHEN d_moy = 4 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS apr_net, \n               Sum(CASE \n                     WHEN d_moy = 5 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS may_net, \n               Sum(CASE \n                     WHEN d_moy = 6 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS jun_net, \n               Sum(CASE \n                     WHEN d_moy = 7 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS jul_net, \n               Sum(CASE \n                     WHEN d_moy = 8 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS aug_net, \n               Sum(CASE \n                     WHEN d_moy = 9 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS sep_net, \n               Sum(CASE \n                     WHEN d_moy = 10 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS oct_net, \n               Sum(CASE \n                     WHEN d_moy = 11 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS nov_net, \n               Sum(CASE \n                     WHEN d_moy = 12 THEN ws_net_paid_inc_ship * ws_quantity \n                     ELSE 0 \n                   END)  AS dec_net \n        FROM   web_sales, \n               warehouse, \n               date_dim, \n               time_dim, \n               ship_mode \n        WHERE  ws_warehouse_sk = w_warehouse_sk \n               AND ws_sold_date_sk = d_date_sk \n               AND ws_sold_time_sk = t_time_sk \n               AND ws_ship_mode_sk = sm_ship_mode_sk \n               AND d_year = 1998 \n               AND t_time BETWEEN 7249 AND 7249 + 28800 \n               AND sm_carrier IN ( 'ZOUROS', 'ZHOU' ) \n        GROUP  BY w_warehouse_name, \n                  w_warehouse_sq_ft, \n                  w_city, \n                  w_county, \n                  w_state, \n                  w_country, \n                  d_year \n        UNION ALL \n        SELECT w_warehouse_name, \n               w_warehouse_sq_ft, \n               w_city, \n               w_county, \n               w_state, \n               w_country, \n               'ZOUROS' \n               || ',' \n               || 'ZHOU' AS ship_carriers, \n               d_year    AS year1, \n               Sum(CASE \n                     WHEN d_moy = 1 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS jan_sales, \n               Sum(CASE \n                     WHEN d_moy = 2 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS feb_sales, \n               Sum(CASE \n                     WHEN d_moy = 3 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS mar_sales, \n               Sum(CASE \n                     WHEN d_moy = 4 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS apr_sales, \n               Sum(CASE \n                     WHEN d_moy = 5 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS may_sales, \n               Sum(CASE \n                     WHEN d_moy = 6 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS jun_sales, \n               Sum(CASE \n                     WHEN d_moy = 7 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS jul_sales, \n               Sum(CASE \n                     WHEN d_moy = 8 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS aug_sales, \n               Sum(CASE \n                     WHEN d_moy = 9 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS sep_sales, \n               Sum(CASE \n                     WHEN d_moy = 10 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS oct_sales, \n               Sum(CASE \n                     WHEN d_moy = 11 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS nov_sales, \n               Sum(CASE \n                     WHEN d_moy = 12 THEN cs_ext_sales_price * cs_quantity \n                     ELSE 0 \n                   END)  AS dec_sales, \n               Sum(CASE \n                     WHEN d_moy = 1 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS jan_net, \n               Sum(CASE \n                     WHEN d_moy = 2 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS feb_net, \n               Sum(CASE \n                     WHEN d_moy = 3 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS mar_net, \n               Sum(CASE \n                     WHEN d_moy = 4 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS apr_net, \n               Sum(CASE \n                     WHEN d_moy = 5 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS may_net, \n               Sum(CASE \n                     WHEN d_moy = 6 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS jun_net, \n               Sum(CASE \n                     WHEN d_moy = 7 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS jul_net, \n               Sum(CASE \n                     WHEN d_moy = 8 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS aug_net, \n               Sum(CASE \n                     WHEN d_moy = 9 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS sep_net, \n               Sum(CASE \n                     WHEN d_moy = 10 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS oct_net, \n               Sum(CASE \n                     WHEN d_moy = 11 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS nov_net, \n               Sum(CASE \n                     WHEN d_moy = 12 THEN cs_net_paid * cs_quantity \n                     ELSE 0 \n                   END)  AS dec_net \n        FROM   catalog_sales, \n               warehouse, \n               date_dim, \n               time_dim, \n               ship_mode \n        WHERE  cs_warehouse_sk = w_warehouse_sk \n               AND cs_sold_date_sk = d_date_sk \n               AND cs_sold_time_sk = t_time_sk \n               AND cs_ship_mode_sk = sm_ship_mode_sk \n               AND d_year = 1998 \n               AND t_time BETWEEN 7249 AND 7249 + 28800 \n               AND sm_carrier IN ( 'ZOUROS', 'ZHOU' ) \n        GROUP  BY w_warehouse_name, \n                  w_warehouse_sq_ft, \n                  w_city, \n                  w_county, \n                  w_state, \n                  w_country, \n                  d_year) x \nGROUP  BY w_warehouse_name, \n          w_warehouse_sq_ft, \n          w_city, \n          w_county, \n          w_state, \n          w_country, \n          ship_carriers, \n          year1 \nORDER  BY w_warehouse_name\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "SHIP_MODE",
      "TIME_DIM",
      "WAREHOUSE",
      "WEB_SALES"
    ],
    "columns": [
      "CS_EXT_SALES_PRICE",
      "CS_NET_PAID",
      "CS_QUANTITY",
      "CS_SHIP_MODE_SK",
      "CS_SOLD_DATE_SK",
      "CS_SOLD_TIME_SK",
      "CS_WAREHOUSE_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "SM_CARRIER",
      "SM_SHIP_MODE_SK",
      "T_TIME",
      "T_TIME_SK",
      "WS_EXT_SALES_PRICE",
      "WS_NET_PAID_INC_SHIP",
      "WS_QUANTITY",
      "WS_SHIP_MODE_SK",
      "WS_SOLD_DATE_SK",
      "WS_SOLD_TIME_SK",
      "WS_WAREHOUSE_SK",
      "W_CITY",
      "W_COUNTRY",
      "W_COUNTY",
      "W_STATE",
      "W_WAREHOUSE_NAME",
      "W_WAREHOUSE_SK",
      "W_WAREHOUSE_SQ_FT"
    ],
    "question": "What is the sales data for each warehouse in a given year, broken down by month and also per square foot of warehouse space?"
  },
  {
    "index": 63,
    "query": "-- start query 67 in stream 0 using template query67.tpl\nselect top 100 *\nfrom (select i_category\n            ,i_class\n            ,i_brand\n            ,i_product_name\n            ,d_year\n            ,d_qoy\n            ,d_moy\n            ,s_store_id\n            ,sumsales\n            ,rank() over (partition by i_category order by sumsales desc) rk\n      from (select i_category\n                  ,i_class\n                  ,i_brand\n                  ,i_product_name\n                  ,d_year\n                  ,d_qoy\n                  ,d_moy\n                  ,s_store_id\n                  ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales\n            from store_sales\n                ,date_dim\n                ,store\n                ,item\n       where  ss_sold_date_sk=d_date_sk\n          and ss_item_sk=i_item_sk\n          and ss_store_sk = s_store_sk\n          and d_month_seq between 1181 and 1181+11\n       group by  rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2\nwhere rk <= 100\norder by i_category\n        ,i_class\n        ,i_brand\n        ,i_product_name\n        ,d_year\n        ,d_qoy\n        ,d_moy\n        ,s_store_id\n        ,sumsales\n        ,rk\n;\n\n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_MONTH_SEQ",
      "D_MOY",
      "D_QOY",
      "D_YEAR",
      "I_BRAND",
      "I_CATEGORY",
      "I_CLASS",
      "I_PRODUCT_NAME",
      "SS_STORE_SK",
      "S_STORE_ID",
      "S_STORE_SK"
    ],
    "question": "What are the top 100 sales records for each category, with the highest sum of sales, for a specific 12-month period? The records should include information on the category, class, brand, product name, year, quarter of year, month of year, store ID, sum of sales, and the rank within each category."
  },
  {
    "index": 64,
    "query": "-- start query 68 in stream 0 using template query68.tpl \nSELECT c_last_name, \n               c_first_name, \n               ca_city, \n               bought_city, \n               ss_ticket_number, \n               extended_price, \n               extended_tax, \n               list_price \nFROM   (SELECT ss_ticket_number, \n               ss_customer_sk, \n               ca_city                 bought_city, \n               Sum(ss_ext_sales_price) extended_price, \n               Sum(ss_ext_list_price)  list_price, \n               Sum(ss_ext_tax)         extended_tax \n        FROM   store_sales, \n               date_dim, \n               store, \n               household_demographics, \n               customer_address \n        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk \n               AND store_sales.ss_store_sk = store.s_store_sk \n               AND store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk \n               AND store_sales.ss_addr_sk = customer_address.ca_address_sk \n               AND date_dim.d_dom BETWEEN 1 AND 2 \n               AND ( household_demographics.hd_dep_count = 8 \n                      OR household_demographics.hd_vehicle_count = 3 ) \n               AND date_dim.d_year IN ( 1998, 1998 + 1, 1998 + 2 ) \n               AND store.s_city IN ( 'Fairview', 'Midway' ) \n        GROUP  BY ss_ticket_number, \n                  ss_customer_sk, \n                  ss_addr_sk, \n                  ca_city) dn, \n       customer, \n       customer_address current_addr \nWHERE  ss_customer_sk = c_customer_sk \n       AND customer.c_current_addr_sk = current_addr.ca_address_sk \n       AND current_addr.ca_city <> bought_city \nORDER  BY c_last_name, \n          ss_ticket_number\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_CITY",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "D_DATE_SK",
      "D_DOM",
      "D_YEAR",
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "HD_VEHICLE_COUNT",
      "SS_ADDR_SK",
      "SS_CUSTOMER_SK",
      "SS_EXT_LIST_PRICE",
      "SS_EXT_SALES_PRICE",
      "SS_EXT_TAX",
      "SS_HDEMO_SK",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_CITY",
      "S_STORE_SK"
    ],
    "question": "What is the last name, first name, city of current address, city of purchase, ticket number, extended price, extended tax, and list price for customers who made purchases in the cities of Fairview or Midway, with a purchase date in the first or second day of the month and a year of 1998, 1999, or 2000, and have either 8 dependents or 3 vehicles, sorted by last name and ticket number?"
  },
  {
    "index": 65,
    "query": "SELECT cd_gender, \n               cd_marital_status, \n               cd_education_status, \n               Count(*) cnt1, \n               cd_purchase_estimate, \n               Count(*) cnt2, \n               cd_credit_rating, \n               Count(*) cnt3 \nFROM   customer c, \n       customer_address ca, \n       customer_demographics \nWHERE  c.c_current_addr_sk = ca.ca_address_sk \n       AND ca_state IN ( 'KS', 'AZ', 'NE' ) \n       AND cd_demo_sk = c.c_current_cdemo_sk \n       AND EXISTS (SELECT * \n                   FROM   store_sales, \n                          date_dim \n                   WHERE  c.c_customer_sk = ss_customer_sk \n                          AND ss_sold_date_sk = d_date_sk \n                          AND d_year = 2004 \n                          AND d_moy BETWEEN 3 AND 3 + 2) \n       AND ( NOT EXISTS (SELECT * \n                         FROM   web_sales, \n                                date_dim \n                         WHERE  c.c_customer_sk = ws_bill_customer_sk \n                                AND ws_sold_date_sk = d_date_sk \n                                AND d_year = 2004 \n                                AND d_moy BETWEEN 3 AND 3 + 2) \n             AND NOT EXISTS (SELECT * \n                             FROM   catalog_sales, \n                                    date_dim \n                             WHERE  c.c_customer_sk = cs_ship_customer_sk \n                                    AND cs_sold_date_sk = d_date_sk \n                                    AND d_year = 2004 \n                                    AND d_moy BETWEEN 3 AND 3 + 2) ) \nGROUP  BY cd_gender, \n          cd_marital_status, \n          cd_education_status, \n          cd_purchase_estimate, \n          cd_credit_rating \nORDER  BY cd_gender, \n          cd_marital_status, \n          cd_education_status, \n          cd_purchase_estimate, \n          cd_credit_rating\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "CD_CREDIT_RATING",
      "CD_DEMO_SK",
      "CD_EDUCATION_STATUS",
      "CD_GENDER",
      "CD_MARITAL_STATUS",
      "CD_PURCHASE_ESTIMATE",
      "CS_SHIP_CUSTOMER_SK",
      "CS_SOLD_DATE_SK",
      "C_CURRENT_ADDR_SK",
      "C_CURRENT_CDEMO_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "SS_CUSTOMER_SK",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the count of customers based on their gender, marital status, education status, purchase estimate, and credit rating who live in the states of Kansas (KS), Arizona (AZ), and Nebraska (NE), and made store purchases between March and May of 2004, but did not make any web or catalog purchases during that time period, and how are they categorized in terms of gender, marital status, education status, purchase estimate, and credit rating?"
  },
  {
    "index": 66,
    "query": "-- start query 7 in stream 0 using template query7.tpl \nSELECT i_item_id, \n               Avg(ss_quantity)    agg1, \n               Avg(ss_list_price)  agg2, \n               Avg(ss_coupon_amt)  agg3, \n               Avg(ss_sales_price) agg4 \nFROM   store_sales, \n       customer_demographics, \n       date_dim, \n       item, \n       promotion \nWHERE  ss_sold_date_sk = d_date_sk \n       AND ss_item_sk = i_item_sk \n       AND ss_cdemo_sk = cd_demo_sk \n       AND ss_promo_sk = p_promo_sk \n       AND cd_gender = 'F' \n       AND cd_marital_status = 'W' \n       AND cd_education_status = '2 yr Degree' \n       AND ( p_channel_email = 'N' \n              OR p_channel_event = 'N' ) \n       AND d_year = 1998 \nGROUP  BY i_item_id \nORDER  BY i_item_id\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "ITEM",
      "PROMOTION",
      "STORE_SALES"
    ],
    "columns": [
      "CD_DEMO_SK",
      "CD_EDUCATION_STATUS",
      "CD_GENDER",
      "CD_MARITAL_STATUS",
      "D_DATE_SK",
      "D_YEAR",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "P_CHANNEL_EMAIL",
      "P_CHANNEL_EVENT",
      "P_PROMO_SK",
      "SS_CDEMO_SK",
      "SS_COUPON_AMT",
      "SS_ITEM_SK",
      "SS_LIST_PRICE",
      "SS_PROMO_SK",
      "SS_QUANTITY",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK"
    ],
    "question": "What is the average quantity, list price, coupon amount, and sales price for each item sold to female customers with a marital status of \"W\", an education status of \"2 yr Degree\", and who were not contacted through email or events, in the year 1998?"
  },
  {
    "index": 67,
    "query": "-- start query 70 in stream 0 using template query70.tpl \nSELECT Sum(ss_net_profit)                     AS total_sum, \n               s_state, \n               s_county, \n               Grouping(s_state) + Grouping(s_county) AS lochierarchy, \n               Rank() \n                 OVER ( \n                   partition BY Grouping(s_state)+Grouping(s_county), CASE WHEN \n                 Grouping( \n                 s_county) = 0 THEN s_state END \n                   ORDER BY Sum(ss_net_profit) DESC)  AS rank_within_parent \nFROM   store_sales, \n       date_dim d1, \n       store \nWHERE  d1.d_month_seq BETWEEN 1200 AND 1200 + 11 \n       AND d1.d_date_sk = ss_sold_date_sk \n       AND s_store_sk = ss_store_sk \n       AND s_state IN (SELECT s_state \n                       FROM   (SELECT s_state                               AS \n                                      s_state, \n                                      Rank() \n                                        OVER ( \n                                          partition BY s_state \n                                          ORDER BY Sum(ss_net_profit) DESC) AS \n                                      ranking \n                               FROM   store_sales, \n                                      store, \n                                      date_dim \n                               WHERE  d_month_seq BETWEEN 1200 AND 1200 + 11 \n                                      AND d_date_sk = ss_sold_date_sk \n                                      AND s_store_sk = ss_store_sk \n                               GROUP  BY s_state) tmp1 \n                       WHERE  ranking <= 5) \nGROUP  BY rollup( s_state, s_county ) \nORDER  BY lochierarchy DESC, \n          CASE \n            WHEN lochierarchy = 0 THEN s_state \n          END, \n          rank_within_parent\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "SS_NET_PROFIT",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_COUNTY",
      "S_STATE",
      "S_STORE_SK"
    ],
    "question": "What is the total sum of net profit for each combination of state and county in the store_sales dataset? Additionally, what is the rank of each combination within their respective parent group (state or county) based on the net profit?"
  },
  {
    "index": 68,
    "query": "-- start query 71 in stream 0 using template query71.tpl \nSELECT i_brand_id     brand_id, \n       i_brand        brand, \n       t_hour, \n       t_minute, \n       Sum(ext_price) ext_price \nFROM   item, \n       (SELECT ws_ext_sales_price AS ext_price, \n               ws_sold_date_sk    AS sold_date_sk, \n               ws_item_sk         AS sold_item_sk, \n               ws_sold_time_sk    AS time_sk \n        FROM   web_sales, \n               date_dim \n        WHERE  d_date_sk = ws_sold_date_sk \n               AND d_moy = 11 \n               AND d_year = 2001 \n        UNION ALL \n        SELECT cs_ext_sales_price AS ext_price, \n               cs_sold_date_sk    AS sold_date_sk, \n               cs_item_sk         AS sold_item_sk, \n               cs_sold_time_sk    AS time_sk \n        FROM   catalog_sales, \n               date_dim \n        WHERE  d_date_sk = cs_sold_date_sk \n               AND d_moy = 11 \n               AND d_year = 2001 \n        UNION ALL \n        SELECT ss_ext_sales_price AS ext_price, \n               ss_sold_date_sk    AS sold_date_sk, \n               ss_item_sk         AS sold_item_sk, \n               ss_sold_time_sk    AS time_sk \n        FROM   store_sales, \n               date_dim \n        WHERE  d_date_sk = ss_sold_date_sk \n               AND d_moy = 11 \n               AND d_year = 2001) AS tmp, \n       time_dim \nWHERE  sold_item_sk = i_item_sk \n       AND i_manager_id = 1 \n       AND time_sk = t_time_sk \n       AND ( t_meal_time = 'breakfast' \n              OR t_meal_time = 'dinner' ) \nGROUP  BY i_brand, \n          i_brand_id, \n          t_hour, \n          t_minute \nORDER  BY ext_price DESC, \n          i_brand_id; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES",
      "TIME_DIM",
      "WEB_SALES"
    ],
    "columns": [
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "CS_SOLD_TIME_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_BRAND",
      "I_BRAND_ID",
      "I_ITEM_SK",
      "I_MANAGER_ID",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK",
      "SS_SOLD_TIME_SK",
      "T_HOUR",
      "T_MEAL_TIME",
      "T_MINUTE",
      "T_TIME_SK",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_SOLD_DATE_SK",
      "WS_SOLD_TIME_SK"
    ],
    "question": "What is the total sales price for each brand during breakfast and dinner hours in November 2001, for items managed by manager with ID 1? The results should be ordered by the total sales price, with brand IDs as a tiebreaker."
  },
  {
    "index": 69,
    "query": "-- start query 72 in stream 0 using template query72.tpl \nSELECT i_item_desc, \n               w_warehouse_name, \n               d1.d_week_seq, \n               Sum(CASE \n                     WHEN p_promo_sk IS NULL THEN 1 \n                     ELSE 0 \n                   END) no_promo, \n               Sum(CASE \n                     WHEN p_promo_sk IS NOT NULL THEN 1 \n                     ELSE 0 \n                   END) promo, \n               Count(*) total_cnt \nFROM   catalog_sales \n       JOIN inventory \n         ON ( cs_item_sk = inv_item_sk ) \n       JOIN warehouse \n         ON ( w_warehouse_sk = inv_warehouse_sk ) \n       JOIN item \n         ON ( i_item_sk = cs_item_sk ) \n       JOIN customer_demographics \n         ON ( cs_bill_cdemo_sk = cd_demo_sk ) \n       JOIN household_demographics \n         ON ( cs_bill_hdemo_sk = hd_demo_sk ) \n       JOIN date_dim d1 \n         ON ( cs_sold_date_sk = d1.d_date_sk ) \n       JOIN date_dim d2 \n         ON ( inv_date_sk = d2.d_date_sk ) \n       JOIN date_dim d3 \n         ON ( cs_ship_date_sk = d3.d_date_sk ) \n       LEFT OUTER JOIN promotion \n                    ON ( cs_promo_sk = p_promo_sk ) \n       LEFT OUTER JOIN catalog_returns \n                    ON ( cr_item_sk = cs_item_sk \n                         AND cr_order_number = cs_order_number ) \nWHERE  d1.d_week_seq = d2.d_week_seq \n       AND inv_quantity_on_hand < cs_quantity \n       AND d3.d_date > d1.d_date + INTERVAL '5' day \n       AND hd_buy_potential = '501-1000' \n       AND d1.d_year = 2002 \n       AND cd_marital_status = 'M' \nGROUP  BY i_item_desc, \n          w_warehouse_name, \n          d1.d_week_seq \nORDER  BY total_cnt DESC, \n          i_item_desc, \n          w_warehouse_name, \n          d_week_seq\nLIMIT 100; \n",
    "tables": [
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS",
      "INVENTORY",
      "ITEM",
      "PROMOTION",
      "WAREHOUSE"
    ],
    "columns": [
      "CD_DEMO_SK",
      "CD_MARITAL_STATUS",
      "CR_ITEM_SK",
      "CR_ORDER_NUMBER",
      "CS_BILL_CDEMO_SK",
      "CS_BILL_HDEMO_SK",
      "CS_ITEM_SK",
      "CS_ORDER_NUMBER",
      "CS_PROMO_SK",
      "CS_QUANTITY",
      "CS_SHIP_DATE_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE",
      "D_DATE_SK",
      "D_WEEK_SEQ",
      "D_YEAR",
      "HD_BUY_POTENTIAL",
      "HD_DEMO_SK",
      "INV_DATE_SK",
      "INV_ITEM_SK",
      "INV_QUANTITY_ON_HAND",
      "INV_WAREHOUSE_SK",
      "I_ITEM_DESC",
      "I_ITEM_SK",
      "P_PROMO_SK",
      "W_WAREHOUSE_NAME",
      "W_WAREHOUSE_SK"
    ],
    "question": "What is the item description, warehouse name, week sequence, number of items sold with no promotion, number of items sold with a promotion, and total count of items sold for each item, warehouse, and week in 2002 where the quantity on hand is less than the quantity sold, the shipping date is more than 5 days after the sold date, the potential for buying is between 501 and 1000, the marital status is 'M', and the total count is sorted in descending order?"
  },
  {
    "index": 70,
    "query": "-- start query 73 in stream 0 using template query73.tpl \nSELECT c_last_name, \n       c_first_name, \n       c_salutation, \n       c_preferred_cust_flag, \n       ss_ticket_number, \n       cnt \nFROM   (SELECT ss_ticket_number, \n               ss_customer_sk, \n               Count(*) cnt \n        FROM   store_sales, \n               date_dim, \n               store, \n               household_demographics \n        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk \n               AND store_sales.ss_store_sk = store.s_store_sk \n               AND store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk \n               AND date_dim.d_dom BETWEEN 1 AND 2 \n               AND ( household_demographics.hd_buy_potential = '>10000' \n                      OR household_demographics.hd_buy_potential = '0-500' ) \n               AND household_demographics.hd_vehicle_count > 0 \n               AND CASE \n                     WHEN household_demographics.hd_vehicle_count > 0 THEN \n                     household_demographics.hd_dep_count \/ \n                     household_demographics.hd_vehicle_count \n                     ELSE NULL \n                   END > 1 \n               AND date_dim.d_year IN ( 2000, 2000 + 1, 2000 + 2 ) \n               AND store.s_county IN ( 'Williamson County', 'Williamson County', \n                                       'Williamson County', \n                                                             'Williamson County' \n                                     ) \n        GROUP  BY ss_ticket_number, \n                  ss_customer_sk) dj, \n       customer \nWHERE  ss_customer_sk = c_customer_sk \n       AND cnt BETWEEN 1 AND 5 \nORDER  BY cnt DESC, \n          c_last_name ASC; \n",
    "tables": [
      "CUSTOMER",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "C_PREFERRED_CUST_FLAG",
      "C_SALUTATION",
      "D_DATE_SK",
      "D_DOM",
      "D_YEAR",
      "HD_BUY_POTENTIAL",
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "HD_VEHICLE_COUNT",
      "SS_CUSTOMER_SK",
      "SS_HDEMO_SK",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_COUNTY",
      "S_STORE_SK"
    ],
    "question": "What is the customer information, ticket number, and count of purchases for customers who meet the following criteria: \n- The sale occurred on the 1st or 2nd day of the month\n- The customer has a high buying potential (>10000) or a low buying potential (0-500)\n- The customer has at least 1 vehicle\n- The ratio of the number of dependents to the number of vehicles is greater than 1\n- The sale occurred in the year 2000, 2001, or 2002\n- The sale occurred in Williamson County\n- The count of purchases for each customer is between 1 and 5\nThe results should be ordered by the count of purchases in descending order, and for customers with the same count, ordered by last name in ascending order."
  },
  {
    "index": 71,
    "query": "-- start query 74 in stream 0 using template query74.tpl \nWITH year_total \n     AS (SELECT c_customer_id    customer_id, \n                c_first_name     customer_first_name, \n                c_last_name      customer_last_name, \n                d_year           AS year1, \n                Sum(ss_net_paid) year_total, \n                's'              sale_type \n         FROM   customer, \n                store_sales, \n                date_dim \n         WHERE  c_customer_sk = ss_customer_sk \n                AND ss_sold_date_sk = d_date_sk \n                AND d_year IN ( 1999, 1999 + 1 ) \n         GROUP  BY c_customer_id, \n                   c_first_name, \n                   c_last_name, \n                   d_year \n         UNION ALL \n         SELECT c_customer_id    customer_id, \n                c_first_name     customer_first_name, \n                c_last_name      customer_last_name, \n                d_year           AS year1, \n                Sum(ws_net_paid) year_total, \n                'w'              sale_type \n         FROM   customer, \n                web_sales, \n                date_dim \n         WHERE  c_customer_sk = ws_bill_customer_sk \n                AND ws_sold_date_sk = d_date_sk \n                AND d_year IN ( 1999, 1999 + 1 ) \n         GROUP  BY c_customer_id, \n                   c_first_name, \n                   c_last_name, \n                   d_year) \nSELECT t_s_secyear.customer_id, \n               t_s_secyear.customer_first_name, \n               t_s_secyear.customer_last_name \nFROM   year_total t_s_firstyear, \n       year_total t_s_secyear, \n       year_total t_w_firstyear, \n       year_total t_w_secyear \nWHERE  t_s_secyear.customer_id = t_s_firstyear.customer_id \n       AND t_s_firstyear.customer_id = t_w_secyear.customer_id \n       AND t_s_firstyear.customer_id = t_w_firstyear.customer_id \n       AND t_s_firstyear.sale_type = 's' \n       AND t_w_firstyear.sale_type = 'w' \n       AND t_s_secyear.sale_type = 's' \n       AND t_w_secyear.sale_type = 'w' \n       AND t_s_firstyear.year1 = 1999 \n       AND t_s_secyear.year1 = 1999 + 1 \n       AND t_w_firstyear.year1 = 1999 \n       AND t_w_secyear.year1 = 1999 + 1 \n       AND t_s_firstyear.year_total > 0 \n       AND t_w_firstyear.year_total > 0 \n       AND CASE \n             WHEN t_w_firstyear.year_total > 0 THEN t_w_secyear.year_total \/ \n                                                    t_w_firstyear.year_total \n             ELSE NULL \n           END > CASE \n                   WHEN t_s_firstyear.year_total > 0 THEN \n                   t_s_secyear.year_total \/ \n                   t_s_firstyear.year_total \n                   ELSE NULL \n                 END \nORDER  BY 1, \n          2, \n          3\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "C_CUSTOMER_ID",
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "D_DATE_SK",
      "D_YEAR",
      "SS_CUSTOMER_SK",
      "SS_NET_PAID",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_NET_PAID",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the customer IDs, first names, and last names of the top 100 customers who had a greater increase in total sales from 1999 to 2000 compared to the increase in total sales from the same period for web sales?"
  },
  {
    "index": 72,
    "query": "-- start query 75 in stream 0 using template query75.tpl \nWITH all_sales \n     AS (SELECT d_year, \n                i_brand_id, \n                i_class_id, \n                i_category_id, \n                i_manufact_id, \n                Sum(sales_cnt) AS sales_cnt, \n                Sum(sales_amt) AS sales_amt \n         FROM   (SELECT d_year, \n                        i_brand_id, \n                        i_class_id, \n                        i_category_id, \n                        i_manufact_id, \n                        cs_quantity - COALESCE(cr_return_quantity, 0)        AS \n                        sales_cnt, \n                        cs_ext_sales_price - COALESCE(cr_return_amount, 0.0) AS \n                        sales_amt \n                 FROM   catalog_sales \n                        JOIN item \n                          ON i_item_sk = cs_item_sk \n                        JOIN date_dim \n                          ON d_date_sk = cs_sold_date_sk \n                        LEFT JOIN catalog_returns \n                               ON ( cs_order_number = cr_order_number \n                                    AND cs_item_sk = cr_item_sk ) \n                 WHERE  i_category = 'Men' \n                 UNION \n                 SELECT d_year, \n                        i_brand_id, \n                        i_class_id, \n                        i_category_id, \n                        i_manufact_id, \n                        ss_quantity - COALESCE(sr_return_quantity, 0)     AS \n                        sales_cnt, \n                        ss_ext_sales_price - COALESCE(sr_return_amt, 0.0) AS \n                        sales_amt \n                 FROM   store_sales \n                        JOIN item \n                          ON i_item_sk = ss_item_sk \n                        JOIN date_dim \n                          ON d_date_sk = ss_sold_date_sk \n                        LEFT JOIN store_returns \n                               ON ( ss_ticket_number = sr_ticket_number \n                                    AND ss_item_sk = sr_item_sk ) \n                 WHERE  i_category = 'Men' \n                 UNION \n                 SELECT d_year, \n                        i_brand_id, \n                        i_class_id, \n                        i_category_id, \n                        i_manufact_id, \n                        ws_quantity - COALESCE(wr_return_quantity, 0)     AS \n                        sales_cnt, \n                        ws_ext_sales_price - COALESCE(wr_return_amt, 0.0) AS \n                        sales_amt \n                 FROM   web_sales \n                        JOIN item \n                          ON i_item_sk = ws_item_sk \n                        JOIN date_dim \n                          ON d_date_sk = ws_sold_date_sk \n                        LEFT JOIN web_returns \n                               ON ( ws_order_number = wr_order_number \n                                    AND ws_item_sk = wr_item_sk ) \n                 WHERE  i_category = 'Men') sales_detail \n         GROUP  BY d_year, \n                   i_brand_id, \n                   i_class_id, \n                   i_category_id, \n                   i_manufact_id) \nSELECT prev_yr.d_year                        AS prev_year, \n               curr_yr.d_year                        AS year1, \n               curr_yr.i_brand_id, \n               curr_yr.i_class_id, \n               curr_yr.i_category_id, \n               curr_yr.i_manufact_id, \n               prev_yr.sales_cnt                     AS prev_yr_cnt, \n               curr_yr.sales_cnt                     AS curr_yr_cnt, \n               curr_yr.sales_cnt - prev_yr.sales_cnt AS sales_cnt_diff, \n               curr_yr.sales_amt - prev_yr.sales_amt AS sales_amt_diff \nFROM   all_sales curr_yr, \n       all_sales prev_yr \nWHERE  curr_yr.i_brand_id = prev_yr.i_brand_id \n       AND curr_yr.i_class_id = prev_yr.i_class_id \n       AND curr_yr.i_category_id = prev_yr.i_category_id \n       AND curr_yr.i_manufact_id = prev_yr.i_manufact_id \n       AND curr_yr.d_year = 2002 \n       AND prev_yr.d_year = 2002 - 1 \n       AND Cast(curr_yr.sales_cnt AS DECIMAL(17, 2)) \/ Cast(prev_yr.sales_cnt AS \n                                                                DECIMAL(17, 2)) \n           < 0.9 \nORDER  BY sales_cnt_diff\nLIMIT 100; \n",
    "tables": [
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE_RETURNS",
      "STORE_SALES",
      "WEB_RETURNS",
      "WEB_SALES"
    ],
    "columns": [
      "CR_ITEM_SK",
      "CR_ORDER_NUMBER",
      "CR_RETURN_AMOUNT",
      "CR_RETURN_QUANTITY",
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_ORDER_NUMBER",
      "CS_QUANTITY",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_YEAR",
      "I_BRAND_ID",
      "I_CATEGORY",
      "I_CATEGORY_ID",
      "I_CLASS_ID",
      "I_ITEM_SK",
      "I_MANUFACT_ID",
      "SR_ITEM_SK",
      "SR_RETURN_AMT",
      "SR_RETURN_QUANTITY",
      "SR_TICKET_NUMBER",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_QUANTITY",
      "SS_SOLD_DATE_SK",
      "SS_TICKET_NUMBER",
      "WR_ITEM_SK",
      "WR_ORDER_NUMBER",
      "WR_RETURN_AMT",
      "WR_RETURN_QUANTITY",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_ORDER_NUMBER",
      "WS_QUANTITY",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What are the differences in sales count and sales amount between the current year (2002) and the previous year (2001) for products in the \"Men\" category that have a sales count decrease of less than 90%?"
  },
  {
    "index": 73,
    "query": "-- start query 76 in stream 0 using template query76.tpl \nSELECT channel, \n               col_name, \n               d_year, \n               d_qoy, \n               i_category, \n               Count(*)             sales_cnt, \n               Sum(ext_sales_price) sales_amt \nFROM   (SELECT 'store'            AS channel, \n               'ss_hdemo_sk'      col_name, \n               d_year, \n               d_qoy, \n               i_category, \n               ss_ext_sales_price ext_sales_price \n        FROM   store_sales, \n               item, \n               date_dim \n        WHERE  ss_hdemo_sk IS NULL \n               AND ss_sold_date_sk = d_date_sk \n               AND ss_item_sk = i_item_sk \n        UNION ALL \n        SELECT 'web'              AS channel, \n               'ws_ship_hdemo_sk' col_name, \n               d_year, \n               d_qoy, \n               i_category, \n               ws_ext_sales_price ext_sales_price \n        FROM   web_sales, \n               item, \n               date_dim \n        WHERE  ws_ship_hdemo_sk IS NULL \n               AND ws_sold_date_sk = d_date_sk \n               AND ws_item_sk = i_item_sk \n        UNION ALL \n        SELECT 'catalog'          AS channel, \n               'cs_warehouse_sk'  col_name, \n               d_year, \n               d_qoy, \n               i_category, \n               cs_ext_sales_price ext_sales_price \n        FROM   catalog_sales, \n               item, \n               date_dim \n        WHERE  cs_warehouse_sk IS NULL \n               AND cs_sold_date_sk = d_date_sk \n               AND cs_item_sk = i_item_sk) foo \nGROUP  BY channel, \n          col_name, \n          d_year, \n          d_qoy, \n          i_category \nORDER  BY channel, \n          col_name, \n          d_year, \n          d_qoy, \n          i_category\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "CS_WAREHOUSE_SK",
      "D_DATE_SK",
      "D_QOY",
      "D_YEAR",
      "I_CATEGORY",
      "I_ITEM_SK",
      "SS_EXT_SALES_PRICE",
      "SS_HDEMO_SK",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_SHIP_HDEMO_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the sales count and sales amount for each channel, column name, year, quarter of year, and item category in the dataset, limited to the first 100 records?"
  },
  {
    "index": 74,
    "query": "\n-- start query 77 in stream 0 using template query77.tpl \nWITH ss AS \n( \n         SELECT   s_store_sk, \n                  Sum(ss_ext_sales_price) AS sales, \n                  Sum(ss_net_profit)      AS profit \n         FROM     store_sales, \n                  date_dim, \n                  store \n         WHERE    ss_sold_date_sk = d_date_sk \n         AND      d_date BETWEEN Cast('2001-08-16' AS DATE) AND      ( \n                           Cast('2001-08-16' AS DATE) + INTERVAL '30' day) \n         AND      ss_store_sk = s_store_sk \n         GROUP BY s_store_sk) , sr AS \n( \n         SELECT   s_store_sk, \n                  sum(sr_return_amt) AS returns1, \n                  sum(sr_net_loss)   AS profit_loss \n         FROM     store_returns, \n                  date_dim, \n                  store \n         WHERE    sr_returned_date_sk = d_date_sk \n         AND      d_date BETWEEN cast('2001-08-16' AS date) AND      ( \n                           cast('2001-08-16' AS date) + INTERVAL '30' day) \n         AND      sr_store_sk = s_store_sk \n         GROUP BY s_store_sk), cs AS \n( \n         SELECT   cs_call_center_sk, \n                  sum(cs_ext_sales_price) AS sales, \n                  sum(cs_net_profit)      AS profit \n         FROM     catalog_sales, \n                  date_dim \n         WHERE    cs_sold_date_sk = d_date_sk \n         AND      d_date BETWEEN cast('2001-08-16' AS date) AND      ( \n                           cast('2001-08-16' AS date) + INTERVAL '30' day) \n         GROUP BY cs_call_center_sk ), cr AS \n( \n         SELECT   cr_call_center_sk, \n                  sum(cr_return_amount) AS returns1, \n                  sum(cr_net_loss)      AS profit_loss \n         FROM     catalog_returns, \n                  date_dim \n         WHERE    cr_returned_date_sk = d_date_sk \n         AND      d_date BETWEEN cast('2001-08-16' AS date) AND      ( \n                           cast('2001-08-16' AS date) + INTERVAL '30' day) \n         GROUP BY cr_call_center_sk ), ws AS \n( \n         SELECT   wp_web_page_sk, \n                  sum(ws_ext_sales_price) AS sales, \n                  sum(ws_net_profit)      AS profit \n         FROM     web_sales, \n                  date_dim, \n                  web_page \n         WHERE    ws_sold_date_sk = d_date_sk \n         AND      d_date BETWEEN cast('2001-08-16' AS date) AND      ( \n                           cast('2001-08-16' AS date) + INTERVAL '30' day) \n         AND      ws_web_page_sk = wp_web_page_sk \n         GROUP BY wp_web_page_sk), wr AS \n( \n         SELECT   wp_web_page_sk, \n                  sum(wr_return_amt) AS returns1, \n                  sum(wr_net_loss)   AS profit_loss \n         FROM     web_returns, \n                  date_dim, \n                  web_page \n         WHERE    wr_returned_date_sk = d_date_sk \n         AND      d_date BETWEEN cast('2001-08-16' AS date) AND      ( \n                           cast('2001-08-16' AS date) + INTERVAL '30' day) \n         AND      wr_web_page_sk = wp_web_page_sk \n         GROUP BY wp_web_page_sk) \nSELECT\n         channel , \n         id , \n         sum(sales)   AS sales , \n         sum(returns1) AS returns1 , \n         sum(profit)  AS profit \nFROM     ( \n                   SELECT    'store channel' AS channel , \n                             ss.s_store_sk   AS id , \n                             sales , \n                             COALESCE(returns1, 0)               AS returns1 , \n                             (profit - COALESCE(profit_loss,0)) AS profit \n                   FROM      ss \n                   LEFT JOIN sr \n                   ON        ss.s_store_sk = sr.s_store_sk \n                   UNION ALL \n                   SELECT 'catalog channel' AS channel , \n                          cs_call_center_sk AS id , \n                          sales , \n                          returns1 , \n                          (profit - profit_loss) AS profit \n                   FROM   cs , \n                          cr \n                   UNION ALL \n                   SELECT    'web channel'     AS channel , \n                             ws.wp_web_page_sk AS id , \n                             sales , \n                             COALESCE(returns1, 0)                  returns1 , \n                             (profit - COALESCE(profit_loss,0)) AS profit \n                   FROM      ws \n                   LEFT JOIN wr \n                   ON        ws.wp_web_page_sk = wr.wp_web_page_sk ) x \nGROUP BY rollup (channel, id) \nORDER BY channel , \n         id \nLIMIT 100; \n\n",
    "tables": [
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "DATE_DIM",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES",
      "WEB_PAGE",
      "WEB_RETURNS",
      "WEB_SALES"
    ],
    "columns": [
      "CR_CALL_CENTER_SK",
      "CR_NET_LOSS",
      "CR_RETURNED_DATE_SK",
      "CR_RETURN_AMOUNT",
      "CS_CALL_CENTER_SK",
      "CS_EXT_SALES_PRICE",
      "CS_NET_PROFIT",
      "CS_SOLD_DATE_SK",
      "D_DATE",
      "D_DATE_SK",
      "SR_NET_LOSS",
      "SR_RETURNED_DATE_SK",
      "SR_RETURN_AMT",
      "SR_STORE_SK",
      "SS_EXT_SALES_PRICE",
      "SS_NET_PROFIT",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_SK",
      "WP_WEB_PAGE_SK",
      "WR_NET_LOSS",
      "WR_RETURNED_DATE_SK",
      "WR_RETURN_AMT",
      "WR_WEB_PAGE_SK",
      "WS_EXT_SALES_PRICE",
      "WS_NET_PROFIT",
      "WS_SOLD_DATE_SK",
      "WS_WEB_PAGE_SK"
    ],
    "question": "What is the total sales, returns, and profit for each channel (store, catalog, and web) and their corresponding ids (store sk, call center sk, and web page sk) between August 16, 2001, and September 15, 2001?"
  },
  {
    "index": 75,
    "query": "-- start query 78 in stream 0 using template query78.tpl \nWITH ws \n     AS (SELECT d_year                 AS ws_sold_year, \n                ws_item_sk, \n                ws_bill_customer_sk    ws_customer_sk, \n                Sum(ws_quantity)       ws_qty, \n                Sum(ws_wholesale_cost) ws_wc, \n                Sum(ws_sales_price)    ws_sp \n         FROM   web_sales \n                LEFT JOIN web_returns \n                       ON wr_order_number = ws_order_number \n                          AND ws_item_sk = wr_item_sk \n                JOIN date_dim \n                  ON ws_sold_date_sk = d_date_sk \n         WHERE  wr_order_number IS NULL \n         GROUP  BY d_year, \n                   ws_item_sk, \n                   ws_bill_customer_sk), \n     cs \n     AS (SELECT d_year                 AS cs_sold_year, \n                cs_item_sk, \n                cs_bill_customer_sk    cs_customer_sk, \n                Sum(cs_quantity)       cs_qty, \n                Sum(cs_wholesale_cost) cs_wc, \n                Sum(cs_sales_price)    cs_sp \n         FROM   catalog_sales \n                LEFT JOIN catalog_returns \n                       ON cr_order_number = cs_order_number \n                          AND cs_item_sk = cr_item_sk \n                JOIN date_dim \n                  ON cs_sold_date_sk = d_date_sk \n         WHERE  cr_order_number IS NULL \n         GROUP  BY d_year, \n                   cs_item_sk, \n                   cs_bill_customer_sk), \n     ss \n     AS (SELECT d_year                 AS ss_sold_year, \n                ss_item_sk, \n                ss_customer_sk, \n                Sum(ss_quantity)       ss_qty, \n                Sum(ss_wholesale_cost) ss_wc, \n                Sum(ss_sales_price)    ss_sp \n         FROM   store_sales \n                LEFT JOIN store_returns \n                       ON sr_ticket_number = ss_ticket_number \n                          AND ss_item_sk = sr_item_sk \n                JOIN date_dim \n                  ON ss_sold_date_sk = d_date_sk \n         WHERE  sr_ticket_number IS NULL \n         GROUP  BY d_year, \n                   ss_item_sk, \n                   ss_customer_sk) \nSELECT ss_item_sk, \n               Round(ss_qty \/ ( COALESCE(ws_qty + cs_qty, 1) ), 2) ratio, \n               ss_qty                                              store_qty, \n               ss_wc \n               store_wholesale_cost, \n               ss_sp \n               store_sales_price, \n               COALESCE(ws_qty, 0) + COALESCE(cs_qty, 0) \n               other_chan_qty, \n               COALESCE(ws_wc, 0) + COALESCE(cs_wc, 0) \n               other_chan_wholesale_cost, \n               COALESCE(ws_sp, 0) + COALESCE(cs_sp, 0) \n               other_chan_sales_price \nFROM   ss \n       LEFT JOIN ws \n              ON ( ws_sold_year = ss_sold_year \n                   AND ws_item_sk = ss_item_sk \n                   AND ws_customer_sk = ss_customer_sk ) \n       LEFT JOIN cs \n              ON ( cs_sold_year = ss_sold_year \n                   AND cs_item_sk = cs_item_sk \n                   AND cs_customer_sk = ss_customer_sk ) \nWHERE  COALESCE(ws_qty, 0) > 0 \n       AND COALESCE(cs_qty, 0) > 0 \n       AND ss_sold_year = 1999 \nORDER  BY ss_item_sk, \n          ss_qty DESC, \n          ss_wc DESC, \n          ss_sp DESC, \n          other_chan_qty, \n          other_chan_wholesale_cost, \n          other_chan_sales_price, \n          Round(ss_qty \/ ( COALESCE(ws_qty + cs_qty, 1) ), 2)\nLIMIT 100; \n",
    "tables": [
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "DATE_DIM",
      "STORE_RETURNS",
      "STORE_SALES",
      "WEB_RETURNS",
      "WEB_SALES"
    ],
    "columns": [
      "CR_ITEM_SK",
      "CR_ORDER_NUMBER",
      "CS_BILL_CUSTOMER_SK",
      "CS_ITEM_SK",
      "CS_ORDER_NUMBER",
      "CS_QUANTITY",
      "CS_SALES_PRICE",
      "CS_SOLD_DATE_SK",
      "CS_WHOLESALE_COST",
      "D_DATE_SK",
      "D_YEAR",
      "SR_ITEM_SK",
      "SR_TICKET_NUMBER",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_QUANTITY",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_TICKET_NUMBER",
      "SS_WHOLESALE_COST",
      "WR_ITEM_SK",
      "WR_ORDER_NUMBER",
      "WS_BILL_CUSTOMER_SK",
      "WS_ITEM_SK",
      "WS_ORDER_NUMBER",
      "WS_QUANTITY",
      "WS_SALES_PRICE",
      "WS_SOLD_DATE_SK",
      "WS_WHOLESALE_COST"
    ],
    "question": "What are the top 100 items sold in 1999, along with their quantity, wholesale cost, and sales price in store sales, and the ratio of store sales quantity to the combined quantity from web sales and catalog sales?"
  },
  {
    "index": 76,
    "query": "-- start query 79 in stream 0 using template query79.tpl \nSELECT c_last_name, \n               c_first_name, \n               Substr(s_city, 1, 30), \n               ss_ticket_number, \n               amt, \n               profit \nFROM   (SELECT ss_ticket_number, \n               ss_customer_sk, \n               store.s_city, \n               Sum(ss_coupon_amt) amt, \n               Sum(ss_net_profit) profit \n        FROM   store_sales, \n               date_dim, \n               store, \n               household_demographics \n        WHERE  store_sales.ss_sold_date_sk = date_dim.d_date_sk \n               AND store_sales.ss_store_sk = store.s_store_sk \n               AND store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk \n               AND ( household_demographics.hd_dep_count = 8 \n                      OR household_demographics.hd_vehicle_count > 4 ) \n               AND date_dim.d_dow = 1 \n               AND date_dim.d_year IN ( 2000, 2000 + 1, 2000 + 2 ) \n               AND store.s_number_employees BETWEEN 200 AND 295 \n        GROUP  BY ss_ticket_number, \n                  ss_customer_sk, \n                  ss_addr_sk, \n                  store.s_city) ms, \n       customer \nWHERE  ss_customer_sk = c_customer_sk \nORDER  BY c_last_name, \n          c_first_name, \n          Substr(s_city, 1, 30), \n          profit\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "D_DATE_SK",
      "D_DOW",
      "D_YEAR",
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "HD_VEHICLE_COUNT",
      "SS_ADDR_SK",
      "SS_COUPON_AMT",
      "SS_CUSTOMER_SK",
      "SS_HDEMO_SK",
      "SS_NET_PROFIT",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_CITY",
      "S_NUMBER_EMPLOYEES",
      "S_STORE_SK"
    ],
    "question": "What is the last name, first name, city, ticket number, amount, and profit for customers who meet the following criteria: \n- The customer's household has either 8 dependents or more than 4 vehicles. \n- The sale was made on a Monday (d_dow = 1) \n- The sale was made between the years 2000 and 2002 \n- The store where the sale was made has between 200 and 295 employees. \n\nThe results should be ordered by the customer's last name, first name, city, and profit. The query should return the top 100 results."
  },
  {
    "index": 77,
    "query": "-- start query 8 in stream 0 using template query8.tpl \nSELECT s_store_name, \n               Sum(ss_net_profit) \nFROM   store_sales, \n       date_dim, \n       store, \n       (SELECT ca_zip \n        FROM   (SELECT Substr(ca_zip, 1, 5) ca_zip \n                FROM   customer_address \n                WHERE  Substr(ca_zip, 1, 5) IN ( '67436', '26121', '38443', \n                                                 '63157', \n                                                 '68856', '19485', '86425', \n                                                 '26741', \n                                                 '70991', '60899', '63573', \n                                                 '47556', \n                                                 '56193', '93314', '87827', \n                                                 '62017', \n                                                 '85067', '95390', '48091', \n                                                 '10261', \n                                                 '81845', '41790', '42853', \n                                                 '24675', \n                                                 '12840', '60065', '84430', \n                                                 '57451', \n                                                 '24021', '91735', '75335', \n                                                 '71935', \n                                                 '34482', '56943', '70695', \n                                                 '52147', \n                                                 '56251', '28411', '86653', \n                                                 '23005', \n                                                 '22478', '29031', '34398', \n                                                 '15365', \n                                                 '42460', '33337', '59433', \n                                                 '73943', \n                                                 '72477', '74081', '74430', \n                                                 '64605', \n                                                 '39006', '11226', '49057', \n                                                 '97308', \n                                                 '42663', '18187', '19768', \n                                                 '43454', \n                                                 '32147', '76637', '51975', \n                                                 '11181', \n                                                 '45630', '33129', '45995', \n                                                 '64386', \n                                                 '55522', '26697', '20963', \n                                                 '35154', \n                                                 '64587', '49752', '66386', \n                                                 '30586', \n                                                 '59286', '13177', '66646', \n                                                 '84195', \n                                                 '74316', '36853', '32927', \n                                                 '12469', \n                                                 '11904', '36269', '17724', \n                                                 '55346', \n                                                 '12595', '53988', '65439', \n                                                 '28015', \n                                                 '63268', '73590', '29216', \n                                                 '82575', \n                                                 '69267', '13805', '91678', \n                                                 '79460', \n                                                 '94152', '14961', '15419', \n                                                 '48277', \n                                                 '62588', '55493', '28360', \n                                                 '14152', \n                                                 '55225', '18007', '53705', \n                                                 '56573', \n                                                 '80245', '71769', '57348', \n                                                 '36845', \n                                                 '13039', '17270', '22363', \n                                                 '83474', \n                                                 '25294', '43269', '77666', \n                                                 '15488', \n                                                 '99146', '64441', '43338', \n                                                 '38736', \n                                                 '62754', '48556', '86057', \n                                                 '23090', \n                                                 '38114', '66061', '18910', \n                                                 '84385', \n                                                 '23600', '19975', '27883', \n                                                 '65719', \n                                                 '19933', '32085', '49731', \n                                                 '40473', \n                                                 '27190', '46192', '23949', \n                                                 '44738', \n                                                 '12436', '64794', '68741', \n                                                 '15333', \n                                                 '24282', '49085', '31844', \n                                                 '71156', \n                                                 '48441', '17100', '98207', \n                                                 '44982', \n                                                 '20277', '71496', '96299', \n                                                 '37583', \n                                                 '22206', '89174', '30589', \n                                                 '61924', \n                                                 '53079', '10976', '13104', \n                                                 '42794', \n                                                 '54772', '15809', '56434', \n                                                 '39975', \n                                                 '13874', '30753', '77598', \n                                                 '78229', \n                                                 '59478', '12345', '55547', \n                                                 '57422', \n                                                 '42600', '79444', '29074', \n                                                 '29752', \n                                                 '21676', '32096', '43044', \n                                                 '39383', \n                                                 '37296', '36295', '63077', \n                                                 '16572', \n                                                 '31275', '18701', '40197', \n                                                 '48242', \n                                                 '27219', '49865', '84175', \n                                                 '30446', \n                                                 '25165', '13807', '72142', \n                                                 '70499', \n                                                 '70464', '71429', '18111', \n                                                 '70857', \n                                                 '29545', '36425', '52706', \n                                                 '36194', \n                                                 '42963', '75068', '47921', \n                                                 '74763', \n                                                 '90990', '89456', '62073', \n                                                 '88397', \n                                                 '73963', '75885', '62657', \n                                                 '12530', \n                                                 '81146', '57434', '25099', \n                                                 '41429', \n                                                 '98441', '48713', '52552', \n                                                 '31667', \n                                                 '14072', '13903', '44709', \n                                                 '85429', \n                                                 '58017', '38295', '44875', \n                                                 '73541', \n                                                 '30091', '12707', '23762', \n                                                 '62258', \n                                                 '33247', '78722', '77431', \n                                                 '14510', \n                                                 '35656', '72428', '92082', \n                                                 '35267', \n                                                 '43759', '24354', '90952', \n                                                 '11512', \n                                                 '21242', '22579', '56114', \n                                                 '32339', \n                                                 '52282', '41791', '24484', \n                                                 '95020', \n                                                 '28408', '99710', '11899', \n                                                 '43344', \n                                                 '72915', '27644', '62708', \n                                                 '74479', \n                                                 '17177', '32619', '12351', \n                                                 '91339', \n                                                 '31169', '57081', '53522', \n                                                 '16712', \n                                                 '34419', '71779', '44187', \n                                                 '46206', \n                                                 '96099', '61910', '53664', \n                                                 '12295', \n                                                 '31837', '33096', '10813', \n                                                 '63048', \n                                                 '31732', '79118', '73084', \n                                                 '72783', \n                                                 '84952', '46965', '77956', \n                                                 '39815', \n                                                 '32311', '75329', '48156', \n                                                 '30826', \n                                                 '49661', '13736', '92076', \n                                                 '74865', \n                                                 '88149', '92397', '52777', \n                                                 '68453', \n                                                 '32012', '21222', '52721', \n                                                 '24626', \n                                                 '18210', '42177', '91791', \n                                                 '75251', \n                                                 '82075', '44372', '45542', \n                                                 '20609', \n                                                 '60115', '17362', '22750', \n                                                 '90434', \n                                                 '31852', '54071', '33762', \n                                                 '14705', \n                                                 '40718', '56433', '30996', \n                                                 '40657', \n                                                 '49056', '23585', '66455', \n                                                 '41021', \n                                                 '74736', '72151', '37007', \n                                                 '21729', \n                                                 '60177', '84558', '59027', \n                                                 '93855', \n                                                 '60022', '86443', '19541', \n                                                 '86886', \n                                                 '30532', '39062', '48532', \n                                                 '34713', \n                                                 '52077', '22564', '64638', \n                                                 '15273', \n                                                 '31677', '36138', '62367', \n                                                 '60261', \n                                                 '80213', '42818', '25113', \n                                                 '72378', \n                                                 '69802', '69096', '55443', \n                                                 '28820', \n                                                 '13848', '78258', '37490', \n                                                 '30556', \n                                                 '77380', '28447', '44550', \n                                                 '26791', \n                                                 '70609', '82182', '33306', \n                                                 '43224', \n                                                 '22322', '86959', '68519', \n                                                 '14308', \n                                                 '46501', '81131', '34056', \n                                                 '61991', \n                                                 '19896', '87804', '65774', \n                                                 '92564' ) \n                INTERSECT \n                SELECT ca_zip \n                FROM   (SELECT Substr(ca_zip, 1, 5) ca_zip, \n                               Count(*)             cnt \n                        FROM   customer_address, \n                               customer \n                        WHERE  ca_address_sk = c_current_addr_sk \n                               AND c_preferred_cust_flag = 'Y' \n                        GROUP  BY ca_zip \n                        HAVING Count(*) > 10)A1)A2) V1 \nWHERE  ss_store_sk = s_store_sk \n       AND ss_sold_date_sk = d_date_sk \n       AND d_qoy = 2 \n       AND d_year = 2000 \n       AND ( Substr(s_zip, 1, 2) = Substr(V1.ca_zip, 1, 2) ) \nGROUP  BY s_store_name \nORDER  BY s_store_name\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_ZIP",
      "C_CURRENT_ADDR_SK",
      "C_PREFERRED_CUST_FLAG",
      "D_DATE_SK",
      "D_QOY",
      "D_YEAR",
      "SS_NET_PROFIT",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_STORE_NAME",
      "S_STORE_SK",
      "S_ZIP"
    ],
    "question": "What is the sum of the net profit for each store in the year 2000, for the second quarter, whose zip code area matches the zip codes with a count of more than 10 preferred customers, for the zip code areas 67436, 26121, 38443, 63157, 68856, and so on?"
  },
  {
    "index": 78,
    "query": "-- start query 80 in stream 0 using template query80.tpl \nWITH ssr AS \n( \n                SELECT          s_store_id                                    AS store_id, \n                                Sum(ss_ext_sales_price)                       AS sales, \n                                Sum(COALESCE(sr_return_amt, 0))               AS returns1, \n                                Sum(ss_net_profit - COALESCE(sr_net_loss, 0)) AS profit \n                FROM            store_sales \n                LEFT OUTER JOIN store_returns \n                ON              ( \n                                                ss_item_sk = sr_item_sk \n                                AND             ss_ticket_number = sr_ticket_number), \n                                date_dim, \n                                store, \n                                item, \n                                promotion \n                WHERE           ss_sold_date_sk = d_date_sk \n                AND             d_date BETWEEN Cast('2000-08-26' AS DATE) AND             ( \n                                                Cast('2000-08-26' AS DATE) + INTERVAL '30' day) \n                AND             ss_store_sk = s_store_sk \n                AND             ss_item_sk = i_item_sk \n                AND             i_current_price > 50 \n                AND             ss_promo_sk = p_promo_sk \n                AND             p_channel_tv = 'N' \n                GROUP BY        s_store_id) , csr AS \n( \n                SELECT          cp_catalog_page_id                            AS catalog_page_id, \n                                sum(cs_ext_sales_price)                       AS sales, \n                                sum(COALESCE(cr_return_amount, 0))            AS returns1, \n                                sum(cs_net_profit - COALESCE(cr_net_loss, 0)) AS profit \n                FROM            catalog_sales \n                LEFT OUTER JOIN catalog_returns \n                ON              ( \n                                                cs_item_sk = cr_item_sk \n                                AND             cs_order_number = cr_order_number), \n                                date_dim, \n                                catalog_page, \n                                item, \n                                promotion \n                WHERE           cs_sold_date_sk = d_date_sk \n                AND             d_date BETWEEN cast('2000-08-26' AS date) AND             ( \n                                                cast('2000-08-26' AS date) + INTERVAL '30' day) \n                AND             cs_catalog_page_sk = cp_catalog_page_sk \n                AND             cs_item_sk = i_item_sk \n                AND             i_current_price > 50 \n                AND             cs_promo_sk = p_promo_sk \n                AND             p_channel_tv = 'N' \n                GROUP BY        cp_catalog_page_id) , wsr AS \n( \n                SELECT          web_site_id, \n                                sum(ws_ext_sales_price)                       AS sales, \n                                sum(COALESCE(wr_return_amt, 0))               AS returns1, \n                                sum(ws_net_profit - COALESCE(wr_net_loss, 0)) AS profit \n                FROM            web_sales \n                LEFT OUTER JOIN web_returns \n                ON              ( \n                                                ws_item_sk = wr_item_sk \n                                AND             ws_order_number = wr_order_number), \n                                date_dim, \n                                web_site, \n                                item, \n                                promotion \n                WHERE           ws_sold_date_sk = d_date_sk \n                AND             d_date BETWEEN cast('2000-08-26' AS date) AND             ( \n                                                cast('2000-08-26' AS date) + INTERVAL '30' day) \n                AND             ws_web_site_sk = web_site_sk \n                AND             ws_item_sk = i_item_sk \n                AND             i_current_price > 50 \n                AND             ws_promo_sk = p_promo_sk \n                AND             p_channel_tv = 'N' \n                GROUP BY        web_site_id) \nSELECT\n         channel , \n         id , \n         sum(sales)   AS sales , \n         sum(returns1) AS returns1 , \n         sum(profit)  AS profit \nFROM     ( \n                SELECT 'store channel' AS channel , \n                       'store' \n                              || store_id AS id , \n                       sales , \n                       returns1 , \n                       profit \n                FROM   ssr \n                UNION ALL \n                SELECT 'catalog channel' AS channel , \n                       'catalog_page' \n                              || catalog_page_id AS id , \n                       sales , \n                       returns1 , \n                       profit \n                FROM   csr \n                UNION ALL \n                SELECT 'web channel' AS channel , \n                       'web_site' \n                              || web_site_id AS id , \n                       sales , \n                       returns1 , \n                       profit \n                FROM   wsr ) x \nGROUP BY rollup (channel, id) \nORDER BY channel , \n         id \nLIMIT 100; \n\n",
    "tables": [
      "CATALOG_PAGE",
      "CATALOG_RETURNS",
      "CATALOG_SALES",
      "DATE_DIM",
      "ITEM",
      "PROMOTION",
      "STORE",
      "STORE_RETURNS",
      "STORE_SALES",
      "WEB_RETURNS",
      "WEB_SALES",
      "WEB_SITE"
    ],
    "columns": [
      "CP_CATALOG_PAGE_ID",
      "CP_CATALOG_PAGE_SK",
      "CR_ITEM_SK",
      "CR_NET_LOSS",
      "CR_ORDER_NUMBER",
      "CR_RETURN_AMOUNT",
      "CS_CATALOG_PAGE_SK",
      "CS_EXT_SALES_PRICE",
      "CS_ITEM_SK",
      "CS_NET_PROFIT",
      "CS_ORDER_NUMBER",
      "CS_PROMO_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE",
      "D_DATE_SK",
      "I_CURRENT_PRICE",
      "I_ITEM_SK",
      "P_CHANNEL_TV",
      "P_PROMO_SK",
      "SR_ITEM_SK",
      "SR_NET_LOSS",
      "SR_RETURN_AMT",
      "SR_TICKET_NUMBER",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_NET_PROFIT",
      "SS_PROMO_SK",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "SS_TICKET_NUMBER",
      "S_STORE_ID",
      "S_STORE_SK",
      "WEB_SITE_ID",
      "WEB_SITE_SK",
      "WR_ITEM_SK",
      "WR_NET_LOSS",
      "WR_ORDER_NUMBER",
      "WR_RETURN_AMT",
      "WS_EXT_SALES_PRICE",
      "WS_ITEM_SK",
      "WS_NET_PROFIT",
      "WS_ORDER_NUMBER",
      "WS_PROMO_SK",
      "WS_SOLD_DATE_SK",
      "WS_WEB_SITE_SK"
    ],
    "question": "What are the total sales, returns, and profit for each channel (store, catalog, web) for the period of August 26, 2000, to September 25, 2000?"
  },
  {
    "index": 79,
    "query": "\n-- start query 81 in stream 0 using template query81.tpl \nWITH customer_total_return \n     AS (SELECT cr_returning_customer_sk   AS ctr_customer_sk, \n                ca_state                   AS ctr_state, \n                Sum(cr_return_amt_inc_tax) AS ctr_total_return \n         FROM   catalog_returns, \n                date_dim, \n                customer_address \n         WHERE  cr_returned_date_sk = d_date_sk \n                AND d_year = 1999 \n                AND cr_returning_addr_sk = ca_address_sk \n         GROUP  BY cr_returning_customer_sk, \n                   ca_state) \nSELECT c_customer_id, \n               c_salutation, \n               c_first_name, \n               c_last_name, \n               ca_street_number, \n               ca_street_name, \n               ca_street_type, \n               ca_suite_number, \n               ca_city, \n               ca_county, \n               ca_state, \n               ca_zip, \n               ca_country, \n               ca_gmt_offset, \n               ca_location_type, \n               ctr_total_return \nFROM   customer_total_return ctr1, \n       customer_address, \n       customer \nWHERE  ctr1.ctr_total_return > (SELECT Avg(ctr_total_return) * 1.2 \n                                FROM   customer_total_return ctr2 \n                                WHERE  ctr1.ctr_state = ctr2.ctr_state) \n       AND ca_address_sk = c_current_addr_sk \n       AND ca_state = 'TX' \n       AND ctr1.ctr_customer_sk = c_customer_sk \nORDER  BY c_customer_id, \n          c_salutation, \n          c_first_name, \n          c_last_name, \n          ca_street_number, \n          ca_street_name, \n          ca_street_type, \n          ca_suite_number, \n          ca_city, \n          ca_county, \n          ca_state, \n          ca_zip, \n          ca_country, \n          ca_gmt_offset, \n          ca_location_type, \n          ctr_total_return\nLIMIT 100; \n",
    "tables": [
      "CATALOG_RETURNS",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "DATE_DIM"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_CITY",
      "CA_COUNTRY",
      "CA_COUNTY",
      "CA_GMT_OFFSET",
      "CA_LOCATION_TYPE",
      "CA_STATE",
      "CA_STREET_NAME",
      "CA_STREET_NUMBER",
      "CA_STREET_TYPE",
      "CA_SUITE_NUMBER",
      "CA_ZIP",
      "CR_RETURNED_DATE_SK",
      "CR_RETURNING_ADDR_SK",
      "CR_RETURNING_CUSTOMER_SK",
      "CR_RETURN_AMT_INC_TAX",
      "C_CURRENT_ADDR_SK",
      "C_CUSTOMER_ID",
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "C_SALUTATION",
      "D_DATE_SK",
      "D_YEAR"
    ],
    "question": "What is the query result of the following query?\n\n```sql\nWITH customer_total_return \n     AS (SELECT cr_returning_customer_sk   AS ctr_customer_sk, \n                ca_state                   AS ctr_state, \n                Sum(cr_return_amt_inc_tax) AS ctr_total_return \n         FROM   catalog_returns, \n                date_dim, \n                customer_address \n         WHERE  cr_returned_date_sk = d_date_sk \n                AND d_year = 1999 \n                AND cr_returning_addr_sk = ca_address_sk \n         GROUP  BY cr_returning_customer_sk, \n                   ca_state) \nSELECT c_customer_id, \n       c_salutation, \n       c_first_name, \n       c_last_name, \n       ca_street_number, \n       ca_street_name, \n       ca_street_type, \n       ca_suite_number, \n       ca_city, \n       ca_county, \n       ca_state, \n       ca_zip, \n       ca_country, \n       ca_gmt_offset, \n       ca_location_type, \n       ctr_total_return \nFROM   customer_total_return ctr1, \n       customer_address, \n       customer \nWHERE  ctr1.ctr_total_return > (SELECT Avg(ctr_total_return) * 1.2 \n                                FROM   customer_total_return ctr2 \n                                WHERE  ctr1.ctr_state = ctr2.ctr_state) \n       AND ca_address_sk = c_current_addr_sk \n       AND ca_state = 'TX' \n       AND ctr1.ctr_customer_sk = c_customer_sk \nORDER  BY c_customer_id, \n          c_salutation, \n          c_first_name, \n          c_last_name, \n          ca_street_number, \n          ca_street_name, \n          ca_street_type, \n          ca_suite_number, \n          ca_city, \n          ca_county, \n          ca_state, \n          ca_zip, \n          ca_country, \n          ca_gmt_offset, \n          ca_location_type, \n          ctr_total_return\nLIMIT 100;\n```\n"
  },
  {
    "index": 80,
    "query": "\n-- start query 82 in stream 0 using template query82.tpl \nSELECT\n         i_item_id , \n         i_item_desc , \n         i_current_price \nFROM     item, \n         inventory, \n         date_dim, \n         store_sales \nWHERE    i_current_price BETWEEN 63 AND      63+30 \nAND      inv_item_sk = i_item_sk \nAND      d_date_sk=inv_date_sk \nAND      d_date BETWEEN Cast('1998-04-27' AS DATE) AND      ( \n                  Cast('1998-04-27' AS DATE) + INTERVAL '60' day) \nAND      i_manufact_id IN (57,293,427,320) \nAND      inv_quantity_on_hand BETWEEN 100 AND      500 \nAND      ss_item_sk = i_item_sk \nGROUP BY i_item_id, \n         i_item_desc, \n         i_current_price \nORDER BY i_item_id \nLIMIT 100; \n\n",
    "tables": [
      "DATE_DIM",
      "INVENTORY",
      "ITEM",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE",
      "INV_ITEM_SK",
      "INV_QUANTITY_ON_HAND",
      "I_CURRENT_PRICE",
      "I_ITEM_DESC",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "I_MANUFACT_ID",
      "SS_ITEM_SK"
    ],
    "question": "What are the item ID, item description, and current price for items that meet the following criteria:\n- The current price is between $63 and $93 (i_current_price BETWEEN 63 AND 63+30).\n- The item is in the inventory.\n- The date is between April 27, 1998, and June 26, 1998 (d_date BETWEEN '1998-04-27' AND '1998-06-26').\n- The manufacturer ID is either 57, 293, 427, or 320 (i_manufact_id IN (57,293,427,320)).\n- The quantity on hand in the inventory is between 100 and 500 (inv_quantity_on_hand BETWEEN 100 AND 500).\nThe results should be grouped by item ID, item description, and current price, ordered by item ID, and limited to the first 100 items."
  },
  {
    "index": 81,
    "query": "-- start query 83 in stream 0 using template query83.tpl \nWITH sr_items \n     AS (SELECT i_item_id               item_id, \n                Sum(sr_return_quantity) sr_item_qty \n         FROM   store_returns, \n                item, \n                date_dim \n         WHERE  sr_item_sk = i_item_sk \n                AND d_date IN (SELECT d_date \n                               FROM   date_dim \n                               WHERE  d_week_seq IN (SELECT d_week_seq \n                                                     FROM   date_dim \n                                                     WHERE \n                                      d_date IN ( '1999-06-30', \n                                                  '1999-08-28', \n                                                  '1999-11-18' \n                                                ))) \n                AND sr_returned_date_sk = d_date_sk \n         GROUP  BY i_item_id), \n     cr_items \n     AS (SELECT i_item_id               item_id, \n                Sum(cr_return_quantity) cr_item_qty \n         FROM   catalog_returns, \n                item, \n                date_dim \n         WHERE  cr_item_sk = i_item_sk \n                AND d_date IN (SELECT d_date \n                               FROM   date_dim \n                               WHERE  d_week_seq IN (SELECT d_week_seq \n                                                     FROM   date_dim \n                                                     WHERE \n                                      d_date IN ( '1999-06-30', \n                                                  '1999-08-28', \n                                                  '1999-11-18' \n                                                ))) \n                AND cr_returned_date_sk = d_date_sk \n         GROUP  BY i_item_id), \n     wr_items \n     AS (SELECT i_item_id               item_id, \n                Sum(wr_return_quantity) wr_item_qty \n         FROM   web_returns, \n                item, \n                date_dim \n         WHERE  wr_item_sk = i_item_sk \n                AND d_date IN (SELECT d_date \n                               FROM   date_dim \n                               WHERE  d_week_seq IN (SELECT d_week_seq \n                                                     FROM   date_dim \n                                                     WHERE \n                                      d_date IN ( '1999-06-30', \n                                                  '1999-08-28', \n                                                  '1999-11-18' \n                                                ))) \n                AND wr_returned_date_sk = d_date_sk \n         GROUP  BY i_item_id) \nSELECT sr_items.item_id, \n               sr_item_qty, \n               sr_item_qty \/ ( sr_item_qty + cr_item_qty + wr_item_qty ) \/ 3.0 * \n               100 sr_dev, \n               cr_item_qty, \n               cr_item_qty \/ ( sr_item_qty + cr_item_qty + wr_item_qty ) \/ 3.0 * \n               100 cr_dev, \n               wr_item_qty, \n               wr_item_qty \/ ( sr_item_qty + cr_item_qty + wr_item_qty ) \/ 3.0 * \n               100 wr_dev, \n               ( sr_item_qty + cr_item_qty + wr_item_qty ) \/ 3.0 \n               average \nFROM   sr_items, \n       cr_items, \n       wr_items \nWHERE  sr_items.item_id = cr_items.item_id \n       AND sr_items.item_id = wr_items.item_id \nORDER  BY sr_items.item_id, \n          sr_item_qty\nLIMIT 100; \n",
    "tables": [
      "CATALOG_RETURNS",
      "DATE_DIM",
      "ITEM",
      "STORE_RETURNS",
      "WEB_RETURNS"
    ],
    "columns": [
      "CR_ITEM_SK",
      "CR_RETURNED_DATE_SK",
      "CR_RETURN_QUANTITY",
      "D_DATE",
      "D_DATE_SK",
      "D_WEEK_SEQ",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SR_ITEM_SK",
      "SR_RETURNED_DATE_SK",
      "SR_RETURN_QUANTITY",
      "WR_ITEM_SK",
      "WR_RETURNED_DATE_SK",
      "WR_RETURN_QUANTITY"
    ],
    "question": "What are the item ids, return quantities for store returns, return quantities for catalog returns, return quantities for web returns, and average return quantity for the items with the top 100 return quantities, where the returned dates are June 30, 1999, August 28, 1999, or November 18, 1999?"
  },
  {
    "index": 82,
    "query": "-- start query 84 in stream 0 using template query84.tpl \nSELECT c_customer_id   AS customer_id, \n               c_last_name \n               || ', ' \n               || c_first_name AS customername \nFROM   customer, \n       customer_address, \n       customer_demographics, \n       household_demographics, \n       income_band, \n       store_returns \nWHERE  ca_city = 'Green Acres' \n       AND c_current_addr_sk = ca_address_sk \n       AND ib_lower_bound >= 54986 \n       AND ib_upper_bound <= 54986 + 50000 \n       AND ib_income_band_sk = hd_income_band_sk \n       AND cd_demo_sk = c_current_cdemo_sk \n       AND hd_demo_sk = c_current_hdemo_sk \n       AND sr_cdemo_sk = cd_demo_sk \nORDER  BY c_customer_id\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "HOUSEHOLD_DEMOGRAPHICS",
      "INCOME_BAND",
      "STORE_RETURNS"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_CITY",
      "CD_DEMO_SK",
      "C_CURRENT_ADDR_SK",
      "C_CURRENT_CDEMO_SK",
      "C_CURRENT_HDEMO_SK",
      "C_CUSTOMER_ID",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "HD_DEMO_SK",
      "HD_INCOME_BAND_SK",
      "IB_INCOME_BAND_SK",
      "IB_LOWER_BOUND",
      "IB_UPPER_BOUND",
      "SR_CDEMO_SK"
    ],
    "question": "What is the list of customer IDs and names of customers who live in \"Green Acres\", have an income between $54,986 and $104,986, and have returned items at the store? The list should be sorted by customer ID and limited to 100 customers."
  },
  {
    "index": 83,
    "query": "-- start query 85 in stream 0 using template query85.tpl \nSELECT Substr(r_reason_desc, 1, 20), \n               Avg(ws_quantity), \n               Avg(wr_refunded_cash), \n               Avg(wr_fee) \nFROM   web_sales, \n       web_returns, \n       web_page, \n       customer_demographics cd1, \n       customer_demographics cd2, \n       customer_address, \n       date_dim, \n       reason \nWHERE  ws_web_page_sk = wp_web_page_sk \n       AND ws_item_sk = wr_item_sk \n       AND ws_order_number = wr_order_number \n       AND ws_sold_date_sk = d_date_sk \n       AND d_year = 2001 \n       AND cd1.cd_demo_sk = wr_refunded_cdemo_sk \n       AND cd2.cd_demo_sk = wr_returning_cdemo_sk \n       AND ca_address_sk = wr_refunded_addr_sk \n       AND r_reason_sk = wr_reason_sk \n       AND ( ( cd1.cd_marital_status = 'W' \n               AND cd1.cd_marital_status = cd2.cd_marital_status \n               AND cd1.cd_education_status = 'Primary' \n               AND cd1.cd_education_status = cd2.cd_education_status \n               AND ws_sales_price BETWEEN 100.00 AND 150.00 ) \n              OR ( cd1.cd_marital_status = 'D' \n                   AND cd1.cd_marital_status = cd2.cd_marital_status \n                   AND cd1.cd_education_status = 'Secondary' \n                   AND cd1.cd_education_status = cd2.cd_education_status \n                   AND ws_sales_price BETWEEN 50.00 AND 100.00 ) \n              OR ( cd1.cd_marital_status = 'M' \n                   AND cd1.cd_marital_status = cd2.cd_marital_status \n                   AND cd1.cd_education_status = 'Advanced Degree' \n                   AND cd1.cd_education_status = cd2.cd_education_status \n                   AND ws_sales_price BETWEEN 150.00 AND 200.00 ) ) \n       AND ( ( ca_country = 'United States' \n               AND ca_state IN ( 'KY', 'ME', 'IL' ) \n               AND ws_net_profit BETWEEN 100 AND 200 ) \n              OR ( ca_country = 'United States' \n                   AND ca_state IN ( 'OK', 'NE', 'MN' ) \n                   AND ws_net_profit BETWEEN 150 AND 300 ) \n              OR ( ca_country = 'United States' \n                   AND ca_state IN ( 'FL', 'WI', 'KS' ) \n                   AND ws_net_profit BETWEEN 50 AND 250 ) ) \nGROUP  BY r_reason_desc \nORDER  BY Substr(r_reason_desc, 1, 20), \n          Avg(ws_quantity), \n          Avg(wr_refunded_cash), \n          Avg(wr_fee)\nLIMIT 100; \n",
    "tables": [
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "REASON",
      "WEB_PAGE",
      "WEB_RETURNS",
      "WEB_SALES"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_COUNTRY",
      "CA_STATE",
      "CD_DEMO_SK",
      "CD_EDUCATION_STATUS",
      "CD_MARITAL_STATUS",
      "D_DATE_SK",
      "D_YEAR",
      "R_REASON_DESC",
      "R_REASON_SK",
      "WP_WEB_PAGE_SK",
      "WR_FEE",
      "WR_ITEM_SK",
      "WR_ORDER_NUMBER",
      "WR_REASON_SK",
      "WR_REFUNDED_ADDR_SK",
      "WR_REFUNDED_CASH",
      "WR_REFUNDED_CDEMO_SK",
      "WR_RETURNING_CDEMO_SK",
      "WS_ITEM_SK",
      "WS_NET_PROFIT",
      "WS_ORDER_NUMBER",
      "WS_QUANTITY",
      "WS_SALES_PRICE",
      "WS_SOLD_DATE_SK",
      "WS_WEB_PAGE_SK"
    ],
    "question": "What is the average quantity of items sold, average amount refunded in cash, and average fee for refunds based on different reasons for web sales and web returns in the year 2001, considering customer demographics and customer addresses? Also, how do these averages vary based on marital status, education status, sales price, country, state, and net profit?"
  },
  {
    "index": 84,
    "query": "-- start query 86 in stream 0 using template query86.tpl \nSELECT Sum(ws_net_paid)                         AS total_sum, \n               i_category, \n               i_class, \n               Grouping(i_category) + Grouping(i_class) AS lochierarchy, \n               Rank() \n                 OVER ( \n                   partition BY Grouping(i_category)+Grouping(i_class), CASE \n                 WHEN Grouping( \n                 i_class) = 0 THEN i_category END \n                   ORDER BY Sum(ws_net_paid) DESC)      AS rank_within_parent \nFROM   web_sales, \n       date_dim d1, \n       item \nWHERE  d1.d_month_seq BETWEEN 1183 AND 1183 + 11 \n       AND d1.d_date_sk = ws_sold_date_sk \n       AND i_item_sk = ws_item_sk \nGROUP  BY rollup( i_category, i_class ) \nORDER  BY lochierarchy DESC, \n          CASE \n            WHEN lochierarchy = 0 THEN i_category \n          END, \n          rank_within_parent\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "WEB_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "I_CATEGORY",
      "I_CLASS",
      "I_ITEM_SK",
      "WS_ITEM_SK",
      "WS_NET_PAID",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the total sum of ws_net_paid for each combination of i_category and i_class, grouped by their hierarchy and rank within their parent category\/class, for the month sequence between 1183 and 1183 + 11?"
  },
  {
    "index": 85,
    "query": "-- start query 87 in stream 0 using template query87.tpl\nselect count(*) \nfrom ((select distinct c_last_name, c_first_name, d_date\n       from store_sales, date_dim, customer\n       where store_sales.ss_sold_date_sk = date_dim.d_date_sk\n         and store_sales.ss_customer_sk = customer.c_customer_sk\n         and d_month_seq between 1188 and 1188+11)\n       except\n      (select distinct c_last_name, c_first_name, d_date\n       from catalog_sales, date_dim, customer\n       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk\n         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk\n         and d_month_seq between 1188 and 1188+11)\n       except\n      (select distinct c_last_name, c_first_name, d_date\n       from web_sales, date_dim, customer\n       where web_sales.ws_sold_date_sk = date_dim.d_date_sk\n         and web_sales.ws_bill_customer_sk = customer.c_customer_sk\n         and d_month_seq between 1188 and 1188+11)\n) cool_cust\n;\n\n",
    "tables": [
      "CATALOG_SALES",
      "CUSTOMER",
      "DATE_DIM",
      "STORE_SALES",
      "WEB_SALES"
    ],
    "columns": [
      "CS_BILL_CUSTOMER_SK",
      "CS_SOLD_DATE_SK",
      "C_CUSTOMER_SK",
      "C_FIRST_NAME",
      "C_LAST_NAME",
      "D_DATE",
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "SS_CUSTOMER_SK",
      "SS_SOLD_DATE_SK",
      "WS_BILL_CUSTOMER_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "How many distinct customers made purchases at the store (store_sales), but did not make any purchases through the catalog (catalog_sales) or the web (web_sales) during the specified 12-month period?"
  },
  {
    "index": 86,
    "query": "-- start query 88 in stream 0 using template query88.tpl\nselect  *\nfrom\n (select count(*) h8_30_to_9\n from store_sales, household_demographics , time_dim, store\n where ss_sold_time_sk = time_dim.t_time_sk   \n     and ss_hdemo_sk = household_demographics.hd_demo_sk \n     and ss_store_sk = s_store_sk\n     and time_dim.t_hour = 8\n     and time_dim.t_minute >= 30\n     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or\n          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\n          (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2)) \n     and store.s_store_name = 'ese') s1,\n (select count(*) h9_to_9_30 \n from store_sales, household_demographics , time_dim, store\n where ss_sold_time_sk = time_dim.t_time_sk\n     and ss_hdemo_sk = household_demographics.hd_demo_sk\n     and ss_store_sk = s_store_sk \n     and time_dim.t_hour = 9 \n     and time_dim.t_minute < 30\n     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or\n          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\n          (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2))\n     and store.s_store_name = 'ese') s2,\n (select count(*) h9_30_to_10 \n from store_sales, household_demographics , time_dim, store\n where ss_sold_time_sk = time_dim.t_time_sk\n     and ss_hdemo_sk = household_demographics.hd_demo_sk\n     and ss_store_sk = s_store_sk\n     and time_dim.t_hour = 9\n     and time_dim.t_minute >= 30\n     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or\n          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\n          (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2))\n     and store.s_store_name = 'ese') s3,\n (select count(*) h10_to_10_30\n from store_sales, household_demographics , time_dim, store\n where ss_sold_time_sk = time_dim.t_time_sk\n     and ss_hdemo_sk = household_demographics.hd_demo_sk\n     and ss_store_sk = s_store_sk\n     and time_dim.t_hour = 10 \n     and time_dim.t_minute < 30\n     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or\n          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\n          (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2))\n     and store.s_store_name = 'ese') s4,\n (select count(*) h10_30_to_11\n from store_sales, household_demographics , time_dim, store\n where ss_sold_time_sk = time_dim.t_time_sk\n     and ss_hdemo_sk = household_demographics.hd_demo_sk\n     and ss_store_sk = s_store_sk\n     and time_dim.t_hour = 10 \n     and time_dim.t_minute >= 30\n     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or\n          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\n          (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2))\n     and store.s_store_name = 'ese') s5,\n (select count(*) h11_to_11_30\n from store_sales, household_demographics , time_dim, store\n where ss_sold_time_sk = time_dim.t_time_sk\n     and ss_hdemo_sk = household_demographics.hd_demo_sk\n     and ss_store_sk = s_store_sk \n     and time_dim.t_hour = 11\n     and time_dim.t_minute < 30\n     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or\n          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\n          (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2))\n     and store.s_store_name = 'ese') s6,\n (select count(*) h11_30_to_12\n from store_sales, household_demographics , time_dim, store\n where ss_sold_time_sk = time_dim.t_time_sk\n     and ss_hdemo_sk = household_demographics.hd_demo_sk\n     and ss_store_sk = s_store_sk\n     and time_dim.t_hour = 11\n     and time_dim.t_minute >= 30\n     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or\n          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\n          (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2))\n     and store.s_store_name = 'ese') s7,\n (select count(*) h12_to_12_30\n from store_sales, household_demographics , time_dim, store\n where ss_sold_time_sk = time_dim.t_time_sk\n     and ss_hdemo_sk = household_demographics.hd_demo_sk\n     and ss_store_sk = s_store_sk\n     and time_dim.t_hour = 12\n     and time_dim.t_minute < 30\n     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or\n          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\n          (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2))\n     and store.s_store_name = 'ese') s8\n;\n\n",
    "tables": [
      "HOUSEHOLD_DEMOGRAPHICS",
      "STORE",
      "STORE_SALES",
      "TIME_DIM"
    ],
    "columns": [
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "SS_HDEMO_SK",
      "SS_SOLD_TIME_SK",
      "SS_STORE_SK",
      "S_STORE_NAME",
      "S_STORE_SK",
      "T_HOUR",
      "T_MINUTE",
      "T_TIME_SK"
    ],
    "question": "What is the count of store sales for different time intervals (ranging from 8:30 AM to 12:30 PM) in a specific store (ese) for households with certain demographic characteristics (specifically, those with dependent count of -1, 2, or 3 and vehicle count range of -1 to 3)?"
  },
  {
    "index": 87,
    "query": "-- start query 89 in stream 0 using template query89.tpl \nSELECT  * \nFROM  (SELECT i_category, \n              i_class, \n              i_brand, \n              s_store_name, \n              s_company_name, \n              d_moy, \n              Sum(ss_sales_price) sum_sales, \n              Avg(Sum(ss_sales_price)) \n                OVER ( \n                  partition BY i_category, i_brand, s_store_name, s_company_name \n                ) \n                                  avg_monthly_sales \n       FROM   item, \n              store_sales, \n              date_dim, \n              store \n       WHERE  ss_item_sk = i_item_sk \n              AND ss_sold_date_sk = d_date_sk \n              AND ss_store_sk = s_store_sk \n              AND d_year IN ( 2002 ) \n              AND ( ( i_category IN ( 'Home', 'Men', 'Sports' ) \n                      AND i_class IN ( 'paint', 'accessories', 'fitness' ) ) \n                     OR ( i_category IN ( 'Shoes', 'Jewelry', 'Women' ) \n                          AND i_class IN ( 'mens', 'pendants', 'swimwear' ) ) ) \n       GROUP  BY i_category, \n                 i_class, \n                 i_brand, \n                 s_store_name, \n                 s_company_name, \n                 d_moy) tmp1 \nWHERE  CASE \n         WHEN ( avg_monthly_sales <> 0 ) THEN ( \n         Abs(sum_sales - avg_monthly_sales) \/ avg_monthly_sales ) \n         ELSE NULL \n       END > 0.1 \nORDER  BY sum_sales - avg_monthly_sales, \n          s_store_name\nLIMIT 100; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "I_BRAND",
      "I_CATEGORY",
      "I_CLASS",
      "I_ITEM_SK",
      "SS_ITEM_SK",
      "SS_SALES_PRICE",
      "SS_SOLD_DATE_SK",
      "SS_STORE_SK",
      "S_COMPANY_NAME",
      "S_STORE_NAME",
      "S_STORE_SK"
    ],
    "question": "What are the details of items and stores where the monthly sales deviate by more than 10% from the average monthly sales in 2002, for the specified categories and classes?"
  },
  {
    "index": 88,
    "query": "-- start query 9 in stream 0 using template query9.tpl \nSELECT CASE \n         WHEN (SELECT Count(*) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 1 AND 20) > 3672 THEN \n         (SELECT Avg(ss_ext_list_price) \n          FROM   store_sales \n          WHERE \n         ss_quantity BETWEEN 1 AND 20) \n         ELSE (SELECT Avg(ss_net_profit) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 1 AND 20) \n       END bucket1, \n       CASE \n         WHEN (SELECT Count(*) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 21 AND 40) > 3392 THEN \n         (SELECT Avg(ss_ext_list_price) \n          FROM   store_sales \n          WHERE \n         ss_quantity BETWEEN 21 AND 40) \n         ELSE (SELECT Avg(ss_net_profit) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 21 AND 40) \n       END bucket2, \n       CASE \n         WHEN (SELECT Count(*) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 41 AND 60) > 32784 THEN \n         (SELECT Avg(ss_ext_list_price) \n          FROM   store_sales \n          WHERE \n         ss_quantity BETWEEN 41 AND 60) \n         ELSE (SELECT Avg(ss_net_profit) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 41 AND 60) \n       END bucket3, \n       CASE \n         WHEN (SELECT Count(*) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 61 AND 80) > 26032 THEN \n         (SELECT Avg(ss_ext_list_price) \n          FROM   store_sales \n          WHERE \n         ss_quantity BETWEEN 61 AND 80) \n         ELSE (SELECT Avg(ss_net_profit) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 61 AND 80) \n       END bucket4, \n       CASE \n         WHEN (SELECT Count(*) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 81 AND 100) > 23982 THEN \n         (SELECT Avg(ss_ext_list_price) \n          FROM   store_sales \n          WHERE \n         ss_quantity BETWEEN 81 AND 100) \n         ELSE (SELECT Avg(ss_net_profit) \n               FROM   store_sales \n               WHERE  ss_quantity BETWEEN 81 AND 100) \n       END bucket5 \nFROM   reason \nWHERE  r_reason_sk = 1; \n",
    "tables": [
      "REASON",
      "STORE_SALES"
    ],
    "columns": [
      "R_REASON_SK",
      "SS_EXT_LIST_PRICE",
      "SS_NET_PROFIT",
      "SS_QUANTITY"
    ],
    "question": "What is the average extended list price or net profit for store sales in different quantity buckets (1-20, 21-40, 41-60, 61-80, 81-100) depending on the count of store sales with quantities in each bucket being greater than certain thresholds (3672, 3392, 32784, 26032, 23982)?"
  },
  {
    "index": 89,
    "query": "\n-- start query 90 in stream 0 using template query90.tpl \nSELECT Cast(amc AS DECIMAL(15, 4)) \/ Cast(pmc AS DECIMAL(15, 4)) \n               am_pm_ratio \nFROM   (SELECT Count(*) amc \n        FROM   web_sales, \n               household_demographics, \n               time_dim, \n               web_page \n        WHERE  ws_sold_time_sk = time_dim.t_time_sk \n               AND ws_ship_hdemo_sk = household_demographics.hd_demo_sk \n               AND ws_web_page_sk = web_page.wp_web_page_sk \n               AND time_dim.t_hour BETWEEN 12 AND 12 + 1 \n               AND household_demographics.hd_dep_count = 8 \n               AND web_page.wp_char_count BETWEEN 5000 AND 5200) at1, \n       (SELECT Count(*) pmc \n        FROM   web_sales, \n               household_demographics, \n               time_dim, \n               web_page \n        WHERE  ws_sold_time_sk = time_dim.t_time_sk \n               AND ws_ship_hdemo_sk = household_demographics.hd_demo_sk \n               AND ws_web_page_sk = web_page.wp_web_page_sk \n               AND time_dim.t_hour BETWEEN 20 AND 20 + 1 \n               AND household_demographics.hd_dep_count = 8 \n               AND web_page.wp_char_count BETWEEN 5000 AND 5200) pt \nORDER  BY am_pm_ratio\nLIMIT 100; \n",
    "tables": [
      "HOUSEHOLD_DEMOGRAPHICS",
      "TIME_DIM",
      "WEB_PAGE",
      "WEB_SALES"
    ],
    "columns": [
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "T_HOUR",
      "T_TIME_SK",
      "WP_CHAR_COUNT",
      "WP_WEB_PAGE_SK",
      "WS_SHIP_HDEMO_SK",
      "WS_SOLD_TIME_SK",
      "WS_WEB_PAGE_SK"
    ],
    "question": "What is the AM\/PM ratio for web sales between 12pm and 1pm and 8pm and 9pm for households with a department count of 8 and web pages with a character count between 5000 and 5200?"
  },
  {
    "index": 90,
    "query": "-- start query 91 in stream 0 using template query91.tpl \nSELECT cc_call_center_id Call_Center, \n       cc_name           Call_Center_Name, \n       cc_manager        Manager, \n       Sum(cr_net_loss)  Returns_Loss \nFROM   call_center, \n       catalog_returns, \n       date_dim, \n       customer, \n       customer_address, \n       customer_demographics, \n       household_demographics \nWHERE  cr_call_center_sk = cc_call_center_sk \n       AND cr_returned_date_sk = d_date_sk \n       AND cr_returning_customer_sk = c_customer_sk \n       AND cd_demo_sk = c_current_cdemo_sk \n       AND hd_demo_sk = c_current_hdemo_sk \n       AND ca_address_sk = c_current_addr_sk \n       AND d_year = 1999 \n       AND d_moy = 12 \n       AND ( ( cd_marital_status = 'M' \n               AND cd_education_status = 'Unknown' ) \n              OR ( cd_marital_status = 'W' \n                   AND cd_education_status = 'Advanced Degree' ) ) \n       AND hd_buy_potential LIKE 'Unknown%' \n       AND ca_gmt_offset = -7 \nGROUP  BY cc_call_center_id, \n          cc_name, \n          cc_manager, \n          cd_marital_status, \n          cd_education_status \nORDER  BY Sum(cr_net_loss) DESC; \n",
    "tables": [
      "CALL_CENTER",
      "CATALOG_RETURNS",
      "CUSTOMER",
      "CUSTOMER_ADDRESS",
      "CUSTOMER_DEMOGRAPHICS",
      "DATE_DIM",
      "HOUSEHOLD_DEMOGRAPHICS"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_GMT_OFFSET",
      "CC_CALL_CENTER_ID",
      "CC_CALL_CENTER_SK",
      "CC_MANAGER",
      "CC_NAME",
      "CD_DEMO_SK",
      "CD_EDUCATION_STATUS",
      "CD_MARITAL_STATUS",
      "CR_CALL_CENTER_SK",
      "CR_NET_LOSS",
      "CR_RETURNED_DATE_SK",
      "CR_RETURNING_CUSTOMER_SK",
      "C_CURRENT_ADDR_SK",
      "C_CURRENT_CDEMO_SK",
      "C_CURRENT_HDEMO_SK",
      "C_CUSTOMER_SK",
      "D_DATE_SK",
      "D_MOY",
      "D_YEAR",
      "HD_BUY_POTENTIAL",
      "HD_DEMO_SK"
    ],
    "question": "What is the total returns loss for each call center in the year 1999, for the month of December, where the customer's marital status is either 'M' with an education status of 'Unknown' or 'W' with an education status of 'Advanced Degree', the household's buy potential starts with 'Unknown', and the customer's address has a GMT offset of -7?"
  },
  {
    "index": 91,
    "query": "-- start query 92 in stream 0 using template query92.tpl \nSELECT \n         Sum(ws_ext_discount_amt) AS `Excess Discount Amount`\nFROM     web_sales , \n         item , \n         date_dim \nWHERE    i_manufact_id = 718 \nAND      i_item_sk = ws_item_sk \nAND      d_date BETWEEN '2002-03-29' AND      ( \n                  Cast('2002-03-29' AS DATE) +  INTERVAL '90' day) \nAND      d_date_sk = ws_sold_date_sk \nAND      ws_ext_discount_amt > \n         ( \n                SELECT 1.3 * avg(ws_ext_discount_amt) \n                FROM   web_sales , \n                       date_dim \n                WHERE  ws_item_sk = i_item_sk \n                AND    d_date BETWEEN '2002-03-29' AND    ( \n                              cast('2002-03-29' AS date) + INTERVAL '90' day) \n                AND    d_date_sk = ws_sold_date_sk ) \nORDER BY sum(ws_ext_discount_amt) \nLIMIT 100; \n\n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "WEB_SALES"
    ],
    "columns": [
      "D_DATE",
      "D_DATE_SK",
      "I_ITEM_SK",
      "I_MANUFACT_ID",
      "WS_EXT_DISCOUNT_AMT",
      "WS_ITEM_SK",
      "WS_SOLD_DATE_SK"
    ],
    "question": "What is the total \"Excess Discount Amount\" for web sales of items manufactured by manufacturer ID 718 between March 29, 2002, and 90 days after March 29, 2002, where the discount amount is greater than 1.3 times the average discount amount for web sales of the same item within the same timeframe?"
  },
  {
    "index": 92,
    "query": "-- start query 93 in stream 0 using template query93.tpl \nSELECT ss_customer_sk, \n               Sum(act_sales) sumsales \nFROM   (SELECT ss_item_sk, \n               ss_ticket_number, \n               ss_customer_sk, \n               CASE \n                 WHEN sr_return_quantity IS NOT NULL THEN \n                 ( ss_quantity - sr_return_quantity ) * ss_sales_price \n                 ELSE ( ss_quantity * ss_sales_price ) \n               END act_sales \n        FROM   store_sales \n               LEFT OUTER JOIN store_returns \n                            ON ( sr_item_sk = ss_item_sk \n                                 AND sr_ticket_number = ss_ticket_number ), \n               reason \n        WHERE  sr_reason_sk = r_reason_sk \n               AND r_reason_desc = 'reason 38') t \nGROUP  BY ss_customer_sk \nORDER  BY sumsales, \n          ss_customer_sk\nLIMIT 100; \n",
    "tables": [
      "REASON",
      "STORE_RETURNS",
      "STORE_SALES"
    ],
    "columns": [
      "R_REASON_DESC",
      "R_REASON_SK",
      "SR_ITEM_SK",
      "SR_REASON_SK",
      "SR_RETURN_QUANTITY",
      "SR_TICKET_NUMBER",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_QUANTITY",
      "SS_SALES_PRICE",
      "SS_TICKET_NUMBER"
    ],
    "question": "What is the sum of actual sales and the corresponding customer IDs for customers who made purchases related to reason 38, sorted by the sum of actual sales in ascending order and customer ID?"
  },
  {
    "index": 93,
    "query": "-- start query 94 in stream 0 using template query94.tpl \nSELECT \n         Count(DISTINCT ws_order_number) AS `order count` , \n         Sum(ws_ext_ship_cost)           AS `total shipping cost` , \n         Sum(ws_net_profit)              AS `total net profit` \nFROM     web_sales ws1 , \n         date_dim , \n         customer_address , \n         web_site \nWHERE    d_date BETWEEN '2000-3-01' AND      ( \n                  Cast('2000-3-01' AS DATE) + INTERVAL '60' day) \nAND      ws1.ws_ship_date_sk = d_date_sk \nAND      ws1.ws_ship_addr_sk = ca_address_sk \nAND      ca_state = 'MT' \nAND      ws1.ws_web_site_sk = web_site_sk \nAND      web_company_name = 'pri' \nAND      EXISTS \n         ( \n                SELECT * \n                FROM   web_sales ws2 \n                WHERE  ws1.ws_order_number = ws2.ws_order_number \n                AND    ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk) \nAND      NOT EXISTS \n         ( \n                SELECT * \n                FROM   web_returns wr1 \n                WHERE  ws1.ws_order_number = wr1.wr_order_number) \nORDER BY count(DISTINCT ws_order_number) \nLIMIT 100; \n\n",
    "tables": [
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "WEB_RETURNS",
      "WEB_SALES",
      "WEB_SITE"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "D_DATE",
      "D_DATE_SK",
      "WEB_COMPANY_NAME",
      "WEB_SITE_SK",
      "WR_ORDER_NUMBER",
      "WS_EXT_SHIP_COST",
      "WS_NET_PROFIT",
      "WS_ORDER_NUMBER",
      "WS_SHIP_ADDR_SK",
      "WS_SHIP_DATE_SK",
      "WS_WAREHOUSE_SK",
      "WS_WEB_SITE_SK"
    ],
    "question": "What is the order count, total shipping cost, and total net profit for web sales in the state of Montana with a ship date between March 1, 2000 and 60 days after March 1, 2000, made through the website with the company name 'pri', and where there are multiple warehouses involved in fulfilling the orders and no returns have been made?"
  },
  {
    "index": 94,
    "query": "-- start query 95 in stream 0 using template query95.tpl \nWITH ws_wh AS \n( \n       SELECT ws1.ws_order_number, \n              ws1.ws_warehouse_sk wh1, \n              ws2.ws_warehouse_sk wh2 \n       FROM   web_sales ws1, \n              web_sales ws2 \n       WHERE  ws1.ws_order_number = ws2.ws_order_number \n       AND    ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk) \nSELECT \n         Count(DISTINCT ws_order_number) AS `order count` , \n         Sum(ws_ext_ship_cost)           AS `total shipping cost` , \n         Sum(ws_net_profit)              AS `total net profit` \nFROM     web_sales ws1 , \n         date_dim , \n         customer_address , \n         web_site \nWHERE    d_date BETWEEN '2000-4-01' AND      ( \n                  Cast('2000-4-01' AS DATE) + INTERVAL '60' day) \nAND      ws1.ws_ship_date_sk = d_date_sk \nAND      ws1.ws_ship_addr_sk = ca_address_sk \nAND      ca_state = 'IN' \nAND      ws1.ws_web_site_sk = web_site_sk \nAND      web_company_name = 'pri' \nAND      ws1.ws_order_number IN \n         ( \n                SELECT ws_order_number \n                FROM   ws_wh) \nAND      ws1.ws_order_number IN \n         ( \n                SELECT wr_order_number \n                FROM   web_returns, \n                       ws_wh \n                WHERE  wr_order_number = ws_wh.ws_order_number) \nORDER BY count(DISTINCT ws_order_number) \nLIMIT 100; \n\n",
    "tables": [
      "CUSTOMER_ADDRESS",
      "DATE_DIM",
      "WEB_RETURNS",
      "WEB_SALES",
      "WEB_SITE"
    ],
    "columns": [
      "CA_ADDRESS_SK",
      "CA_STATE",
      "D_DATE",
      "D_DATE_SK",
      "WEB_COMPANY_NAME",
      "WEB_SITE_SK",
      "WR_ORDER_NUMBER",
      "WS_EXT_SHIP_COST",
      "WS_NET_PROFIT",
      "WS_ORDER_NUMBER",
      "WS_SHIP_ADDR_SK",
      "WS_SHIP_DATE_SK",
      "WS_WAREHOUSE_SK",
      "WS_WEB_SITE_SK"
    ],
    "question": "What is the count of distinct order numbers, total shipping cost, and total net profit for web sales between April 1, 2000 and 60 days after April 1, 2000 in the state of Indiana (IN) for a specific company (\"pri\")? Additionally, please provide the results where the web sales \"ws_order_number\" is in the \"ws_wh\" dataset and where the \"ws_order_number\" is also in the \"web_returns\" dataset. Finally, please order the results by the count of distinct order numbers in ascending order and limit the results to 100 rows."
  },
  {
    "index": 95,
    "query": "-- start query 96 in stream 0 using template query96.tpl \nSELECT Count(*) \nFROM   store_sales, \n       household_demographics, \n       time_dim, \n       store \nWHERE  ss_sold_time_sk = time_dim.t_time_sk \n       AND ss_hdemo_sk = household_demographics.hd_demo_sk \n       AND ss_store_sk = s_store_sk \n       AND time_dim.t_hour = 15 \n       AND time_dim.t_minute >= 30 \n       AND household_demographics.hd_dep_count = 7 \n       AND store.s_store_name = 'ese' \nORDER  BY Count(*)\nLIMIT 100; \n",
    "tables": [
      "HOUSEHOLD_DEMOGRAPHICS",
      "STORE",
      "STORE_SALES",
      "TIME_DIM"
    ],
    "columns": [
      "HD_DEMO_SK",
      "HD_DEP_COUNT",
      "SS_HDEMO_SK",
      "SS_SOLD_TIME_SK",
      "SS_STORE_SK",
      "S_STORE_NAME",
      "S_STORE_SK",
      "T_HOUR",
      "T_MINUTE",
      "T_TIME_SK"
    ],
    "question": "How many store sales occurred on a specific day and time, involving a specific household demographic and store name?"
  },
  {
    "index": 96,
    "query": "\n-- start query 97 in stream 0 using template query97.tpl \nWITH ssci \n     AS (SELECT ss_customer_sk customer_sk, \n                ss_item_sk     item_sk \n         FROM   store_sales, \n                date_dim \n         WHERE  ss_sold_date_sk = d_date_sk \n                AND d_month_seq BETWEEN 1196 AND 1196 + 11 \n         GROUP  BY ss_customer_sk, \n                   ss_item_sk), \n     csci \n     AS (SELECT cs_bill_customer_sk customer_sk, \n                cs_item_sk          item_sk \n         FROM   catalog_sales, \n                date_dim \n         WHERE  cs_sold_date_sk = d_date_sk \n                AND d_month_seq BETWEEN 1196 AND 1196 + 11 \n         GROUP  BY cs_bill_customer_sk, \n                   cs_item_sk) \nSELECT Sum(CASE \n                     WHEN ssci.customer_sk IS NOT NULL \n                          AND csci.customer_sk IS NULL THEN 1 \n                     ELSE 0 \n                   END) store_only, \n               Sum(CASE \n                     WHEN ssci.customer_sk IS NULL \n                          AND csci.customer_sk IS NOT NULL THEN 1 \n                     ELSE 0 \n                   END) catalog_only, \n               Sum(CASE \n                     WHEN ssci.customer_sk IS NOT NULL \n                          AND csci.customer_sk IS NOT NULL THEN 1 \n                     ELSE 0 \n                   END) store_and_catalog \nFROM   ssci \n       FULL OUTER JOIN csci \n                    ON ( ssci.customer_sk = csci.customer_sk \n                         AND ssci.item_sk = csci.item_sk )\nLIMIT 100; \n",
    "tables": [
      "CATALOG_SALES",
      "DATE_DIM",
      "STORE_SALES"
    ],
    "columns": [
      "CS_BILL_CUSTOMER_SK",
      "CS_ITEM_SK",
      "CS_SOLD_DATE_SK",
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "SS_CUSTOMER_SK",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK"
    ],
    "question": "What is the count of customers who made purchases exclusively at a physical store (store_only), customers who made purchases exclusively through the catalog (catalog_only), and customers who made purchases through both the store and the catalog (store_and_catalog) during a specific 12-month period?"
  },
  {
    "index": 97,
    "query": "\n-- start query 98 in stream 0 using template query98.tpl \nSELECT i_item_id, \n       i_item_desc, \n       i_category, \n       i_class, \n       i_current_price, \n       Sum(ss_ext_sales_price)                                   AS itemrevenue, \n       Sum(ss_ext_sales_price) * 100 \/ Sum(Sum(ss_ext_sales_price)) \n                                         OVER ( \n                                           PARTITION BY i_class) AS revenueratio \nFROM   store_sales, \n       item, \n       date_dim \nWHERE  ss_item_sk = i_item_sk \n       AND i_category IN ( 'Men', 'Home', 'Electronics' ) \n       AND ss_sold_date_sk = d_date_sk \n       AND d_date BETWEEN CAST('2000-05-18' AS DATE) AND ( \n                          CAST('2000-05-18' AS DATE) + INTERVAL '30' DAY ) \nGROUP  BY i_item_id, \n          i_item_desc, \n          i_category, \n          i_class, \n          i_current_price \nORDER  BY i_category, \n          i_class, \n          i_item_id, \n          i_item_desc, \n          revenueratio; \n",
    "tables": [
      "DATE_DIM",
      "ITEM",
      "STORE_SALES"
    ],
    "columns": [
      "D_DATE",
      "D_DATE_SK",
      "I_CATEGORY",
      "I_CLASS",
      "I_CURRENT_PRICE",
      "I_ITEM_DESC",
      "I_ITEM_ID",
      "I_ITEM_SK",
      "SS_EXT_SALES_PRICE",
      "SS_ITEM_SK",
      "SS_SOLD_DATE_SK"
    ],
    "question": "What is the itemrevenue and revenueratio for each item in the Men, Home, and Electronics categories, between the dates May 18, 2000 and June 17, 2000? Also, how are the items sorted in the result set?"
  },
  {
    "index": 98,
    "query": "\n\n-- start query 99 in stream 0 using template query99.tpl \nSELECT Substr(w_warehouse_name, 1, 20), \n               sm_type, \n               cc_name, \n               Sum(CASE \n                     WHEN ( cs_ship_date_sk - cs_sold_date_sk <= 30 ) THEN 1 \n                     ELSE 0 \n                   END) AS `30 days`, \n               Sum(CASE \n                     WHEN ( cs_ship_date_sk - cs_sold_date_sk > 30 ) \n                          AND ( cs_ship_date_sk - cs_sold_date_sk <= 60 ) THEN 1 \n                     ELSE 0 \n                   END) AS `31-60 days`, \n               Sum(CASE \n                     WHEN ( cs_ship_date_sk - cs_sold_date_sk > 60 ) \n                          AND ( cs_ship_date_sk - cs_sold_date_sk <= 90 ) THEN 1 \n                     ELSE 0 \n                   END) AS `61-90 days`, \n               Sum(CASE \n                     WHEN ( cs_ship_date_sk - cs_sold_date_sk > 90 ) \n                          AND ( cs_ship_date_sk - cs_sold_date_sk <= 120 ) THEN \n                     1 \n                     ELSE 0 \n                   END) AS `91-120 days`, \n               Sum(CASE \n                     WHEN ( cs_ship_date_sk - cs_sold_date_sk > 120 ) THEN 1 \n                     ELSE 0 \n                   END) AS `>120 days` \nFROM   catalog_sales, \n       warehouse, \n       ship_mode, \n       call_center, \n       date_dim \nWHERE  d_month_seq BETWEEN 1200 AND 1200 + 11 \n       AND cs_ship_date_sk = d_date_sk \n       AND cs_warehouse_sk = w_warehouse_sk \n       AND cs_ship_mode_sk = sm_ship_mode_sk \n       AND cs_call_center_sk = cc_call_center_sk \nGROUP  BY Substr(w_warehouse_name, 1, 20), \n          sm_type, \n          cc_name \nORDER  BY Substr(w_warehouse_name, 1, 20), \n          sm_type, \n          cc_name\nLIMIT 100; \n",
    "tables": [
      "CALL_CENTER",
      "CATALOG_SALES",
      "DATE_DIM",
      "SHIP_MODE",
      "WAREHOUSE"
    ],
    "columns": [
      "CC_CALL_CENTER_SK",
      "CC_NAME",
      "CS_CALL_CENTER_SK",
      "CS_SHIP_DATE_SK",
      "CS_SHIP_MODE_SK",
      "CS_SOLD_DATE_SK",
      "CS_WAREHOUSE_SK",
      "D_DATE_SK",
      "D_MONTH_SEQ",
      "SM_SHIP_MODE_SK",
      "SM_TYPE",
      "W_WAREHOUSE_NAME",
      "W_WAREHOUSE_SK"
    ],
    "question": "How many catalog sales were made within different time ranges (30 days, 31-60 days, 61-90 days, 91-120 days, and more than 120 days) for each combination of warehouse, ship mode, and call center, within a specific 12-month period?"
  }
]